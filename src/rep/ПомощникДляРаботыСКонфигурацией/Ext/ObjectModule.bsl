#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем РазрешенныеТипыКВыгрузке;

Перем ЗаполненныеРеквизиты;

Перем КэшИменМетаданныхПоТипу;

#КонецОбласти

#Область ПрограммныйИнтерфейс

#Область РаботаСМетаданными

Функция ПолучитьПодсистемыОбъекта(МетаданныеОбъект) Экспорт
	
	Подсистемы = Новый Массив;
	
	ПолучитьПодсистемыОбъектаРекурсивно(МетаданныеОбъект, Метаданные.Подсистемы, Подсистемы);
	
	Возврат Подсистемы;
	
КонецФункции

Функция ПолучитьФункциональныеОпцииОбъекта(МетаданныеОбъект) Экспорт
	
	ФункциональныеОпции = Новый Массив;
	
	Для Каждого ФункциональнаяОпция Из Метаданные.ФункциональныеОпции Цикл
		
		Если ФункциональнаяОпция.Состав.Содержит(МетаданныеОбъект) Тогда
			ФункциональныеОпции.Добавить(ФункциональнаяОпция);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ФункциональныеОпции;
	
КонецФункции

Функция ПодчиненныеМетаданныеРаздела(Раздел, АнализПрав = Ложь) Экспорт

	СписокМетаданных = Новый Массив;
	
	ДобавлятьКоманды = ИСТИНА;
	
	Если Раздел = "Подсистемы" Тогда
		СписокМетаданных.Добавить("Подсистемы");
		ДобавлятьКоманды = ЛОЖЬ;
	ИначеЕсли Раздел = "КритерииОтбора" Тогда
	ИначеЕсли Раздел = "WebСервисы" Тогда
		СписокМетаданных.Добавить("Операции");
		ДобавлятьКоманды = ЛОЖЬ;
	ИначеЕсли Раздел = "ЖурналыДокументов" Тогда
		СписокМетаданных.Добавить("СтандартныеРеквизиты");
	ИначеЕсли Раздел = "Отчеты" Тогда
		СписокМетаданных.Добавить("Реквизиты");
		СписокМетаданных.Добавить("ТабличныеЧасти");
	ИначеЕсли Раздел = "Обработки" Тогда
		СписокМетаданных.Добавить("Реквизиты");
		СписокМетаданных.Добавить("ТабличныеЧасти");
	ИначеЕсли Раздел = "Справочники" Тогда
		ПодчиненныеМетаданныеОбъекта(СписокМетаданных);
	ИначеЕсли Раздел = "Документы" Тогда
		ПодчиненныеМетаданныеОбъекта(СписокМетаданных);
	ИначеЕсли Раздел = "Перечисления" Тогда
	ИначеЕсли Раздел = "ПланыВидовХарактеристик" Тогда
		ПодчиненныеМетаданныеОбъекта(СписокМетаданных);
	ИначеЕсли Раздел = "ПланыОбмена" Тогда
		ПодчиненныеМетаданныеОбъекта(СписокМетаданных);
	ИначеЕсли Раздел = "ПланыСчетов" Тогда
		ПодчиненныеМетаданныеОбъекта(СписокМетаданных);
		СписокМетаданных.Вставить(1, "СтандартныеТабличныеЧасти");
		СписокМетаданных.Добавить("ПризнакиУчета");
		СписокМетаданных.Добавить("ПризнакиУчетаСубконто");
	ИначеЕсли Раздел = "ПланыВидовРасчета" Тогда
		ПодчиненныеМетаданныеОбъекта(СписокМетаданных);
		СписокМетаданных.Вставить(1, "СтандартныеТабличныеЧасти");
	ИначеЕсли Раздел = "РегистрыСведений" Тогда
		ПодчиненныеМетаданныеРегистра(СписокМетаданных);
	ИначеЕсли Раздел = "РегистрыНакопления" Тогда
		ПодчиненныеМетаданныеРегистра(СписокМетаданных);
	ИначеЕсли Раздел = "РегистрыБухгалтерии" Тогда
		ПодчиненныеМетаданныеРегистра(СписокМетаданных);
	ИначеЕсли Раздел = "РегистрыРасчета" Тогда
		ПодчиненныеМетаданныеРегистра(СписокМетаданных);
	ИначеЕсли Раздел = "БизнесПроцессы" Тогда
		ПодчиненныеМетаданныеОбъекта(СписокМетаданных);
	ИначеЕсли Раздел = "Задачи" Тогда
		ПодчиненныеМетаданныеОбъекта(СписокМетаданных);
		СписокМетаданных.Вставить(2, "РеквизитыАдресации");
	ИначеЕсли Раздел = "СтандартныеТабличныеЧасти" Тогда
		СписокМетаданных.Добавить("СтандартныеРеквизиты");
		ДобавлятьКоманды = ЛОЖЬ;
	ИначеЕсли Раздел = "ТабличныеЧасти" Тогда
		СписокМетаданных.Добавить("СтандартныеРеквизиты");
		СписокМетаданных.Добавить("Реквизиты");
		ДобавлятьКоманды = ЛОЖЬ;
	Иначе
		ДобавлятьКоманды = ЛОЖЬ;
	КонецЕсли;
	
	Если ДобавлятьКоманды Тогда
		СписокМетаданных.Добавить("Команды");
	КонецЕсли;
	
	Если Не АнализПрав Тогда
		ДополнительныеПодчиненныеМетаданныеРаздела(Раздел, СписокМетаданных);
	КонецЕсли;
	
	Возврат СписокМетаданных;

КонецФункции

Функция ПолучитьРазделы() Экспорт
	
	Разделы = Новый Массив;
	// Общие
	Разделы.Добавить(ИнициализироватьРаздел("Подсистемы",              Истина, Истина));
	Разделы.Добавить(ИнициализироватьРаздел("ПараметрыСеанса",         Истина, Ложь));
	Разделы.Добавить(ИнициализироватьРаздел("ОбщиеРеквизиты",          Истина, Ложь));
	Разделы.Добавить(ИнициализироватьРаздел("ПланыОбмена",             Истина, Ложь, ИСТИНА, ИСТИНА));
	Разделы.Добавить(ИнициализироватьРаздел("КритерииОтбора",          Истина, Ложь));
	Разделы.Добавить(ИнициализироватьРаздел("РегламентныеЗадания",     Истина, Ложь));
	Разделы.Добавить(ИнициализироватьРаздел("ФункциональныеОпции",     Истина, Ложь));
	Разделы.Добавить(ИнициализироватьРаздел("ХранилищаНастроек",       Истина, Ложь));
	Разделы.Добавить(ИнициализироватьРаздел("ОбщиеФормы",              Истина, Ложь));
	Разделы.Добавить(ИнициализироватьРаздел("ОбщиеКоманды",            Истина, Ложь));
	Разделы.Добавить(ИнициализироватьРаздел("WebСервисы",              Истина, Ложь));
	// Частные
	Разделы.Добавить(ИнициализироватьРаздел("Константы",               Ложь, Ложь, ИСТИНА));
	Разделы.Добавить(ИнициализироватьРаздел("Справочники",             Ложь, Ложь, ИСТИНА, ИСТИНА));
	Разделы.Добавить(ИнициализироватьРаздел("Документы",               Ложь, Ложь, ИСТИНА, ИСТИНА));
	Разделы.Добавить(ИнициализироватьРаздел("Последовательности",      Ложь, Ложь));
	Разделы.Добавить(ИнициализироватьРаздел("ЖурналыДокументов",       Ложь, Ложь));
	Разделы.Добавить(ИнициализироватьРаздел("Перечисления",            Ложь, Ложь, ИСТИНА, ИСТИНА));
	Разделы.Добавить(ИнициализироватьРаздел("Отчеты",                  Ложь, Ложь));
	Разделы.Добавить(ИнициализироватьРаздел("Обработки",               Ложь, Ложь));
	Разделы.Добавить(ИнициализироватьРаздел("ПланыВидовХарактеристик", Ложь, Ложь, ИСТИНА));
	Разделы.Добавить(ИнициализироватьРаздел("ПланыСчетов",             Ложь, Ложь, ИСТИНА, ИСТИНА));
	Разделы.Добавить(ИнициализироватьРаздел("ПланыВидовРасчета",       Ложь, Ложь, ИСТИНА, ИСТИНА));
	Разделы.Добавить(ИнициализироватьРаздел("РегистрыСведений",        Ложь, Ложь, ИСТИНА));
	Разделы.Добавить(ИнициализироватьРаздел("РегистрыНакопления",      Ложь, Ложь, ИСТИНА));
	Разделы.Добавить(ИнициализироватьРаздел("РегистрыБухгалтерии",     Ложь, Ложь, ИСТИНА));
	Разделы.Добавить(ИнициализироватьРаздел("РегистрыРасчета",         Ложь, Ложь, ИСТИНА));
	Разделы.Добавить(ИнициализироватьРаздел("БизнесПроцессы",          Ложь, Ложь, ИСТИНА, ИСТИНА));
	Разделы.Добавить(ИнициализироватьРаздел("Задачи",                  Ложь, Ложь, ИСТИНА, ИСТИНА));
	Разделы.Добавить(ИнициализироватьРаздел("ВнешниеИсточникиДанных",  Ложь, Ложь));
	
	Возврат Разделы;
	
КонецФункции

Функция ЭтоПоляТаблицы(Раздел) Экспорт
	
	Возврат Раздел = "СтандартныеРеквизиты"
			ИЛИ Раздел = "Реквизиты"
			ИЛИ Раздел = "ПризнакиУчета"
			//ИЛИ Раздел = "ПризнакиУчетаСубконто"
			ИЛИ Раздел = "РеквизитыАдресации"
			ИЛИ Раздел = "Измерения"
			ИЛИ Раздел = "Ресурсы";
			
КонецФункции

Функция ЭтоТаблица(Раздел) Экспорт
	
	Возврат Раздел = "СтандартныеТабличныеЧасти"
			ИЛИ Раздел = "ТабличныеЧасти";
	
КонецФункции

Функция ЭтоТаблицаСДанными(ПолноеИмя) Экспорт
	
	Возврат
		ЭтоТаблицаСсылочныхДанных(ПолноеИмя)
	ИЛИ ЭтоТаблицаНабораДанных(ПолноеИмя)
	
КонецФункции

Функция ПолучитьПолноеИмяОбъектаМетаданных(ИмяМетаданных) Экспорт
	
	ЧастиИмениМетаданных = СтрРазделить(ИмяМетаданных, ".");
	Попытка
		ОбъектМетаданных = Метаданные;
		Для Каждого ЧастьИмени Из ЧастиИмениМетаданных Цикл
			ОбъектМетаданных = ОбъектМетаданных[ЧастьИмени];
		КонецЦикла;
		ПолноеИмяОбъектаМетаданных = ОбъектМетаданных.ПолноеИмя();
	Исключение
		ПолноеИмяОбъектаМетаданных = "";
	КонецПопытки;
	
	Возврат ПолноеИмяОбъектаМетаданных;
	
КонецФункции

Функция ПроверитьИмяПоля(ИмяПоля, ИмяТаблицы) Экспорт
	
	Если ИмяПоля = "ТипЗначения" И Лев(ИмяТаблицы, 22) = "ПланВидовХарактеристик" Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	Если (Лев(ИмяПоля, 8) = "Субконто" ИЛИ Лев(ИмяПоля, 11) = "ВидСубконто") И Лев(ИмяТаблицы, 18) = "РегистрБухгалтерии" Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	Возврат ИСТИНА;
	
КонецФункции

Функция ПолучитьМетаданныеПоРазделам() Экспорт
	
	МетаданныеПоРазделам = Новый Массив;
	
	СписокНеОбъектныхМетаданных = ПолучитьСписокНеОбъектныхМетаданных();
	
	Для Каждого ЭлементСоответствия Из СписокНеОбъектныхМетаданных Цикл
		
		Раздел = ЭлементСоответствия.Ключ;
		
		Для Каждого ЭлементМетаданных Из ЭлементСоответствия.Значение Цикл
			
			ИмяТаблицыМетаданных = ЭлементМетаданных.ПолноеИмя() + ?(Раздел = "РегистрыБухгалтерии", ".ДвиженияССубконто", "");
			
			СтруктураМетаданных = Новый Структура("Раздел, ИмяМетаданных, ИмяТаблицы");
			СтруктураМетаданных.ИмяМетаданных = ЭлементМетаданных.Имя;
			СтруктураМетаданных.ИмяТаблицы    = ИмяТаблицыМетаданных;
			СтруктураМетаданных.Раздел        = Раздел;
			
			МетаданныеПоРазделам.Добавить(СтруктураМетаданных);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат МетаданныеПоРазделам;
	
КонецФункции

Функция ПолучитьПоляМетаданныхПоРазделу(Раздел, ИмяМетаданных, ТолькоСсылочные = Ложь) Экспорт
	
	РеквизитыМетаданныеПоРазделу = Новый Массив;
	
	СписокНеОбъектныхМетаданных = ПолучитьСписокНеОбъектныхМетаданных();
	
	РазделМетаданных = СписокНеОбъектныхМетаданных.Получить(Раздел);
	ЭлементМетаданных = РазделМетаданных.Найти(ИмяМетаданных);
	
	СписокПолейТаблицы = ПолучитьСписокПолейТаблицы(Раздел, ЭлементМетаданных);
	
	Для Каждого ЭлементСоответствия Из СписокПолейТаблицы Цикл
		
		Если ТолькоСсылочные Тогда
			СодержитСсылочныйТип = СодержитСсылочныйТип(ЭлементСоответствия.Значение.Тип);
			Если НЕ СодержитСсылочныйТип Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		СтруктураРеквизита = Новый Структура;
		СтруктураРеквизита.Вставить("ПолеТаблицы");
		СтруктураРеквизита.Вставить("Тип");
		СтруктураРеквизита.Вставить("ПустойТип");
		СтруктураРеквизита.Вставить("КоличествоСсылочныхТипов");
		СтруктураРеквизита.Вставить("ГруппаМетаданных");
		
		ЗаполнитьЗначенияСвойств(СтруктураРеквизита, ЭлементСоответствия.Значение);
		СтруктураРеквизита.ПолеТаблицы = ЭлементСоответствия.Ключ;
		
		РеквизитыМетаданныеПоРазделу.Добавить(СтруктураРеквизита);
		
	КонецЦикла;
	
	Возврат РеквизитыМетаданныеПоРазделу;
	
КонецФункции

Процедура ДобавитьРесурсыКРеквизитамОборотовОстатков(РеквизитыОборотовОстатков, Реквизит, ВидДвижения) Экспорт
	
	ДобавляемыйРеквизит = Новый Структура();
	Если ВидДвижения = "Обороты" Тогда
		
		ДобавляемыйРеквизит.Вставить("Имя",       Реквизит.Имя + "Оборот");
		ДобавляемыйРеквизит.Вставить("Тип",       Реквизит.Тип);
		ДобавляемыйРеквизит.Вставить("Подраздел", Реквизит.Подраздел);
		ДобавляемыйРеквизит.Вставить("Пароль",    Ложь);
		
		РеквизитыОборотовОстатков.Добавить(ДобавляемыйРеквизит);
		
	ИначеЕсли ВидДвижения = "Итоги" Тогда
		
		ДобавляемыйРеквизит.Вставить("Имя",       Реквизит.Имя + "Остаток");
		ДобавляемыйРеквизит.Вставить("Тип",       Реквизит.Тип);
		ДобавляемыйРеквизит.Вставить("Подраздел", Реквизит.Подраздел);
		ДобавляемыйРеквизит.Вставить("Пароль",    Ложь);
		
		РеквизитыОборотовОстатков.Добавить(ДобавляемыйРеквизит);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьОписаниеОбъекта(ОбъектМетаданных, ИмяРаздела, ИнтерфейсныеОбъекты) Экспорт
	
	Если ИнтерфейсныеОбъекты = Неопределено Тогда
		ИнтерфейсныеОбъекты = ПолучитьИнтерфейсныеОбъекты();
	КонецЕсли;
	
	ОписаниеОбъекта = ИнициализироватьОписаниеОбъекта();
	ОписаниеОбъекта.ОбъектМетаданных    = ОбъектМетаданных;
	ОписаниеОбъекта.ПолноеИмя           = ОбъектМетаданных.ПолноеИмя();
	ОписаниеОбъекта.Имя                 = ОбъектМетаданных.Имя;
	ОписаниеОбъекта.Путь                = ИмяРаздела + "." + ОбъектМетаданных.Имя;
	ОписаниеОбъекта.ПутьВЗапросе        = ОписаниеОбъекта.ПолноеИмя;
	ОписаниеОбъекта.Раздел              = ИмяРаздела;
	ОписаниеОбъекта.ЭтоСсылка           = ЭтоСсылочныйОбъект(ОбъектМетаданных);
	ОписаниеОбъекта.ЭтоНаборЗаписей     = ЭтоТабличныйОбъект(ОбъектМетаданных);
	ОписаниеОбъекта.ЭтоОсновнаяТаблица  = ЭтоОсновнаяТаблица(ОписаниеОбъекта.ПолноеИмя);
//	ОписаниеОбъекта.ИдентификаторСтроки = ЭлементМетаданных.ПолучитьИдентификатор();
	
	Если ИмяРаздела = "Подсистемы" Тогда
		
		ОписаниеОбъекта.ВключенВИнтерфейс = ОбъектМетаданных.ВключатьВКомандныйИнтерфейс;
		ОписаниеОбъекта.ЭтоПодсистема     = Истина;
		
		Для Каждого ОбъектСостава Из ОбъектМетаданных.Состав Цикл
			
			ОписаниеОбъектаСостава = ИнициализироватьОписаниеОбъекта();
			ОписаниеОбъектаСостава.ОбъектМетаданных = ОбъектСостава;
			ОписаниеОбъектаСостава.ПолноеИмя        = ОбъектСостава.ПолноеИмя();
			ОписаниеОбъектаСостава.Имя              = ОбъектСостава.Имя;
			
			ОписаниеОбъекта.Объекты.Добавить(ОписаниеОбъектаСостава);
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "ФункциональныеОпции" Тогда
		
		ОписаниеОбъекта.ЭтоФункциональнаяОпция = Истина;
		
		Для Каждого ОбъектСостава Из ОбъектМетаданных.Состав Цикл
			
			ОписаниеОбъектаСостава = ИнициализироватьОписаниеОбъекта();
			ОписаниеОбъектаСостава.ОбъектМетаданных = ОбъектСостава.Объект;
			ОписаниеОбъектаСостава.ПолноеИмя        = ОбъектСостава.Объект.ПолноеИмя();
			ОписаниеОбъектаСостава.Имя              = ОбъектСостава.Объект.Имя;
			
			ОписаниеОбъекта.Объекты.Добавить(ОписаниеОбъектаСостава);
			
		КонецЦикла;
		
	Иначе
		
		ОписаниеОбъекта.ВключенВИнтерфейс = Не ИнтерфейсныеОбъекты.Получить(ОписаниеОбъекта.ПолноеИмя) = Неопределено;
		
		ПодчиненныеМетаданныеРаздела = ПодчиненныеМетаданныеРаздела(ИмяРаздела, Истина);
		
		Для Каждого ИмяПодраздела Из ПодчиненныеМетаданныеРаздела Цикл
			
			Для Каждого ПодчиненныеМетаданныеОбъекта Из ОбъектМетаданных[ИмяПодраздела] Цикл
				
				ОписаниеПодчиненногоОбъекта = ИнициализироватьОписаниеОбъекта();
				ОписаниеПодчиненногоОбъекта.Имя    = ПодчиненныеМетаданныеОбъекта.Имя;
				ОписаниеПодчиненногоОбъекта.Раздел = ИмяПодраздела;
				ОписаниеПодчиненногоОбъекта.Путь   =
					ИмяРаздела
					+ "." + ОписаниеОбъекта.Имя
					+ "." + ИмяПодраздела
					+ "." + ПодчиненныеМетаданныеОбъекта.Имя;
				ОписаниеПодчиненногоОбъекта.ВключенВИнтерфейс = ОписаниеОбъекта.ВключенВИнтерфейс;
				ОписаниеПодчиненногоОбъекта.ЭтоНаборЗаписей = (ИмяПодраздела = "ТабличныеЧасти");
				Если ИмяПодраздела = "ТабличныеЧасти" Тогда
					ОписаниеПодчиненногоОбъекта.ПутьВЗапросе = ОписаниеОбъекта.ПолноеИмя + "." + ОписаниеПодчиненногоОбъекта.Имя;
				Иначе
					ОписаниеПодчиненногоОбъекта.ПутьВЗапросе = ОписаниеПодчиненногоОбъекта.Имя;
				КонецЕсли;
				
				Если Лев(ИмяПодраздела, 11) = "Стандартные" Тогда
					ОписаниеПодчиненногоОбъекта.ПутьКСтандартномуРеквизиту = ПодчиненныеМетаданныеОбъекта.Имя;
					ОписаниеПодчиненногоОбъекта.ПолноеИмя                  = ОписаниеОбъекта.ПолноеИмя + "." + ОписаниеПодчиненногоОбъекта.ПутьКСтандартномуРеквизиту;
				Иначе
					ОписаниеПодчиненногоОбъекта.ПутьКСтандартномуРеквизиту = Неопределено;
					ОписаниеПодчиненногоОбъекта.ПолноеИмя                  = ПодчиненныеМетаданныеОбъекта.ПолноеИмя();
				КонецЕсли;
				ОписаниеПодчиненногоОбъекта.ОбъектМетаданных         = ПодчиненныеМетаданныеОбъекта;
				ОписаниеПодчиненногоОбъекта.ОбъектМетаданныхРодитель = ОбъектМетаданных;
				
				Если ОписаниеОбъекта.ЭтоОсновнаяТаблица
					 И Не ИмяПодраздела = "Команды"
					 И Не ИмяПодраздела = "СтандартныеТабличныеЧасти"
					 И Не ИмяПодраздела = "ТабличныеЧасти" Тогда
					ОписаниеПодчиненногоОбъекта.ЭтоСсылка = СодержитСсылочныйТип(ПодчиненныеМетаданныеОбъекта.Тип);
				КонецЕсли;
				
				ОписаниеОбъекта.Объекты.Добавить(ОписаниеПодчиненногоОбъекта);
				
				ПодчиненныеМетаданныеТабличныхЧастей = ПодчиненныеМетаданныеРаздела(ИмяПодраздела, Истина);
				
				Для Каждого ПодчиненныеМетаданныеТабличнойЧасти Из ПодчиненныеМетаданныеТабличныхЧастей Цикл
					
					Для Каждого РеквизитТабличнойЧасти Из ПодчиненныеМетаданныеОбъекта[ПодчиненныеМетаданныеТабличнойЧасти] Цикл
						
						ОписаниеПодчиненногоОбъектаТЧ = ИнициализироватьОписаниеОбъекта();
						ОписаниеПодчиненногоОбъектаТЧ.Имя    = РеквизитТабличнойЧасти.Имя;
						ОписаниеПодчиненногоОбъектаТЧ.Раздел = ПодчиненныеМетаданныеТабличнойЧасти;
						ОписаниеПодчиненногоОбъектаТЧ.Путь   =
							ИмяРаздела
							+ "." + ОписаниеОбъекта.Имя
							+ "." + ИмяПодраздела
							+ "." + ПодчиненныеМетаданныеОбъекта.Имя
							+ "." + ПодчиненныеМетаданныеТабличнойЧасти
							+ "." + РеквизитТабличнойЧасти.Имя;
						ОписаниеПодчиненногоОбъектаТЧ.ПутьВЗапросе      = ОписаниеПодчиненногоОбъектаТЧ.Имя;
						ОписаниеПодчиненногоОбъектаТЧ.ВключенВИнтерфейс = ОписаниеОбъекта.ВключенВИнтерфейс;
						
						Если Лев(ПодчиненныеМетаданныеТабличнойЧасти, 11) = "Стандартные" Тогда
							Если Лев(ИмяПодраздела, 11) = "Стандартные" Тогда
								ОписаниеПодчиненногоОбъектаТЧ.ПутьКСтандартномуРеквизиту = ПодчиненныеМетаданныеОбъекта.Имя + "." + РеквизитТабличнойЧасти.Имя;
								ОписаниеПодчиненногоОбъектаТЧ.ПолноеИмя                  = ОписаниеОбъекта.ПолноеИмя + "." + ОписаниеПодчиненногоОбъектаТЧ.ПутьКСтандартномуРеквизиту;
								ОписаниеПодчиненногоОбъектаТЧ.ОбъектМетаданныхРодитель   = ОбъектМетаданных;
							Иначе
								ОписаниеПодчиненногоОбъектаТЧ.ПутьКСтандартномуРеквизиту = РеквизитТабличнойЧасти.Имя;
								ОписаниеПодчиненногоОбъектаТЧ.ПолноеИмя                  = ПодчиненныеМетаданныеОбъекта.ПолноеИмя() + "." + ОписаниеПодчиненногоОбъектаТЧ.ПутьКСтандартномуРеквизиту;
								ОписаниеПодчиненногоОбъектаТЧ.ОбъектМетаданныхРодитель   = ПодчиненныеМетаданныеОбъекта;
							КонецЕсли;
						Иначе
							ОписаниеПодчиненногоОбъектаТЧ.ПутьКСтандартномуРеквизиту = Неопределено;
							ОписаниеПодчиненногоОбъектаТЧ.ПолноеИмя                  = РеквизитТабличнойЧасти.ПолноеИмя();
							ОписаниеПодчиненногоОбъектаТЧ.ОбъектМетаданныхРодитель   = ПодчиненныеМетаданныеОбъекта;
						КонецЕсли;
						
						Если Не ИмяПодраздела = "Команды" Тогда
							ОписаниеПодчиненногоОбъектаТЧ.ЭтоСсылка = СодержитСсылочныйТип(РеквизитТабличнойЧасти.Тип);
						КонецЕсли;
						
						ОписаниеПодчиненногоОбъектаТЧ.ОбъектМетаданных = РеквизитТабличнойЧасти;
						
						ОписаниеПодчиненногоОбъекта.Объекты.Добавить(ОписаниеПодчиненногоОбъектаТЧ);
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ОписаниеОбъекта;
	
КонецФункции

Функция ПолучитьСписокСвойствХарактеристик() Экспорт
	
	СписокСвойствХарактеристик = Новый Массив();
	
	СписокСвойствХарактеристик.Добавить("ВидыХарактеристик");
	СписокСвойствХарактеристик.Добавить("ПолеКлюча");
	СписокСвойствХарактеристик.Добавить("ПолеОтбораВидов");
	СписокСвойствХарактеристик.Добавить("ЗначениеОтбораВидов");
	СписокСвойствХарактеристик.Добавить("ЗначенияХарактеристик");
	СписокСвойствХарактеристик.Добавить("ПолеОбъекта");
	СписокСвойствХарактеристик.Добавить("ПолеВида");
	СписокСвойствХарактеристик.Добавить("ПолеЗначения");
	
	Возврат СписокСвойствХарактеристик;
	
КонецФункции

Функция ЭтоСсылка(Тип, ПолучитьУИД = Ложь) Экспорт
	
	Возврат Не ЭтоПростойТип(Тип)
		И (Справочники.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ Документы.ТипВсеСсылки().СодержитТип(Тип)
		Или Не ПолучитьУИД И Перечисления.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыОбмена.ТипВсеСсылки().СодержитТип(Тип))
		ИЛИ БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ Не ПолучитьУИД И БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().СодержитТип(Тип)
		ИЛИ Задачи.ТипВсеСсылки().СодержитТип(Тип);
	
КонецФункции

#КонецОбласти

#Область РаботаСПравамиДоступа

Процедура ПроверитьПраваДоступа(ОбъектМетаданных, ПутьКОбъектуМетаданных, ПутьКСтандартномуРеквизиту, РольПользователь, ПраваРаздела, ПраваОбъектаМетаданных) Экспорт
	
	Для каждого Право Из ПраваРаздела Цикл
		
		Строка                  = ПраваОбъектаМетаданных.Добавить();
		Строка.Реквизит         = ПутьКОбъектуМетаданных;
		Строка.РольПользователь = РольПользователь.Имя;
		Строка.Право            = Право;
		Строка.Использование    = ПравоДоступа(Право, ОбъектМетаданных, РольПользователь, ПутьКСтандартномуРеквизиту);
		
		Если ПутьКСтандартномуРеквизиту <> Неопределено Тогда
			Строка.Объект = ПутьКСтандартномуРеквизиту;
		Иначе
			Строка.Объект = ОбъектМетаданных.Имя;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСтрокуПравРеквизитовОбъектовМетаданных(ТаблицаПрав, ОбъектыМетаданныхРолей, ОбъектыМетаданныхПользователей, РежимРаботы, АнализироватьТолькоИнтерфейсныеОбъекты = Ложь) Экспорт
	
	Для Каждого Строка Из ТаблицаПрав Цикл
		
		Если АнализироватьТолькоИнтерфейсныеОбъекты И
			НЕ Строка.ВключенВИнтерфейс Тогда
			Продолжить;
		КонецЕсли;
			
		Если РежимРаботы = "Роли" Тогда
			НоваяСтрока = ОбъектыМетаданныхРолей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.АнализироватьТолькоИнтерфейсныеОбъекты = АнализироватьТолькоИнтерфейсныеОбъекты;
		Иначе
			НоваяСтрока =  ОбъектыМетаданныхПользователей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЕсли;
		
	КонецЦикла
	
КонецПроцедуры

Процедура ПроверитьПраваДоступаПоРолямПользователям(РольПользователь, ПраваРаздела, ОписаниеОбъекта, ПраваОбъектовМетаданных, РежимРаботы) Экспорт
	
	Если Не ЗначениеЗаполнено(ОписаниеОбъекта.ПутьКСтандартномуРеквизиту) Тогда
		СтандартныйРеквизит = Неопределено;
		ОбъектМетаданных    = ОписаниеОбъекта.ОбъектМетаданных;
	Иначе
		СтандартныйРеквизит = ОписаниеОбъекта.ПутьКСтандартномуРеквизиту;
		ОбъектМетаданных    = ОписаниеОбъекта.ОбъектМетаданныхРодитель;
	КонецЕсли;
	
	Для Каждого Право Из ПраваРаздела Цикл
		
		Строка = ПраваОбъектовМетаданных.Добавить();
		Строка.ИмяОбъекта        = ОписаниеОбъекта.Путь;
		Строка.Право             = Право;
		Строка.Использование     = ПравоДоступа(Право, ОбъектМетаданных, РольПользователь, СтандартныйРеквизит);
		Строка.ВключенВИнтерфейс = ОписаниеОбъекта.ВключенВИнтерфейс;
		
		Если РежимРаботы = "Роли" Тогда
			Строка.Роль         = РольПользователь.Имя;
		ИначеЕсли РежимРаботы = "Пользователи" Тогда
			Строка.Пользователь = РольПользователь.Имя;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СравнитьПраваДоступа(ПраваОбъектовМетаданных, ПраваРеквизитовОбъектовМетаданных) Экспорт
	
	Для Каждого ПраваРеквизитаОбъектаМетаданных Из ПраваРеквизитовОбъектовМетаданных Цикл
		Если ПраваОбъектовМетаданных.НайтиСтроки(Новый Структура("Право, Использование", ПраваРеквизитаОбъектаМетаданных.Право, ПраваРеквизитаОбъектаМетаданных.Использование)).Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ПраваРаздела(Раздел) Экспорт
	
	СписокПравРаздела = Новый Массив;
	
	Если Раздел = "Подсистемы" Тогда
		СписокПравРаздела.Добавить("Просмотр");
	ИначеЕсли Раздел = "ПараметрыСеанса" Тогда
		СписокПравРаздела.Добавить("Получение");
		СписокПравРаздела.Добавить("Установка");
	ИначеЕсли Раздел = "ОбщиеРеквизиты" Тогда
		СписокПравРаздела.Добавить("Просмотр");
		СписокПравРаздела.Добавить("Редактирование");
	ИначеЕсли Раздел = "ПланыОбмена" Тогда
		ПраваСправочника(СписокПравРаздела);
	ИначеЕсли Раздел = "КритерииОтбора" Тогда
		СписокПравРаздела.Добавить("Просмотр");
	ИначеЕсли Раздел = "ОбщиеФормы" Тогда
		СписокПравРаздела.Добавить("Просмотр");
	ИначеЕсли Раздел = "ОбщиеКоманды" Тогда
		СписокПравРаздела.Добавить("Просмотр");
	ИначеЕсли Раздел = "Интерфейсы" Тогда
		СписокПравРаздела.Добавить("Использование");
	ИначеЕсли Раздел = "WebСервисы" Тогда
		СписокПравРаздела.Добавить("Использование");
	ИначеЕсли Раздел = "Константы" Тогда
		ПраваРегистра(СписокПравРаздела);
	ИначеЕсли Раздел = "Справочники" Тогда
		ПраваСправочника(СписокПравРаздела);
	ИначеЕсли Раздел = "Документы" Тогда
		ПраваСправочника(СписокПравРаздела);
		ПраваДокумента(СписокПравРаздела);
	ИначеЕсли Раздел = "Последовательности" Тогда
		СписокПравРаздела.Добавить("Чтение");
		СписокПравРаздела.Добавить("Изменение");
	ИначеЕсли Раздел = "ЖурналыДокументов" Тогда
		СписокПравРаздела.Добавить("Чтение");
		СписокПравРаздела.Добавить("Просмотр");
	ИначеЕсли Раздел = "Отчеты" Тогда
		СписокПравРаздела.Добавить("Использование");
		СписокПравРаздела.Добавить("Просмотр");
	ИначеЕсли Раздел = "Обработки" Тогда
		СписокПравРаздела.Добавить("Использование");
		СписокПравРаздела.Добавить("Просмотр");
	ИначеЕсли Раздел = "ПланыВидовХарактеристик" Тогда
		ПраваСправочника(СписокПравРаздела);
	ИначеЕсли Раздел = "ПланыСчетов" Тогда
		ПраваСправочника(СписокПравРаздела);
	ИначеЕсли Раздел = "ПланыВидовРасчета" Тогда
		ПраваСправочника(СписокПравРаздела);
	ИначеЕсли Раздел = "РегистрыСведений" Тогда
		ПраваРегистра(СписокПравРаздела);
	ИначеЕсли Раздел = "РегистрыНакопления" Тогда
		ПраваРегистра(СписокПравРаздела);
		СписокПравРаздела.Добавить("УправлениеИтогами");
	ИначеЕсли Раздел = "РегистрыБухгалтерии" Тогда
		ПраваРегистра(СписокПравРаздела);
		СписокПравРаздела.Добавить("УправлениеИтогами");
	ИначеЕсли Раздел = "РегистрыРасчета" Тогда
		ПраваРегистра(СписокПравРаздела);
	ИначеЕсли Раздел = "БизнесПроцессы" Тогда
		ПраваСправочника(СписокПравРаздела);
		СписокПравРаздела.Добавить("ИнтерактивнаяАктивация");
		СписокПравРаздела.Добавить("Старт");
		СписокПравРаздела.Добавить("ИнтерактивныйСтарт");
	ИначеЕсли Раздел = "Задачи" Тогда
		ПраваСправочника(СписокПравРаздела);
		СписокПравРаздела.Добавить("ИнтерактивнаяАктивация");
		СписокПравРаздела.Добавить("Выполнение");
		СписокПравРаздела.Добавить("ИнтерактивноеВыполнение");
	ИначеЕсли Раздел = "ВнешниеИсточникиДанных" Тогда
		СписокПравРаздела.Добавить("Использование");
		СписокПравРаздела.Добавить("Администрирование");
		СписокПравРаздела.Добавить("ИзменениеСтандартнойАутентификации");
		СписокПравРаздела.Добавить("ИзменениеСтандартнойАутентификацииСеанса");
		СписокПравРаздела.Добавить("ИзменениеАутентификацииОССеанса");
	ИначеЕсли Раздел = "СтандартныеРеквизиты" Тогда
		СписокПравРаздела.Добавить("Просмотр");
		СписокПравРаздела.Добавить("Редактирование");
	ИначеЕсли Раздел = "СтандартныеТабличныеЧасти" Тогда
		СписокПравРаздела.Добавить("Просмотр");
		СписокПравРаздела.Добавить("Редактирование");
	ИначеЕсли Раздел = "Реквизиты" Тогда
		СписокПравРаздела.Добавить("Просмотр");
		СписокПравРаздела.Добавить("Редактирование");
	ИначеЕсли Раздел = "РеквизитыНаПросмотр" Тогда
		СписокПравРаздела.Добавить("Просмотр");
	ИначеЕсли Раздел = "ТабличныеЧасти" Тогда
		СписокПравРаздела.Добавить("Просмотр");
		СписокПравРаздела.Добавить("Редактирование");
	ИначеЕсли Раздел = "РеквизитыАдресации" Тогда
		СписокПравРаздела.Добавить("Просмотр");
		СписокПравРаздела.Добавить("Редактирование");
	ИначеЕсли Раздел = "ПризнакиУчета" Тогда
		СписокПравРаздела.Добавить("Просмотр");
		СписокПравРаздела.Добавить("Редактирование");
	ИначеЕсли Раздел = "ПризнакиУчетаСубконто" Тогда
		СписокПравРаздела.Добавить("Просмотр");
		СписокПравРаздела.Добавить("Редактирование");
	ИначеЕсли Раздел = "Измерения" Тогда
		СписокПравРаздела.Добавить("Просмотр");
		СписокПравРаздела.Добавить("Редактирование");
	ИначеЕсли Раздел = "Ресурсы" Тогда
		СписокПравРаздела.Добавить("Просмотр");
		СписокПравРаздела.Добавить("Редактирование");
	ИначеЕсли Раздел = "Перерасчеты" Тогда
		СписокПравРаздела.Добавить("Чтение");
		СписокПравРаздела.Добавить("Изменение");
	ИначеЕсли Раздел = "Операции" Тогда
		СписокПравРаздела.Добавить("Использование");
	ИначеЕсли Раздел = "Команды" Тогда
		СписокПравРаздела.Добавить("Просмотр");
	КонецЕсли;
	
	Возврат СписокПравРаздела;

КонецФункции

#КонецОбласти

#Область РаботаСоСтатистикойДанных

Функция ПолучитьСтатистикуТаблицы(ИмяТаблицы) Экспорт
	
	Результат = Новый Структура("КоличествоЭлементов, КоличествоПредопределенных, Выключен", 0, 0, Ложь);
	
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ИмеютсяПредопределенные = ЭтоТаблицаПредопределенныхДанных(ИмяТаблицы);
	ЭтоКонстанта            = ЭтоКонстанта(ИмяТаблицы);
	ЭтоТаблицаСДанными      = ЭтоТаблицаСДанными(ИмяТаблицы);
	
	Если НЕ ЭтоТаблицаСДанными И НЕ ЭтоКонстанта Тогда
		Возврат Результат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(ИСТИНА);
	
	Если ЭтоКонстанта Тогда
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаДанных.Значение КАК Значение,
		|	0 КАК КоличествоПредопределенных
		|ИЗ
		|	&ИмяТаблицы КАК ТаблицаДанных";
	Иначе
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК КоличествоЭлементов,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|		КОГДА &Предопределенный
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ), 0) КАК КоличествоПредопределенных
		|ИЗ
		|	&ИмяТаблицы КАК ТаблицаДанных";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "&ИмяТаблицы", ИмяТаблицы);
	Если ИмеютсяПредопределенные Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Предопределенный", "ТаблицаДанных.Предопределенный");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Предопределенный", "ЛОЖЬ");
	КонецЕсли;
	
	Запрос  = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если ЭтоКонстанта Тогда
			Если ТипЗнч(Выборка.Значение) = Тип("Булево") Тогда
				Результат.КоличествоЭлементов = 1;
			ИначеЕсли ТипЗнч(Выборка.Значение) = Тип("ХранилищеЗначения") Тогда
				Результат.КоличествоЭлементов = ЗначениеЗаполнено(Выборка.Значение.Получить());
			Иначе
				Результат.КоличествоЭлементов = ЗначениеЗаполнено(Выборка.Значение);
			КонецЕсли;
		Иначе
			ЗаполнитьЗначенияСвойств(Результат, Выборка);
		КонецЕсли;
	КонецЕсли;
	
	ЭлементОбъектовМетаданных = Новый Структура("ПолноеИмя, Раздел", ИмяТаблицы, "");
	СхемаКомпоновкиДанных = ПодготовитьСхемуКомпоновкиДанных(ЭлементОбъектовМетаданных, "ПЕРВЫЕ 1 *");
	НастройкиКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
	ЗагрузитьНастройкиКомпоновкиДанных(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, Неопределено, Новый УникальныйИдентификатор);
	Результат.Выключен = Результат.КоличествоЭлементов > 0 И Не ПроверитьДоступностьДанныхВТаблице(ИмяТаблицы);
	
	Возврат Результат;
	
КонецФункции

Функция ПроверитьДоступностьДанныхВТаблице(ИмяТаблицы) Экспорт
	
	ЭлементОбъектовМетаданных = Новый Структура("ПолноеИмя, Раздел", ИмяТаблицы, "");
	СхемаКомпоновкиДанных = ПодготовитьСхемуКомпоновкиДанных(ЭлементОбъектовМетаданных, "ПЕРВЫЕ 1 *");
	НастройкиКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
	ЗагрузитьНастройкиКомпоновкиДанных(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, Неопределено, Новый УникальныйИдентификатор);
	Данные = ВывестиСхемуКомпоновкиДанных(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, Истина);
	
	Возврат ЗначениеЗаполнено(Данные);
	
КонецФункции

Функция ПолучитьСтатистикуЗаполненностиПолейВВТаблице(Знач ИмяТаблицы, РеквизитыОбъекта) Экспорт
	
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ЭтоТаблицаСДанными(ИмяТаблицы) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если РеквизитыОбъекта.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(ИСТИНА);
	
	ИмяТаблицы = СтрЗаменить(ИмяТаблицы, ".ТабличнаяЧасть.", ".");
	
	//@skip-check bsl-ql-hub
	ТекстЗапроса = "ВЫБРАТЬ";
	
	Для Каждого Реквизит Из РеквизитыОбъекта Цикл
		
		Если НЕ ПроверитьИмяПоля(Реквизит.Имя, ИмяТаблицы) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Реквизит.Тип.СодержитТип(Тип("ХранилищеЗначения"))
			ИЛИ Реквизит.Пароль
			ИЛИ Реквизит.Тип.СодержитТип(Тип("Строка")) И Реквизит.Тип.КвалификаторыСтроки.Длина = 0 Тогда
			
			ШаблоНСтрокиЗапроса = "	0 КАК %ИмяПоля%";
			
		Иначе
			
			ШаблоНСтрокиЗапроса = "	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаДанных.%ИмяПоля%) -
			|	МАКСИМУМ(%ШаблонПроверкиНаПустоеЗначение%) КАК %ИмяПоля%";
			
		КонецЕсли;
		
		ШаблонПроверкиНаПустоеЗначение = ШаблонПроверкиНаПустоеЗначение(Реквизит.Тип, ИмяТаблицы);
		ШаблоНСтрокиЗапроса = СтрЗаменить(ШаблоНСтрокиЗапроса, "%ШаблонПроверкиНаПустоеЗначение%", ШаблонПроверкиНаПустоеЗначение);
		
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + СтрЗаменить(ШаблоНСтрокиЗапроса, "%ИмяПоля%", Реквизит.Имя) + ",";
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + "	КОЛИЧЕСТВО(*) КАК КоличествоСтрокПоТаблице";
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + "ИЗ" + Символы.ПС + ИмяТаблицы + " КАК ТаблицаДанных";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПустойУникальныйИдентификатор", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	Запрос.УстановитьПараметр("ТипУникальногоИдентификатора",  Тип("УникальныйИдентификатор"));
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСтатистикуЗаполненностиПолейВВСистемнойТаблице(Знач ИмяТаблицы, СистемнаяТаблица) Экспорт
	
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ЭтоТаблицаСДанными(ИмяТаблицы) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(ИСТИНА);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК КоличествоСтрокПоТаблице";
	
	Если СистемнаяТаблица = "ПредопределенныеДанные" Тогда
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + "ИЗ" + Символы.ПС + "	" + ИмяТаблицы + " КАК ТаблицаДанных";
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + "ГДЕ" + Символы.ПС + "	ТаблицаДанных.Предопределенный = Истина";
	Иначе
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + "ИЗ" + Символы.ПС + "	" + ИмяТаблицы + " КАК ТаблицаДанных";
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЗапросПоПолямОбъекта(ИмяТаблицы, РеквизитыТаблицы, Сгруппировать = Истина, ЗначенияОтбора = Неопределено) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&СписокПолейЗапроса
	|ИЗ
	|	&ИмяТаблицы КАК ДанныеТаблицы";
	
	СписокПолейОтбора  = "";
	СписокПолейЗапроса = "";
	
	Для Каждого Реквизит Из РеквизитыТаблицы Цикл
		СписокПолейЗапроса = СписокПолейЗапроса + ?(ПустаяСтрока(СписокПолейЗапроса), "", ",") + "ДанныеТаблицы."
			+ Реквизит;
	КонецЦикла;
	
	СписокПолейГруппировки = СписокПолейЗапроса;
	Если РеквизитыТаблицы.Количество() = 1 Тогда
		СписокПолейЗапроса = СписокПолейЗапроса + ",КОЛИЧЕСТВО(" + "ДанныеТаблицы." + Реквизит + ") КАК "
			+ Реквизит + "_Количество";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначенияОтбора) И ТипЗнч(ЗначенияОтбора) = Тип("Массив") Тогда
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + "ГДЕ" + Символы.ПС + "	"
			+ "ДанныеТаблицы.Ссылка В (&ЗначенияОтбора)";
	ИначеЕсли ЗначениеЗаполнено(ЗначенияОтбора) И ТипЗнч(ЗначенияОтбора) = Тип("ТаблицаЗначений") Тогда
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	&СписокПолейОтбора
			|ПОМЕСТИТЬ ВТ_ЗначенияОтбора
			|ИЗ
			|	&ЗначенияОтбора КАК ЗначенияОтбора
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	&СписокПолейОтбора
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|"
			+ ТекстЗапроса + Символы.ПС
			+ "	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЗначенияОтбора КАК ЗначенияОтбора";
		ПоляОтбора = Новый Массив;
		Для Каждого Колонка Из ЗначенияОтбора.Колонки Цикл
			ТекстЗапроса = ТекстЗапроса + Символы.ПС +
				?(ПоляОтбора.Количество() = 0, "	ПО", "		И") + " ДанныеТаблицы." + Колонка.Имя + " = ЗначенияОтбора." + Колонка.Имя;
				ПоляОтбора.Добавить("ЗначенияОтбора." + Колонка.Имя);
		КонецЦикла;
		СписокПолейОтбора = СтрСоединить(ПоляОтбора, ",");
	КонецЕсли;
	
	Если Сгруппировать Тогда
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + "СГРУППИРОВАТЬ ПО" + Символы.ПС + "	"
			+ "&СписокПолейГруппировки";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СписокПолейОтбора",      СписокПолейОтбора);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СписокПолейЗапроса",     СписокПолейЗапроса);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СписокПолейГруппировки", СписокПолейГруппировки);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицы",             ИмяТаблицы);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ЗначенияОтбора", ЗначенияОтбора);
	
	Возврат Запрос;
	
КонецФункции

Функция НайтиСсылкиПоЗначениюРеквизита(ЗначениеРеквизита, ИмяТаблицы, ИмяРеквизита) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеТаблицы.Ссылка
	|ИЗ
	|	&ИмяТаблицы КАК ДанныеТаблицы
	|ГДЕ
	|	ДанныеТаблицы.ИмяРеквизита = &Значение";
	
	Если ТипЗнч(ЗначениеРеквизита) = Тип("Строка") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДанныеТаблицы.ИмяРеквизита = &Значение",
			"ВЫРАЗИТЬ(ДанныеТаблицы.ИмяРеквизита КАК Строка(500)) = &Значение");
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяТаблицы",  ИмяТаблицы);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяРеквизита", ИмяРеквизита);
	
	Запрос.УстановитьПараметр("Значение", ЗначениеРеквизита);
	
	СсылкиТекущейТаблицы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"); 
	СсылкиДругихТаблиц   = Новый Массив;
	
	Если ЭтоСсылка(ТипЗнч(ЗначениеРеквизита), Истина) Тогда
		
		СписокСсылок = Новый Массив;
		СписокСсылок.Добавить(ЗначениеРеквизита);
		
		ИсключаемыеОбъекты = Новый Массив;
		Если СсылкиТекущейТаблицы.Количество() > 0 Тогда
			ИсключаемыеОбъекты.Добавить(СсылкиТекущейТаблицы[0].Метаданные());
		КонецЕсли;
		
		СсылкиДругихТаблиц = НайтиПоСсылкам(СписокСсылок,,, ИсключаемыеОбъекты).ВыгрузитьКолонку(1);
		
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("СсылкиТекущейТаблицы", СсылкиТекущейТаблицы);
	Результат.Вставить("СсылкиДругихТаблиц",   СсылкиДругихТаблиц);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСтатистикуПоСсылающимсяТипам(ЭлементОбъектовМетаданных, ТипПоиска) Экспорт
	
	СтатистикаПоСсылающимсяТипам = Новый Соответствие;
	
	Если Не ЭтоТаблицаСсылочныхДанных(ЭлементОбъектовМетаданных.ПолноеИмя) Тогда
		Возврат СтатистикаПоСсылающимсяТипам;
	КонецЕсли;
	
	СхемаКомпоновкиДанных = ПодготовитьСхемуКомпоновкиДанных(ЭлементОбъектовМетаданных);
	НастройкиКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
	ЗагрузитьНастройкиКомпоновкиДанных(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, Неопределено, Новый УникальныйИдентификатор);
	Данные = ВывестиСхемуКомпоновкиДанных(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных);
	
	Если Не ЗначениеЗаполнено(Данные) Тогда
		Возврат СтатистикаПоСсылающимсяТипам;
	КонецЕсли;
	Ссылки = Данные.ВыгрузитьКолонку("Ссылка");
	
	ТипыНайденныхСсылок = Новый Соответствие;
	
	Если ТипПоиска = 1 Тогда
		
		ДанныеПоиска = НайтиПоСсылкам(Ссылки);
		
		Для Каждого Строка Из ДанныеПоиска Цикл
			Если Не ЗначениеЗаполнено(Строка.Данные) Тогда
				Продолжить;
			КонецЕсли;
			ТипЗначения = ТипЗнч(Строка.Данные);
			ТипСтрокой = ТипыНайденныхСсылок.Получить(ТипЗначения);
			Если ТипСтрокой = Неопределено Тогда
				ТипСтрокой = ПолучитьТипСтрокой(ТипЗначения);
				ТипыНайденныхСсылок.Вставить(ТипЗначения, ТипСтрокой);
			КонецЕсли;
			Количество = СтатистикаПоСсылающимсяТипам.Получить(ТипСтрокой);
			Если Количество = Неопределено Тогда
				Количество = 0;
			КонецЕсли;
			Количество = Количество + 1;
			СтатистикаПоСсылающимсяТипам.Вставить(ТипСтрокой, Количество);
		КонецЦикла;
		
	ИначеЕсли ТипПоиска = 2 Тогда
		
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ЭлементОбъектовМетаданных.ПолноеИмя);
		ОписаниеОбъекта  = ПолучитьОписаниеОбъекта(ОбъектМетаданных, ЭлементОбъектовМетаданных.Раздел, Новый Соответствие);
		КлючиЗаписей     = ИнициализироватьКлючиЗаписей();
		НайтиСсылкиПоОбъектуМетаданных(ОписаниеОбъекта, Ссылки, КлючиЗаписей, Новый Соответствие);
		
		Для Каждого КлючЗаписи Из КлючиЗаписей Цикл
			Если Не ЗначениеЗаполнено(КлючЗаписи.Значение) Тогда
				Продолжить;
			КонецЕсли;
			СтатистикаПоСсылающимсяТипам.Вставить(КлючЗаписи.Ключ, КлючЗаписи.Значение.Количество());
		КонецЦикла;
		
	Иначе
		ДанныеПоиска = Новый Массив;
	КонецЕсли;
	
	Возврат СтатистикаПоСсылающимсяТипам;
	
КонецФункции

Функция ПолучитьСтатистикуРеквизитаПоТипам(ИмяПоля, ИмяТаблицы) Экспорт
	
	СтатистикаРеквизитаПоТипам = Новый Соответствие;
	
	Если Не ЗначениеЗаполнено(ИмяПоля)
		Или Не ЗначениеЗаполнено(ИмяТаблицы) Тогда
		Возврат СтатистикаРеквизитаПоТипам;
	КонецЕсли;
	
	//@skip-check bsl-ql-hub
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТИПЗНАЧЕНИЯ(ВложенныйЗапрос.Значение) КАК ТипЗначения,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.Значение) КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаДанных." + ИмяПоля + " КАК Значение
	|	ИЗ
	|		" + ИмяТаблицы + " КАК ТаблицаДанных
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаДанных." + ИмяПоля + ") КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ТИПЗНАЧЕНИЯ(ВложенныйЗапрос.Значение)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТипСтрокой = ПолучитьТипСтрокой(Выборка.ТипЗначения);
		СтатистикаРеквизитаПоТипам.Вставить(ТипСтрокой, Выборка.Количество);
	КонецЦикла;
	
	Возврат СтатистикаРеквизитаПоТипам;
	
КонецФункции

#КонецОбласти

#Область РаботаСТипами

Функция ОпределитьТип(ОписаниеТипа, МетаданныеОбъект) Экспорт
	
	Типы            = ОписаниеТипа.Типы();
	КоличествоТипов = Типы.Количество();
	ТипСтрокой      = "Неопределено";
	
	Для Каждого Тип Из Типы Цикл
		ТипСтрокой = ПолучитьТипСтрокой(Тип);
		Если ТипСтрокой = "Строка"
			ИЛИ ТипСтрокой = "Число"
			ИЛИ ТипСтрокой = "Дата" Тогда
			ТипСтрокой = ПолучитьТипСКвалификаторами(ОписаниеТипа, ТипСтрокой);
		КонецЕсли;
		МетаданныеОбъект.ЗначениеТипа = МетаданныеОбъект.ЗначениеТипа + ТипСтрокой + Символы.ПС;
	КонецЦикла;
	
	Если КоличествоТипов > 1 Тогда
		МетаданныеОбъект.ЗначениеТипа = МетаданныеОбъект.ЗначениеТипа + "Неопределено";
		ТипСтрокой      = НСтр("ru = '<Несколько типов>'");
	КонецЕсли;
	
	Возврат ТипСтрокой;
	
КонецФункции

#КонецОбласти

#Область РаботаСБД

Процедура ИнициализироватьСтруктуруХранения(СтруктураХранения, АдресСтруктурыХранения, УникальныйИдентификатор, ЗаполнитьСтруктуруХранения = Истина) Экспорт
	
	СтруктураХраненияСистемныхТаблиц      = Новый ТаблицаЗначений;
	СтруктураХраненияСистемныхТаблиц.Колонки.Добавить("Назначение");
	СтруктураХраненияСистемныхТаблиц.Колонки.Добавить("Метаданные");
	СтруктураХраненияСистемныхТаблиц.Колонки.Добавить("ИмяТаблицы");
	СтруктураХраненияСистемныхТаблиц.Колонки.Добавить("ИмяТаблицыХранения");
	СтруктураХраненияСистемныхТаблиц.Колонки.Добавить("Прочие");
	
	СтруктураХранения = Новый Структура;
	СтруктураХранения.Вставить("СтруктураХраненияТаблиц",                Новый Соответствие);
	СтруктураХранения.Вставить("СтруктураХраненияИндексов",              Новый Соответствие);
	СтруктураХранения.Вставить("СтруктураХраненияОбщихСистемныхТаблиц",  Новый Соответствие);
	СтруктураХранения.Вставить("СтруктураХраненияСистемныхТаблиц",       СтруктураХраненияСистемныхТаблиц);
	
	Если Не ЗаполнитьСтруктуруХранения Тогда
		АдресСтруктурыХранения = ПоместитьВоВременноеХранилище(СтруктураХранения, УникальныйИдентификатор);
		Возврат;
	КонецЕсли;
	
	ОбщаяСтруктураХранения = ПолучитьСтруктуруХраненияБазыДанных();
	
	Для Каждого Таблица Из ОбщаяСтруктураХранения Цикл
		
		Если ПустаяСтрока(Таблица.Метаданные) Тогда
			
			СтруктураХранения.СтруктураХраненияОбщихСистемныхТаблиц.Вставить(Таблица.Назначение, Таблица.ИмяТаблицыХранения);
			
		ИначеЕсли НЕ (Таблица.Назначение = "Константа")
			И НЕ (Таблица.Назначение = "Основная")
			И НЕ (Таблица.Назначение = "ТабличнаяЧасть") Тогда
			
			НоваяСистемнаяТаблица = СтруктураХранения.СтруктураХраненияСистемныхТаблиц.Добавить();
			НоваяСистемнаяТаблица.Назначение = Таблица.Назначение;
			НоваяСистемнаяТаблица.Метаданные = Таблица.Метаданные;
			НоваяСистемнаяТаблица.ИмяТаблицы = Таблица.ИмяТаблицы;
			НоваяСистемнаяТаблица.ИмяТаблицыХранения = Таблица.ИмяТаблицыХранения;
			
			Если Таблица.ИмяТаблицы <> "" 
				И Таблица.Назначение <> "РегистрацияИзменений"
				И Таблица.Назначение <> "ТочкиМаршрута"
				И Таблица.Назначение <> "ЗначенияСубконто" Тогда
				НоваяСистемнаяТаблица.Прочие = Истина;
			Иначе
				НоваяСистемнаяТаблица.Прочие = Ложь;
			КонецЕсли;
		
		ИначеЕсли НЕ ПустаяСтрока(Таблица.ИмяТаблицы) Тогда
			
			СтруктураХранения.СтруктураХраненияТаблиц.Вставить(Таблица.Метаданные, Таблица.ИмяТаблицыХранения);
			
		КонецЕсли;
		
		Для Каждого Поле Из Таблица.Поля Цикл
			
			ИмяПоля = Поле.ИмяПоля;
			
			Если ПустаяСтрока(ИмяПоля) Тогда
				ИмяПоля = ПолучитьИмяПоляПоИмениПоляХранения(Таблица.Метаданные, Поле.ИмяПоляХранения);
				Если ИмяПоля = "" Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если Таблица.Метаданные = Поле.Метаданные ИЛИ ПустаяСтрока(Поле.Метаданные) Тогда
				СтруктураХранения.СтруктураХраненияТаблиц.Вставить(Таблица.Метаданные + "." + ИмяПоля, Поле.ИмяПоляХранения);
			ИначеЕсли Прав(ИмяПоля ,2) = "Дт" ИЛИ Прав(ИмяПоля ,2) = "Кт" Тогда
				СтруктураХранения.СтруктураХраненияТаблиц.Вставить(Поле.Метаданные + Прав(ИмяПоля ,2), Поле.ИмяПоляХранения);
			Иначе
				СтруктураХранения.СтруктураХраненияТаблиц.Вставить(Поле.Метаданные, Поле.ИмяПоляХранения);
			КонецЕсли;
			
		КонецЦикла;
		
		ИндексыТаблицы = Новый Массив;
		
		Для Каждого Индекс Из Таблица.Индексы Цикл
			
			Для Каждого ПолеИндекса Из Индекс.Поля Цикл
				
				ИмяПоля = ПолеИндекса.ИмяПоля;
				
				Если ПустаяСтрока(ИмяПоля) Тогда
					ИмяПоля = ПолучитьИмяПоляПоИмениПоляХранения(Таблица.Метаданные, ПолеИндекса.ИмяПоляХранения);
					Если ИмяПоля = "" Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				ИндексТаблицы = Новый Структура;
				ИндексТаблицы.Вставить("ПолноеИмя",  Таблица.ИмяТаблицы);
				ИндексТаблицы.Вставить("ИндексСУБД", Индекс.ИмяИндексаХранения);
				ИндексТаблицы.Вставить("ПолеСУБД",   ПолеИндекса.ИмяПоляХранения);
				ИндексТаблицы.Вставить("ИмяПоля",    ИмяПоля);
				
				Если Таблица.Метаданные = ПолеИндекса.Метаданные ИЛИ ПустаяСтрока(ПолеИндекса.Метаданные) Тогда
					ПолноеИмяПоля = Таблица.Метаданные + "." + ИмяПоля;
				Иначе
					ПолноеИмяПоля = ПолеИндекса.Метаданные;
				КонецЕсли;
				
				ИндексТаблицы.Вставить("ПолноеИмяПоля", ПолноеИмяПоля);
				
				СтруктураХранения.СтруктураХраненияИндексов.Вставить(ПолноеИмяПоля, Таблица.ИмяТаблицы);
				
				ИндексыТаблицы.Добавить(ИндексТаблицы);
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если Таблица.ИмяТаблицы <> "" И ИндексыТаблицы.Количество() > 0 Тогда
			СтруктураХранения.СтруктураХраненияИндексов.Вставить(Таблица.ИмяТаблицы, ИндексыТаблицы);
		КонецЕсли;
		
	КонецЦикла;
	
	АдресСтруктурыХранения = ПоместитьВоВременноеХранилище(СтруктураХранения, УникальныйИдентификатор);
	
КонецПроцедуры

Процедура ПолучитьОбъектПоТаблицеБД(ИмяСущностиБД) Экспорт
	
	ШаблонОписанияМетаданных = НСтр("ru = 'Метаданные: %1, назначение: %2, реквизит'");
	ШаблонОписанияМетаданныхРеквизита = НСтр("ru = 'Метаданные: %1, назначение: %2, реквизит: %3'");
	
	ВывестиОписание = Ложь;
	ИмяРеквизита = "";
	ИмяСущностиБД = ВРег(ИмяСущностиБД);
	ОбщаяСтруктураХранения = ПолучитьСтруктуруХраненияБазыДанных();
	Для Каждого Таблица Из ОбщаяСтруктураХранения Цикл
		
		ИмяТаблицыХранения = ВРег(Таблица.ИмяТаблицыХранения);
		Если СтрНайти(ИмяТаблицыХранения, ИмяСущностиБД) > 0 Тогда
			ВывестиОписание = Истина;
		КонецЕсли;
		
		Для Каждого Индекс Из Таблица.Индексы Цикл
			Если ВывестиОписание Тогда
				Прервать;
			КонецЕсли;
			ИмяИндексаХранения = ВРег(Индекс.ИмяИндексаХранения);
			Если СтрНайти(ИмяИндексаХранения, ИмяСущностиБД) > 0 Тогда
				ВывестиОписание = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Поле Из Таблица.Поля Цикл
			Если ВывестиОписание Тогда
				Прервать;
			КонецЕсли;
			ИмяПоляХранения = ВРег(Поле.ИмяПоляХранения);
			Если СтрНайти(ИмяПоляХранения, ИмяСущностиБД) > 0 Тогда
				ВывестиОписание = Истина;
				ИмяРеквизита = Поле.Метаданные
			КонецЕсли;
		КонецЦикла;
		
		Если ВывестиОписание Тогда
			Если ЗначениеЗаполнено(ИмяРеквизита) Тогда
				ОписанияМетаданных = СтрШаблон(ШаблонОписанияМетаданныхРеквизита, Таблица.Метаданные, Таблица.Назначение, ИмяРеквизита);
			Иначе
				ОписанияМетаданных = СтрШаблон(ШаблонОписанияМетаданных, Таблица.Метаданные, Таблица.Назначение);
			КонецЕсли;
			СообщитьПользователю(ОписанияМетаданных);
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСБитымиСсылками

Функция ПолучитьТаблицуБитыхСсылок() Экспорт
	
	Раздел     = "";
	ИмяТаблицы = "";
	ИмяПоля    = "";
	Порция     = 0;
	Очистить   = Ложь;
	
	ТаблицаБитыхСсылок = Новый ТаблицаЗначений;
	ТаблицаБитыхСсылок.Колонки.Добавить("Раздел");
	ТаблицаБитыхСсылок.Колонки.Добавить("ИмяТаблицы");
	ТаблицаБитыхСсылок.Колонки.Добавить("ПолноеИмяТаблицы");
	ТаблицаБитыхСсылок.Колонки.Добавить("Ключ");
	ТаблицаБитыхСсылок.Колонки.Добавить("ИмяПоля");
	ТаблицаБитыхСсылок.Колонки.Добавить("БитаяСсылка");
	ТаблицаБитыхСсылок.Колонки.Добавить("ВремяПоиска");
	
	СписокОбъектныхМетаданных = ПолучитьСписокОбъектныхМетаданных();
	
	Для Каждого РазделМетаданных Из СписокОбъектныхМетаданных Цикл
		
		Если ЗначениеЗаполнено(Раздел) И РазделМетаданных.Ключ <> Раздел Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ЭлементМетаданных Из РазделМетаданных.Значение Цикл
		
			Если ЗначениеЗаполнено(ИмяТаблицы) И ЭлементМетаданных.Имя <> ИмяТаблицы Тогда
				Продолжить;
			КонецЕсли;
			
			//@skip-check query-in-loop
			ЗаполнитьТаблицуБитыхСсылокПоОбъекту(ТаблицаБитыхСсылок, ЭлементМетаданных, ИмяПоля, ИСТИНА, РазделМетаданных.Ключ, Неопределено, Порция, Очистить);
			
			Если ЗначениеЗаполнено(ИмяПоля) Тогда
				Продолжить;
			КонецЕсли;
			
			СписокГруппМетаданных = ПодчиненныеМетаданныеРаздела(РазделМетаданных.Ключ);
			
			Для Каждого ГруппаМетаданныхРаздела Из СписокГруппМетаданных Цикл
				
				Если НЕ ЭтоТаблица(ГруппаМетаданныхРаздела) Тогда
					Продолжить;
				КонецЕсли;
				
				Для Каждого Таблица Из ЭлементМетаданных[ГруппаМетаданныхРаздела] Цикл
					
					//@skip-check query-in-loop
					ЗаполнитьТаблицуБитыхСсылокПоОбъекту(ТаблицаБитыхСсылок, Таблица, "", ИСТИНА, ГруппаМетаданныхРаздела, ЭлементМетаданных, Порция, Очистить);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	СписокНеОбъектныхМетаданных = ПолучитьСписокНеОбъектныхМетаданных();
	
	Для Каждого РазделМетаданных Из СписокНеОбъектныхМетаданных Цикл
		
		Если ЗначениеЗаполнено(Раздел) И РазделМетаданных.Ключ <> Раздел Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ЭлементМетаданных Из РазделМетаданных.Значение Цикл
		
			Если ЗначениеЗаполнено(ИмяТаблицы) И ЭлементМетаданных.Имя <> ИмяТаблицы Тогда
				Продолжить;
			КонецЕсли;
			
			//@skip-check query-in-loop
			ЗаполнитьТаблицуБитыхСсылокПоОбъекту(ТаблицаБитыхСсылок, ЭлементМетаданных, ИмяПоля, ЛОЖЬ, РазделМетаданных.Ключ, Неопределено, Порция, Очистить);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаБитыхСсылок;
	
КонецФункции

Процедура ИсправитьБитуюСсылкуВОбъекте(Ссылка, БитаяСсылка, ИмяПоля, ИмяТаблицы = "") Экспорт
	
	ЗаписатьОбъект = Ложь;
	
	Попытка
		ОбъектПоСсылке = Ссылка.ПолучитьОбъект();
		Если ЗначениеЗаполнено(ИмяТаблицы) Тогда
			Для Каждого Строка Из ОбъектПоСсылке[ИмяТаблицы] Цикл
				Если Строка[ИмяПоля] = БитаяСсылка Тогда
					Строка[ИмяПоля] = Неопределено;
					ЗаписатьОбъект = Истина;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ОбъектПоСсылке[ИмяПоля] = БитаяСсылка Тогда
			ОбъектПоСсылке[ИмяПоля] = Неопределено;
			ЗаписатьОбъект = Истина;
		Иначе
			// Не записываем объект
		КонецЕсли;
		
		Если ЗаписатьОбъект Тогда
			ОбъектПоСсылке.ОбменДанными.Загрузка = Истина;
			ОбъектПоСсылке.Записать();
		КонецЕсли;
	Исключение
		ТекстОшибки = НСтр("ru = 'Не удалось изменить объект по ссылке:'") + Символы.ПС + ОписаниеОшибки();
		СообщитьПользователю(ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

Процедура ИсправитьБитуюСсылкуВЗаписи(КлючЗаписи, Раздел, ИмяТаблицы, ИмяПоля) Экспорт
	
	КлючОтбора = Новый Структура;
	Для Каждого Элемент Из КлючЗаписи Цикл
		КлючОтбора.Вставить(Элемент.Представление, Элемент.Значение);
	КонецЦикла;
	
	Попытка
		
		НаборЗаписей = Неопределено;
		НомерСтроки  = Неопределено;
		МенеджерРегистра = ПолучитьМенеджерИлиМодуль(Раздел);
		НаборЗаписей = МенеджерРегистра[ИмяТаблицы].СоздатьНаборЗаписей();
		
		КлючОтбора.Свойство("НомерСтроки", НомерСтроки);
		
		БитаяСсылкаВИзмерении = КлючОтбора.Свойство(ИмяПоля);
		
		Если КлючОтбора.Свойство("Регистратор") Тогда
			НаборЗаписей.Отбор["Регистратор"].Установить(КлючОтбора.Регистратор);
			УдалитьЗапись = ИмяПоля = "Регистратор";
		Иначе
			Для Каждого КлючИЗначение Из КлючОтбора Цикл
				НаборЗаписей.Отбор[КлючИЗначение.Ключ].Установить(КлючИЗначение.Значение);
			КонецЦикла;
			УдалитьЗапись = БитаяСсылкаВИзмерении;
		КонецЕсли;
		
		НаборЗаписей.Прочитать();
		
		Если УдалитьЗапись Тогда
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать(ИСТИНА);
		Иначе
			
			ЗаписиКУдалению = Новый Массив;
			
			Для Каждого Запись Из НаборЗаписей Цикл
				
				Если НомерСтроки <> Неопределено И Запись.НомерСтроки <> НомерСтроки Тогда
					Продолжить;
				КонецЕсли;
				
				Если БитаяСсылкаВИзмерении Тогда
					ЗаписиКУдалению.Добавить(Запись);
				Иначе
					Запись[ИмяПоля] = Неопределено;
				КонецЕсли;
				
			КонецЦикла;
			
			Для Каждого Запись Из ЗаписиКУдалению Цикл
				НаборЗаписей.Удалить(Запись);
			КонецЦикла;
			
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать(ИСТИНА);
			
		КонецЕсли;
		
	Исключение
		ТекстОшибки = НСтр("ru = 'Не удалось изменить запись регистра:'") + Символы.ПС + ОписаниеОшибки();
		СообщитьПользователю(ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область Выгрузка

Функция ВыгрузитьДанныеОбъектов(ОбъектыМетаданных, УникальныйИдентификатор, РежимВыгрузкиПоСсылке = Ложь) Экспорт
	
	АдресФайлаВоВременномХранилище = "";
	
	ШаблонНачалоВыгрузки = НСтр("ru = 'Начало выгрузки: %Дата'");
	СообщениеНачалоВыгрузки = СтрЗаменить(ШаблонНачалоВыгрузки, "%Дата", ТекущаяДатаСеанса());
	СообщитьПользователю(СообщениеНачалоВыгрузки);
	
	Если РежимВыгрузкиПоСсылке Тогда
		ТранспортДанных = ИнициализироватьТранспортДанных("ВыгрузкаПоСсылке");
	Иначе
		ТранспортДанных = ИнициализироватьТранспортДанных("Выгрузка");
	КонецЕсли;
	
	Если Не ПолучитьДанные(ОбъектыМетаданных, ТранспортДанных) Тогда
		ТранспортДанных.ЗаписьXML.Закрыть();
		Возврат АдресФайлаВоВременномХранилище;
	КонецЕсли;
	
	ТранспортДанных.ЗаписьXML.ЗаписатьКонецЭлемента();
	ТранспортДанных.ЗаписьXML.ЗаписатьКонецЭлемента();
	ТекстСообщения = ТранспортДанных.ЗаписьXML.Закрыть();
	
	ШаблонОкончание = НСтр("ru = 'Окончание выгрузки: %Дата'");
	СообщениеОкончание = СтрЗаменить(ШаблонОкончание, "%Дата", ТекущаяДатаСеанса());
	СообщитьПользователю(СообщениеОкончание);
	
	СообщитьПользователю(НСтр("ru = 'Выгрузка данных успешно завершена'"));
	
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		ПотокВПамяти = Новый ПотокВПамяти();
		ЗаписьДанных = Новый ЗаписьДанных(ПотокВПамяти);
		ЗаписьДанных.ЗаписатьСтроку(ТекстСообщения);
		ЗаписьДанных.Закрыть();
		АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные(), УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат АдресФайлаВоВременномХранилище
	
КонецФункции

Процедура ЗагрузитьДанныеОбъектов(Адрес, ОчищатьНеСовпадающиеЭлементы) Экспорт
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(Адрес);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяВременногоФайла);
	ЧтениеXML.Прочитать();
	ЧтениеXML.Прочитать();
	
	Если Не ЧтениеXML.Прочитать() Тогда
		СообщитьПользователю(НСтр("ru = 'Неверный формат файла выгрузки'"));
		Возврат;
	КонецЕсли;
	
	ТранспортДанных = ИнициализироватьТранспортДанных("Загрузка");
	
	ТекущийТип = Неопределено;
	ЭлементОбъектовМетаданных = Неопределено;
	
	Если ПроверитьОсновныеРоли() Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Пока ТранспортДанных.Сериализатор.ВозможностьЧтенияXML(ЧтениеXML) Цикл
		
		ОбъектДанных = ТранспортДанных.Сериализатор.ПрочитатьXML(ЧтениеXML);
		
		Если ТекущийТип <> ТипЗнч(ОбъектДанных) Тогда
			ОбъектМетаданных = ОбъектДанных.Метаданные();
			Раздел           = ПолучитьРазделПоОбъекту(ОбъектМетаданных);
			ЭлементОбъектовМетаданных = Новый Структура; 
			ЭлементОбъектовМетаданных.Вставить("Имя",              ОбъектМетаданных.Имя);
			ЭлементОбъектовМетаданных.Вставить("ПолноеИмя",        ОбъектМетаданных.ПолноеИмя());
			ЭлементОбъектовМетаданных.Вставить("Раздел",           Раздел);
			ЭлементОбъектовМетаданных.Вставить("ПараметрыВыгрузки", "");
			КлючиЗаписиПоТипу = ПолучитьКлючиЗаписейПоТипу(ТранспортДанных.КлючиЗаписей, ЭлементОбъектовМетаданных.ПолноеИмя);
			Если КлючиЗаписиПоТипу.Количество() = 0 Тогда
				ПолучитьДанныеОбъектаМетаданных(ЭлементОбъектовМетаданных, ТранспортДанных);
			КонецЕсли;
			ТекущийТип = ТипЗнч(ОбъектДанных);
		КонецЕсли;
		
		Если ПроверитьОбъектДанных(ОбъектДанных, ЭлементОбъектовМетаданных) Тогда
		
			НачатьТранзакцию();
			Попытка
				//@skip-check query-in-loop
				ОбработкаОбъектаДанныхПередЗаписью(ОбъектДанных, ЭлементОбъектовМетаданных);
				ОбъектДанных.ОбменДанными.Загрузка = Истина;
				ОбъектДанных.Записать();
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ТекстОшибки = ОписаниеОшибки();
				СообщитьПользователю(ТекстОшибки);
			КонецПопытки;
		
		КонецЕсли;
		
		Если ЭтоТаблицаНабораДанных(ЭлементОбъектовМетаданных.ПолноеИмя) Тогда
			КлючЗаписиОбъекта = Новый Структура;
			Для Каждого ЭлементОтбора Из ОбъектДанных.Отбор Цикл
				КлючЗаписиОбъекта.Вставить(ЭлементОтбора.Имя, ЭлементОтбора.Значение);
			КонецЦикла;
		ИначеЕсли ЭтоТаблицаСсылочныхДанных(ЭлементОбъектовМетаданных.ПолноеИмя) Тогда
			КлючЗаписиОбъекта = Новый Структура("Ссылка", ОбъектДанных.Ссылка);
		ИначеЕсли ЭтоКонстанта(ЭлементОбъектовМетаданных.ПолноеИмя) Тогда
			КлючЗаписиОбъекта = ЭлементОбъектовМетаданных.ПолноеИмя;
		Иначе
			Продолжить;
		КонецЕсли;
		
		ОчиститьКлючЗаписи(ЭлементОбъектовМетаданных.ПолноеИмя, ТранспортДанных.КлючиЗаписей, КлючЗаписиОбъекта);
		
	КонецЦикла;
	
	Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда 
		ШаблонСообщения = НСтр("ru = 'Метаданные типа %1 не были обнаружены в информационной базе. Загрузка прервана...'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ЧтениеXML.ЛокальноеИмя);
		СообщитьПользователю(ТекстСообщения)
	Иначе
		Если ОчищатьНеСовпадающиеЭлементы Тогда
			УдалитьКлючиЗаписей(Неопределено, ТранспортДанных.КлючиЗаписей);
		КонецЕсли;
		СообщитьПользователю(НСтр("ru = 'Загрузка данных успешно завершена'"));
	КонецЕсли;
	
	ЧтениеXML.Пропустить();
	ЧтениеXML.Закрыть();
	
	УдалитьФайлы(ИмяВременногоФайла);
	
КонецПроцедуры

Функция ПроверитьОсновныеРоли()
	
	Результат = Ложь;
	
	Для Каждого ОсновнаяРоль Из Метаданные.ОсновныеРоли Цикл
		Если РольДоступна(ОсновнаяРоль) Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПреобразоватьСтрокуВПараметрыВыгрузки(ТекстНастроек) Экспорт
	
	ПараметрыВыгрузки = Новый Структура("НастройкиВыгрузки, НеВыгружаемыеПоля", Неопределено, Новый Соответствие);
	
	Если Не ЗначениеЗаполнено(ТекстНастроек) Тогда
		Возврат ПараметрыВыгрузки;
	КонецЕсли;
	
	Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстНастроек);
	ПараметрыВыгрузки = Сериализатор.ПрочитатьXML(ЧтениеXML);
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

Функция ПреобразоватьПараметрыВыгрузкиВСтроку(НастройкиВыгрузки, НеВыгружаемыеПоля) Экспорт
	
	ТекстНастроек = "";
	НастройкиКомпоновкиДанных = НастройкиВыгрузки.ПолучитьНастройки();
	
	Если Не ИспользуетсяОтборСКД(НастройкиКомпоновкиДанных)
		И Не ЗначениеЗаполнено(НеВыгружаемыеПоля) Тогда
		Возврат ТекстНастроек;
	КонецЕсли;
	
	ПараметрыВыгрузки = Новый Структура("НастройкиВыгрузки, НеВыгружаемыеПоля");
	ПараметрыВыгрузки.НастройкиВыгрузки = НастройкиКомпоновкиДанных;
	ПараметрыВыгрузки.НеВыгружаемыеПоля = НеВыгружаемыеПоля;
	
	Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	Сериализатор.ЗаписатьXML(ЗаписьXML, ПараметрыВыгрузки);
	ТекстНастроек = ЗаписьXML.Закрыть();
	
	Возврат ТекстНастроек;
	
КонецФункции

Процедура ЗагрузитьПараметрыВыгрузкиИзСтроки(НастройкиВыгрузки, ЭлементОбъектовМетаданных, УникальныйИдентификатор) Экспорт
	
	СхемаКомпоновкиДанных = ПодготовитьСхемуКомпоновкиДанных(ЭлементОбъектовМетаданных);
	ЗагрузитьНастройкиКомпоновкиДанных(СхемаКомпоновкиДанных, НастройкиВыгрузки, ЭлементОбъектовМетаданных.НастройкиВыгрузки, УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция ПреобразоватьРеквизитыВСтроку(РеквизитыОбъекта) Экспорт
	
	Строка = "";
	
	Для Каждого РеквизитОбъекта Из РеквизитыОбъекта Цикл
		
		Если РеквизитОбъекта.Тип.СодержитТип(Тип("ХранилищеЗначения")) Тогда
			Продолжить;
		КонецЕсли;
		
		Если РеквизитОбъекта.Пароль Тогда
			Продолжить;
		КонецЕсли;
		
		Строка = Строка + СокрЛП(РеквизитОбъекта.Имя) + ";";
		
	КонецЦикла;
	
	Возврат Строка;
	
КонецФункции

Функция ПроверитьСуществованиеСвойства(ИмяСвойства, МетаданныеОбъект) Экспорт
	
	СтруктураСвойств = Новый Структура();
	СтруктураСвойств.Вставить(ИмяСвойства, Неопределено);
	ЗаполнитьЗначенияСвойств(СтруктураСвойств, МетаданныеОбъект);
	
	Если СтруктураСвойств[ИмяСвойства] = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Процедура СообщитьПользователю(Текст) Экспорт
	
	СообщениеПользователю = Новый СообщениеПользователю;
	СообщениеПользователю.Текст = Текст;
	СообщениеПользователю.Сообщить();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСМетаданными

Функция ИнициализироватьРаздел(ИмяРаздела, Общий, Детализировать, ЭтоОсновнаяТаблица = Ложь, ЭтаТаблицаСодержитТип = Ложь)
	
	Раздел = Новый Структура;
	Раздел.Вставить("ИмяРаздела",            ИмяРаздела);
	Раздел.Вставить("Общий",                 Общий);
	Раздел.Вставить("Детализировать",        Детализировать);
	Раздел.Вставить("ЭтоОсновнаяТаблица",    ЭтоОсновнаяТаблица);
	Раздел.Вставить("ЭтаТаблицаСодержитТип", ЭтаТаблицаСодержитТип);
	
	Возврат Раздел;
	
КонецФункции

Функция ПолучитьРазделПоОбъекту(ОбъектМетаданных)
	
	Если Метаданные.ПланыОбмена.Содержит(ОбъектМетаданных) Тогда
		Раздел = "ПланыОбмена";
	ИначеЕсли Метаданные.Константы.Содержит(ОбъектМетаданных) Тогда
		Раздел = "Константы";
	ИначеЕсли Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
		Раздел = "Справочники";
	ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		Раздел = "Документы";
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных) Тогда
		Раздел = "ПланыВидовХарактеристик";
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных) Тогда
		Раздел = "ПланыСчетов";
	ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных) Тогда
		Раздел = "ПланыВидовРасчета";
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) Тогда
		Раздел = "РегистрыСведений";
	ИначеЕсли Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных) Тогда
		Раздел = "РегистрыНакопления";
	ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных) Тогда
		Раздел = "РегистрыБухгалтерии";
	ИначеЕсли Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных) Тогда
		Раздел = "РегистрыРасчета";
	ИначеЕсли Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных) Тогда
		Раздел = "БизнесПроцессы";
	ИначеЕсли Метаданные.Задачи.Содержит(ОбъектМетаданных) Тогда
		Раздел = "Задачи";
	ИначеЕсли Метаданные.ВнешниеИсточникиДанных.Содержит(ОбъектМетаданных) Тогда
		Раздел = "ВнешниеИсточникиДанных";
	Иначе
		Раздел = Неопределено;
	КонецЕсли;
	
	Возврат Раздел;
	
КонецФункции

Функция ПолучитьИмяТаблицыПоРазделу(Раздел)
	
	Если Раздел = "Константы" Тогда
		Возврат "Константа";
	ИначеЕсли Раздел = "ПланыОбмена" Тогда
		Возврат "ПланОбмена";
	ИначеЕсли Раздел = "Справочники" Тогда
		Возврат "Справочник";
	ИначеЕсли Раздел = "Документы" Тогда
		Возврат "Документ";
	ИначеЕсли Раздел = "Перечисления" Тогда
		Возврат "Перечисление";
	ИначеЕсли Раздел = "ПланыВидовХарактеристик" Тогда
		Возврат "ПланВидовХарактеристик";
	ИначеЕсли Раздел = "ПланыСчетов" Тогда
		Возврат "ПланСчетов";
	ИначеЕсли Раздел = "ПланыВидовРасчета" Тогда
		Возврат "ПланВидовРасчета";
	ИначеЕсли Раздел = "РегистрыСведений" Тогда
		Возврат "РегистрСведений";
	ИначеЕсли Раздел = "РегистрыНакопления" Тогда
		Возврат "РегистрНакопления";
	ИначеЕсли Раздел = "РегистрыБухгалтерии" Тогда
		Возврат "РегистрБухгалтерии";
	ИначеЕсли Раздел = "РегистрыРасчета" Тогда
		Возврат "РегистрРасчета";
	ИначеЕсли Раздел = "БизнесПроцессы" Тогда
		Возврат "БизнесПроцесс";
	ИначеЕсли Раздел = "Задачи" Тогда
		Возврат "Задача";
	Иначе
		Возврат Раздел;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПолноеИмяМетаданныхПоТипу(Тип)
	
	Если КэшИменМетаданныхПоТипу = Неопределено Тогда
		КэшИменМетаданныхПоТипу = Новый Соответствие;
	КонецЕсли;
	
	ПолноеИмя = КэшИменМетаданныхПоТипу.Получить(Тип);
	Если ПолноеИмя = Неопределено Тогда
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		Если Не ОбъектМетаданных = Неопределено Тогда
			ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
			Если Прав(Тип, 16) = "(точка маршрута)" Тогда
				ПолноеИмя = ПолноеИмя + ".Точки";
			КонецЕсли;
		КонецЕсли;
		КэшИменМетаданныхПоТипу.Вставить(Тип, ПолноеИмя);
	КонецЕсли;
	
	Возврат ПолноеИмя;
	
КонецФункции

Функция ПолучитьСписокОбъектныхМетаданных()
	
	СписокМетаданных = Новый Соответствие;
	СписокМетаданных.Вставить("ПланыОбмена",             Метаданные.ПланыОбмена);
	СписокМетаданных.Вставить("Справочники",             Метаданные.Справочники);
	СписокМетаданных.Вставить("Документы",               Метаданные.Документы);
	СписокМетаданных.Вставить("ПланыВидовХарактеристик", Метаданные.ПланыВидовХарактеристик);
	СписокМетаданных.Вставить("ПланыСчетов",             Метаданные.ПланыСчетов);
	СписокМетаданных.Вставить("ПланыВидовРасчета",       Метаданные.ПланыВидовРасчета);
	СписокМетаданных.Вставить("БизнесПроцессы",          Метаданные.БизнесПроцессы);
	СписокМетаданных.Вставить("Задачи",                  Метаданные.Задачи);
	
	Возврат СписокМетаданных;
	
КонецФункции

Функция ПолучитьСписокНеОбъектныхМетаданных()
	
	СписокМетаданных = Новый Соответствие;
	СписокМетаданных.Вставить("РегистрыСведений",    Метаданные.РегистрыСведений);
	СписокМетаданных.Вставить("РегистрыНакопления",  Метаданные.РегистрыНакопления);
	СписокМетаданных.Вставить("РегистрыБухгалтерии", Метаданные.РегистрыБухгалтерии);
	СписокМетаданных.Вставить("РегистрыРасчета",     Метаданные.РегистрыРасчета);
	
	Возврат СписокМетаданных;
	
КонецФункции

Функция ЭтоОсновнаяТаблица(ПолноеИмя)
	
	ИмяТаблицы = ПолучитьИмяТаблицыПоРазделу(ПолноеИмя);
	
	Если Лев(ИмяТаблицы, 9)       = "Константа" Тогда
		Возврат Истина;
	ИначеЕсли Лев(ИмяТаблицы, 10) = "ПланОбмена" Тогда
		Возврат Истина;
	ИначеЕсли Лев(ИмяТаблицы, 10) = "Справочник" Тогда
		Возврат Истина;
	ИначеЕсли Лев(ИмяТаблицы, 8)  = "Документ" Тогда
		Возврат Истина;
	ИначеЕсли Лев(ИмяТаблицы, 5)  = "Отчет" Тогда
		Возврат Истина;
	ИначеЕсли Лев(ИмяТаблицы, 9)  = "Обработка" Тогда
		Возврат Истина;
	ИначеЕсли Лев(ИмяТаблицы, 22) = "ПланВидовХарактеристик" Тогда
		Возврат Истина;
	ИначеЕсли Лев(ИмяТаблицы, 10) = "ПланСчетов" Тогда
		Возврат Истина;
	ИначеЕсли Лев(ИмяТаблицы, 16) = "ПланВидовРасчета" Тогда
		Возврат Истина;
	ИначеЕсли Лев(ИмяТаблицы, 15) = "РегистрСведений" Тогда
		Возврат Истина;
	ИначеЕсли Лев(ИмяТаблицы, 17) = "РегистрНакопления" Тогда
		Возврат Истина;
	ИначеЕсли Лев(ИмяТаблицы, 18) = "РегистрБухгалтерии" Тогда
		Возврат Истина;
	ИначеЕсли Лев(ИмяТаблицы, 14) = "РегистрРасчета" Тогда
		Возврат Истина;
	ИначеЕсли Лев(ИмяТаблицы, 13) = "БизнесПроцесс" Тогда
		Возврат Истина;
	ИначеЕсли Лев(ИмяТаблицы, 6) = "Задача" Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ЭтоКонстанта(ПолноеИмя)
	
	Возврат
		Лев(ПолноеИмя, 9) = "Константа"
	
КонецФункции

Функция ЭтоПланОбмена(ПолноеИмя)
	
	Возврат
		Лев(ПолноеИмя, 10) = "ПланОбмена"
	
КонецФункции

Функция ЭтоТаблицаСсылочныхДанных(ПолноеИмя)
	
	ИмяТаблицы = ПолучитьИмяТаблицыПоРазделу(ПолноеИмя);
	
	Возврат
		Лев(ИмяТаблицы, 10) = "ПланОбмена"
	ИЛИ Лев(ИмяТаблицы, 10) = "Справочник"
	ИЛИ Лев(ИмяТаблицы, 8)  = "Документ"
	ИЛИ Лев(ИмяТаблицы, 12) = "Перечисление"
	ИЛИ Лев(ИмяТаблицы, 22) = "ПланВидовХарактеристик"
	ИЛИ Лев(ИмяТаблицы, 10) = "ПланСчетов"
	ИЛИ Лев(ИмяТаблицы, 16) = "ПланВидовРасчета"
	ИЛИ Лев(ИмяТаблицы, 13) = "БизнесПроцесс"
	ИЛИ Лев(ИмяТаблицы, 6)  = "Задача"
	
КонецФункции

Функция ЭтоТаблицаПредопределенныхДанных(ПолноеИмя)
	
	ИмяТаблицы = ПолучитьИмяТаблицыПоРазделу(ПолноеИмя);
	
	Возврат
		Лев(ИмяТаблицы, 10) = "Справочник"
	ИЛИ Лев(ИмяТаблицы, 22) = "ПланВидовХарактеристик"
	ИЛИ Лев(ИмяТаблицы, 10) = "ПланСчетов"
	ИЛИ Лев(ИмяТаблицы, 16) = "ПланВидовРасчета"
	
КонецФункции

Функция ЭтоТаблицаНабораДанных(ПолноеИмя)
	
	ИмяТаблицы = ПолучитьИмяТаблицыПоРазделу(ПолноеИмя);
	
	Возврат
		Лев(ИмяТаблицы, 15) = "РегистрСведений"
	ИЛИ Лев(ИмяТаблицы, 17) = "РегистрНакопления"
	ИЛИ Лев(ИмяТаблицы, 18) = "РегистрБухгалтерии"
	ИЛИ Лев(ИмяТаблицы, 14) = "РегистрРасчета"
	
КонецФункции

Функция МенеджерОбъектаПоПолномуИмени(ПолноеИмя)
	
	ЧастиИмени = РазложитьСтрокуВМассивПодстрок(ПолноеИмя);
	
	Если ЧастиИмени.Количество() >= 2 Тогда
		КлассОМ = ЧастиИмени[0];
		ИмяОМ = ЧастиИмени[1];
	КонецЕсли;
	
	Если КлассОМ = "ПланОбмена" Тогда
		Менеджер = ПланыОбмена;
	ИначеЕсли КлассОМ = "Константа" Тогда
		Менеджер = Константы;
	ИначеЕсли КлассОМ = "Справочник" Тогда
		Менеджер = Справочники;
	ИначеЕсли КлассОМ = "Документ" Тогда
		Менеджер = Документы;
	ИначеЕсли КлассОМ = "Перечисление" Тогда
		Менеджер = Перечисления;
	ИначеЕсли КлассОМ = "ПланВидовХарактеристик" Тогда
		Менеджер = ПланыВидовХарактеристик;
	ИначеЕсли КлассОМ = "ПланСчетов" Тогда
		Менеджер = ПланыСчетов;
	ИначеЕсли КлассОМ = "ПланВидовРасчета" Тогда
		Менеджер = ПланыВидовРасчета;
	ИначеЕсли КлассОМ = "БизнесПроцесс" Тогда
		Менеджер = БизнесПроцессы;
	ИначеЕсли КлассОМ = "Задача" Тогда
		Менеджер = Задачи;
	ИначеЕсли КлассОМ = "РегистрСведений" Тогда
		Менеджер = РегистрыСведений;
	ИначеЕсли КлассОМ = "РегистрНакопления" Тогда
		Менеджер = РегистрыНакопления;
	ИначеЕсли КлассОМ = "РегистрБухгалтерии" Тогда
		Менеджер = РегистрыБухгалтерии;
	ИначеЕсли КлассОМ = "РегистрРасчета" Тогда
		Менеджер = РегистрыРасчета;
	Иначе
		Менеджер = Неопределено;
	КонецЕсли;
	
	Если Менеджер = Неопределено Тогда
		Возврат Менеджер;
	Иначе
		Возврат Менеджер[ИмяОМ];
	КонецЕсли;
	
КонецФункции

Функция СодержитСсылочныйТип(ОписаниеТипов)
	
	СодержитСсылочныйТип = Ложь;
	Для Каждого Тип Из ОписаниеТипов.Типы() Цикл
		СодержитСсылочныйТип = СодержитСсылочныйТип Или ЭтоСсылка(Тип, Истина);
		Если СодержитСсылочныйТип Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СодержитСсылочныйТип;
	
КонецФункции

Функция ЭтоПеречисление(Тип)
	
	Возврат Тип <> Тип("Неопределено")
		И Перечисления.ТипВсеСсылки().СодержитТип(Тип);
	
КонецФункции

Функция ЭтоПростойТип(Тип)
	
	Возврат Тип = Тип("Неопределено")
		ИЛИ Тип = Тип("Число")
		ИЛИ Тип = Тип("Строка")
		ИЛИ Тип = Тип("Дата")
		ИЛИ Тип = Тип("Булево")
		ИЛИ Тип = Тип("ОписаниеТипов")
		ИЛИ Тип = Тип("УникальныйИдентификатор")
		ИЛИ Тип = Тип("ХранилищеЗначения");
	
КонецФункции

Функция ЭтоКонстантныйОбъект(ОбъектМетаданных)
	
	Возврат ОбъектМетаданных <> Неопределено
		И(Метаданные.Константы.Содержит(ОбъектМетаданных));
	
КонецФункции

Функция ЭтоСсылочныйОбъект(ОбъектМетаданных)
	
	Возврат ОбъектМетаданных <> Неопределено
		И(Метаданные.Справочники.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.Документы.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.ПланыОбмена.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.Задачи.Содержит(ОбъектМетаданных));
	
КонецФункции

Функция ЭтоТабличныйОбъект(ОбъектМетаданных)
	
	Возврат ОбъектМетаданных <> Неопределено
		И(Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных));
	
КонецФункции

Процедура ПодчиненныеМетаданныеОбъекта(СписокМетаданных)
	
	СписокМетаданных.Добавить("СтандартныеРеквизиты");
	СписокМетаданных.Добавить("Реквизиты");
	СписокМетаданных.Добавить("ТабличныеЧасти");
	
КонецПроцедуры

Процедура ПодчиненныеМетаданныеРегистра(СписокМетаданных)
	
	СписокМетаданных.Добавить("СтандартныеРеквизиты");
	СписокМетаданных.Добавить("Измерения");
	СписокМетаданных.Добавить("Ресурсы");
	СписокМетаданных.Добавить("Реквизиты");
	
КонецПроцедуры

Процедура ДополнительныеПодчиненныеМетаданныеРаздела(Раздел, СписокМетаданных)
	
	Если Раздел = "Константы" Тогда
		СписокМетаданных.Добавить("РегистрацияИзмененийКонстанты");
	ИначеЕсли Раздел = "Справочники" Тогда
		СписокМетаданных.Вставить(0, "ПредопределенныеДанные");
		СписокМетаданных.Вставить(1, "Характеристики");
		СписокМетаданных.Вставить(2, "РегистрацияИзменений");
	ИначеЕсли Раздел = "Документы" Тогда
		СписокМетаданных.Вставить(0, "Характеристики");
		СписокМетаданных.Вставить(1, "РегистрацияИзменений");
	ИначеЕсли Раздел = "ПланыВидовХарактеристик" Тогда
		СписокМетаданных.Вставить(0, "ПредопределенныеДанные");
		СписокМетаданных.Вставить(1, "Характеристики");
		СписокМетаданных.Вставить(2, "РегистрацияИзменений");
	ИначеЕсли Раздел = "ПланыОбмена" Тогда
		СписокМетаданных.Вставить(0, "Характеристики");
		СписокМетаданных.Вставить(1, "РегистрацияИзменений");
	ИначеЕсли Раздел = "ПланыСчетов" Тогда
		СписокМетаданных.Вставить(0, "ПредопределенныеДанные");
		СписокМетаданных.Вставить(1, "Характеристики");
		СписокМетаданных.Вставить(2, "РегистрацияИзменений");
	ИначеЕсли Раздел = "ПланыВидовРасчета" Тогда
		СписокМетаданных.Вставить(0, "СистемныеТаблицы");
		СписокМетаданных.Вставить(1, "ПредопределенныеДанные");
		СписокМетаданных.Вставить(2, "Характеристики");
		СписокМетаданных.Вставить(3, "РегистрацияИзменений");
	ИначеЕсли Раздел = "РегистрыСведений" Тогда
		СписокМетаданных.Вставить(0, "СистемныеТаблицы");
		СписокМетаданных.Вставить(1, "РегистрацияИзменений");
	ИначеЕсли Раздел = "РегистрыНакопления" Тогда
		СписокМетаданных.Вставить(0, "СистемныеТаблицы");
		СписокМетаданных.Вставить(1, "РегистрацияИзменений");
	ИначеЕсли Раздел = "РегистрыБухгалтерии" Тогда
		СписокМетаданных.Вставить(0, "СистемныеТаблицы");
		СписокМетаданных.Вставить(1, "РегистрацияИзменений");
		СписокМетаданных.Вставить(6, "ЗначенияСубконто");
	ИначеЕсли Раздел = "РегистрыРасчета" Тогда
		СписокМетаданных.Вставить(0, "СистемныеТаблицы");
		СписокМетаданных.Вставить(1, "РегистрацияИзменений");
		СписокМетаданных.Вставить(6, "Перерасчеты");
	ИначеЕсли Раздел = "БизнесПроцессы" Тогда
		СписокМетаданных.Вставить(2, "Характеристики");
		СписокМетаданных.Вставить(3, "ТочкиМаршрута");
	ИначеЕсли Раздел = "Задачи" Тогда
		СписокМетаданных.Вставить(0, "Характеристики");
		СписокМетаданных.Вставить(1, "РегистрацияИзменений");
	КонецЕсли;
	
	Если НЕ Раздел = "Константы"
		И НЕ Раздел = "Подсистемы"
		И НЕ Раздел = "ПараметрыСеанса"
		И НЕ Раздел = "КритерииОтбора"
		И НЕ Раздел = "ФункциональныеОпции"
		И НЕ Раздел = "ХранилищаНастроек"
		И НЕ Раздел = "ОбщиеФормы"
		И НЕ Раздел = "ОбщиеКоманды"
		И НЕ Раздел = "WebСервисы" Тогда
		СписокМетаданных.Добавить("Прочие");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Раздел)
		И НЕ Раздел = "Подсистемы"
		И НЕ Раздел = "ФункциональныеОпции" Тогда
		СписокМетаданных.Вставить(0, "Подсистемы");
		СписокМетаданных.Вставить(1, "ФункциональныеОпции");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Раздел)
		И Раздел = "ФункциональныеОпции" Тогда
		СписокМетаданных.Вставить(0, "Подсистемы");
	КонецЕсли;
	
КонецПроцедуры

Функция ШаблонПроверкиНаПустоеЗначение(ОписаниеТипов, ИмяТаблицы)
	
	УсловиеПроверки =
	"	ВЫБОР
	|		КОГДА ТаблицаДанных.%ИмяПоля% ЕСТЬ NULL
	|			ТОГДА 0";
	
	ДобавленоУсловиеПроверкиНаНеопределено = ЛОЖЬ;
	
	Типы = ОписаниеТипов.Типы();
	
	Для Каждого Тип Из Типы Цикл
		
		Если Тип = Тип("Число") Тогда
			УсловиеПроверки = УсловиеПроверки + "
			|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДанных.%ИмяПоля%) = ТИП(ЧИСЛО)
			|				И ТаблицаДанных.%ИмяПоля% = 0
			|			ТОГДА 1
			|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДанных.%ИмяПоля%) = ТИП(ЧИСЛО)
			|			ТОГДА 0";
		ИначеЕсли Тип = Тип("Строка") Тогда
			УсловиеПроверки = УсловиеПроверки + "
			|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДанных.%ИмяПоля%) = ТИП(СТРОКА)
			|				И ТаблицаДанных.%ИмяПоля% = """"
			|			ТОГДА 1
			|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДанных.%ИмяПоля%) = ТИП(СТРОКА)
			|			ТОГДА 0";
		ИначеЕсли Тип = Тип("Дата") Тогда
			УсловиеПроверки = УсловиеПроверки + "
			|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДанных.%ИмяПоля%) = ТИП(ДАТА)
			|				И ТаблицаДанных.%ИмяПоля% = ДАТАВРЕМЯ(1,1,1,0,0,0)
			|			ТОГДА 1
			|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДанных.%ИмяПоля%) = ТИП(ДАТА)
			|			ТОГДА 0";
		ИначеЕсли Тип = Тип("Булево") Тогда
			УсловиеПроверки = УсловиеПроверки + "
			|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДанных.%ИмяПоля%) = ТИП(БУЛЕВО)
			|			ТОГДА 0";
		ИначеЕсли Тип = Тип("ХранилищеЗначения") Тогда
			УсловиеПроверки = УсловиеПроверки + "
			|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДанных.%ИмяПоля%) = ТИП(ХранилищеЗначений)
			|			ТОГДА 0";
		ИначеЕсли Тип = Тип("УникальныйИдентификатор") Тогда
			УсловиеПроверки = УсловиеПроверки + "
			|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДанных.%ИмяПоля%) = &ТипУникальногоИдентификатора
			|				И ТаблицаДанных.%ИмяПоля% = &ПустойУникальныйИдентификатор
			|			ТОГДА 1
			|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДанных.%ИмяПоля%) = &ТипУникальногоИдентификатора
			|			ТОГДА 0";
		ИначеЕсли ЭтоСсылка(Тип) Тогда
			
			Если НЕ ДобавленоУсловиеПроверкиНаНеопределено Тогда
				УсловиеПроверки = УсловиеПроверки + "
				|		КОГДА ТаблицаДанных.%ИмяПоля% = НЕОПРЕДЕЛЕНО
				|			ТОГДА 1";
				ДобавленоУсловиеПроверкиНаНеопределено = ИСТИНА;
			КонецЕсли;
			
			ПолноеИмяМетаданных = ПолучитьПолноеИмяМетаданныхПоТипу(Тип);
			
			УсловиеПроверки = УсловиеПроверки + "
			|		КОГДА ТаблицаДанных.%ИмяПоля% = ЗНАЧЕНИЕ(" + ПолноеИмяМетаданных + ".ПустаяСсылка)
			|			ТОГДА 1";
			
		КонецЕсли;
		
	КонецЦикла;
	
	УсловиеПроверки = УсловиеПроверки + "
	|		ИНАЧЕ 0 
	|	КОНЕЦ";
	
	Возврат УсловиеПроверки;
	
КонецФункции

Процедура ПолучитьПодсистемыОбъектаРекурсивно(МетаданныеОбъект, МетаданныеПодсистемы, Подсистемы)
	
	Для Каждого Подсистема Из МетаданныеПодсистемы Цикл
		
		Если Подсистема.Состав.Содержит(МетаданныеОбъект) Тогда
			Подсистемы.Добавить(Подсистема);
		КонецЕсли;
		
		ПолучитьПодсистемыОбъектаРекурсивно(МетаданныеОбъект, Подсистема.Подсистемы, Подсистемы);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьИнтерфейсныеОбъекты()
	
	ИнтерфейсныеОбъекты = Новый Соответствие;
	
	ПолучитьИнтерфейсныеОбъектыРекурсивно(Метаданные.Подсистемы, ИнтерфейсныеОбъекты);
	
	Возврат ИнтерфейсныеОбъекты;
	
КонецФункции

Функция ИнициализироватьОписаниеОбъекта()
	
	ОписаниеОбъекта = Новый Структура;
	ОписаниеОбъекта.Вставить("ПолноеИмя",                   "");
	ОписаниеОбъекта.Вставить("Имя",                         "");
	ОписаниеОбъекта.Вставить("Путь",                        "");
	ОписаниеОбъекта.Вставить("ПутьВЗапросе",                "");
	ОписаниеОбъекта.Вставить("Раздел",                      "");
	ОписаниеОбъекта.Вставить("ПутьКСтандартномуРеквизиту",  "");
	ОписаниеОбъекта.Вставить("ЭтоСсылка",                   Ложь);
	ОписаниеОбъекта.Вставить("ЭтоНаборЗаписей",             Ложь);
	ОписаниеОбъекта.Вставить("ЭтоОсновнаяТаблица",          Ложь);
	ОписаниеОбъекта.Вставить("ЭтоПодсистема",               Ложь);
	ОписаниеОбъекта.Вставить("ЭтоФункциональнаяОпция",      Ложь);
	ОписаниеОбъекта.Вставить("ВключенВИнтерфейс",           Ложь);
	ОписаниеОбъекта.Вставить("Подсистемы",                  Новый Массив);
	ОписаниеОбъекта.Вставить("Объекты",                     Новый Массив);
	ОписаниеОбъекта.Вставить("ФункциональныеОпции",         Новый Массив);
	ОписаниеОбъекта.Вставить("ОчищенныеРеквизиты",          Новый Соответствие);
	ОписаниеОбъекта.Вставить("ИдентификаторСтроки");
	ОписаниеОбъекта.Вставить("ОбъектМетаданных");
	ОписаниеОбъекта.Вставить("ОбъектМетаданныхРодитель");
	
	Возврат ОписаниеОбъекта;
	
КонецФункции

Функция ПолучитьСписокПолейТаблицы(Раздел, ЭлементМетаданных, ИмяПоля = "")
	
	ОтборПоПолю = ЗначениеЗаполнено(ИмяПоля);
	
	СписокГруппМетаданных = ПодчиненныеМетаданныеРаздела(Раздел);
	
	СписокПолей    = Новый Соответствие;
	КлючиСтруктуры = "Тип, КоличествоСсылочныхТипов, ГруппаМетаданных";
	
	Если (Не ОтборПоПолю ИЛИ ИмяПоля = "СчетДт") И Раздел = "РегистрыБухгалтерии" И ЭлементМетаданных.Корреспонденция Тогда
		СписокПолей.Вставить("СчетДт", Новый Структура(КлючиСтруктуры, Новый ОписаниеТипов("ПланСчетовСсылка." + ЭлементМетаданных.ПланСчетов.Имя), 1, "Измерения"));
	ИначеЕсли (Не ОтборПоПолю ИЛИ ИмяПоля = "СчетКт") И Раздел = "РегистрыБухгалтерии" И ЭлементМетаданных.Корреспонденция Тогда
		СписокПолей.Вставить("СчетКт", Новый Структура(КлючиСтруктуры, Новый ОписаниеТипов("ПланСчетовСсылка." + ЭлементМетаданных.ПланСчетов.Имя), 1, "Измерения"));
	ИначеЕсли (Не ОтборПоПолю ИЛИ ИмяПоля = "Счет") И Раздел = "РегистрыБухгалтерии" И НЕ ЭлементМетаданных.Корреспонденция Тогда
		СписокПолей.Вставить("Счет", Новый Структура(КлючиСтруктуры, Новый ОписаниеТипов("ПланСчетовСсылка." + ЭлементМетаданных.ПланСчетов.Имя), 1, "Измерения"));
	КонецЕсли;
	
	Если ОтборПоПолю И СписокПолей.Количество() > 0 тогда
		Возврат СписокПолей;
	КонецЕсли;
	
	Для Каждого ГруппаМетаданныхРаздела Из СписокГруппМетаданных Цикл
		
		Если НЕ ЭтоПоляТаблицы(ГруппаМетаданныхРаздела) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого Поле Из ЭлементМетаданных[ГруппаМетаданныхРаздела] Цикл
			
			Если ОтборПоПолю И Поле.Имя <> ИмяПоля Тогда
				Продолжить;
			КонецЕсли;
			
			КоличествоСсылочныхТипов = КоличествоСсылочныхТиповВОписанииТипа(Поле.Тип);
			
			СвойстваПоля = Новый Структура(КлючиСтруктуры, Поле.Тип, КоличествоСсылочныхТипов, ГруппаМетаданныхРаздела);
			
			Если Раздел = "РегистрыБухгалтерии" И ЭлементМетаданных.Корреспонденция
				И (ГруппаМетаданныхРаздела = "Измерения" ИЛИ ГруппаМетаданныхРаздела = "Ресурсы") И НЕ Поле.Балансовый Тогда
				СписокПолей.Вставить(Поле.Имя + "Дт", СвойстваПоля);
				СписокПолей.Вставить(Поле.Имя + "Кт", СвойстваПоля);
			ИначеЕсли Раздел = "РегистрыБухгалтерии" И ЭлементМетаданных.Корреспонденция И Лев(Поле.Имя, 8) = "Субконто" Тогда
				СписокПолей.Вставить(Лев(Поле.Имя, 8) + "Дт" + Сред(Поле.Имя, 9), СвойстваПоля);
				СписокПолей.Вставить(Лев(Поле.Имя, 8) + "Кт" + Сред(Поле.Имя, 9), СвойстваПоля);
			ИначеЕсли Раздел = "РегистрыБухгалтерии" И ЭлементМетаданных.Корреспонденция И Лев(Поле.Имя, 11) = "ВидСубконто" Тогда
				СписокПолей.Вставить(Лев(Поле.Имя, 11) + "Дт" + Сред(Поле.Имя, 12), СвойстваПоля);
				СписокПолей.Вставить(Лев(Поле.Имя, 11) + "Кт" + Сред(Поле.Имя, 12), СвойстваПоля);
			Иначе
				СписокПолей.Вставить(Поле.Имя, СвойстваПоля);
			КонецЕсли;
			
			Если ОтборПоПолю И СписокПолей.Количество() > 0 тогда
				Возврат СписокПолей;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СписокПолей;
	
КонецФункции

Процедура ПолучитьИнтерфейсныеОбъектыРекурсивно(МетаданныеПодсистемы, ИнтерфейсныеОбъекты)
	
	Для Каждого Подсистема Из МетаданныеПодсистемы Цикл
		
		Если Подсистема.ВключатьВКомандныйИнтерфейс Тогда
			Для Каждого ОбъектСостава Из Подсистема.Состав Цикл
				ПолноеИмя = ОбъектСостава.ПолноеИмя();
				ИнтерфейсныеОбъекты.Вставить(ПолноеИмя, ПолноеИмя);
			КонецЦикла;
		КонецЕсли;
		
		ПолучитьИнтерфейсныеОбъектыРекурсивно(Подсистема.Подсистемы, ИнтерфейсныеОбъекты);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПравамиДоступа

Процедура ПраваСправочника(СписокПравРаздела)
	
	СписокПравРаздела.Добавить("Чтение");
	СписокПравРаздела.Добавить("Добавление");
	СписокПравРаздела.Добавить("Изменение");
	СписокПравРаздела.Добавить("Удаление");
	СписокПравРаздела.Добавить("Просмотр");
	СписокПравРаздела.Добавить("ИнтерактивноеДобавление");
	СписокПравРаздела.Добавить("Редактирование");
	СписокПравРаздела.Добавить("ИнтерактивноеУдаление");
	СписокПравРаздела.Добавить("ИнтерактивнаяПометкаУдаления");
	СписокПравРаздела.Добавить("ИнтерактивноеСнятиеПометкиУдаления");
	СписокПравРаздела.Добавить("ИнтерактивноеУдалениеПомеченных");
	СписокПравРаздела.Добавить("ВводПоСтроке");
	
КонецПроцедуры

Процедура ПраваДокумента(СписокПравРаздела)
	
	СписокПравРаздела.Добавить("Проведение");
	СписокПравРаздела.Добавить("ОтменаПроведения");
	СписокПравРаздела.Добавить("ИнтерактивноеПроведение");
	СписокПравРаздела.Добавить("ИнтерактивноеПроведениеНеОперативное");
	СписокПравРаздела.Добавить("ИнтерактивнаяОтменаПроведения");
	СписокПравРаздела.Добавить("ИнтерактивноеИзменениеПроведенных");
	
КонецПроцедуры

Процедура ПраваРегистра(СписокПравРаздела)
	
	СписокПравРаздела.Добавить("Чтение");
	СписокПравРаздела.Добавить("Изменение");
	СписокПравРаздела.Добавить("Просмотр");
	СписокПравРаздела.Добавить("Редактирование");
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСоСтатистикойДанных

Функция ПроверитьЗаполненностьРеквизита(ИмяПоля, ИмяТаблицы, ОписаниеТипа = Неопределено, ЗаполненныеРеквизиты = Неопределено)
	
	Если ЗаполненныеРеквизиты = Неопределено Тогда
		ЗаполненныеРеквизиты = Новый Соответствие;
	КонецЕсли;
	
	РеквизитЗаполнен = ЗаполненныеРеквизиты.Получить(ИмяТаблицы + ИмяПоля);
	
	Если Не РеквизитЗаполнен = Неопределено Тогда
		Возврат РеквизитЗаполнен;
	КонецЕсли;
	
	УсловиеПустойСсылки = ?(ОписаниеТипа = Неопределено,
		"",
		"ГДЕ " + ПолучитьУсловиеПустойСсылки(ИмяПоля, ОписаниеТипа));
	
	//@skip-check bsl-ql-hub
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	" + ИмяПоля + "
	|ИЗ " + ИмяТаблицы + " КАК ТаблицаДанных
	|" + УсловиеПустойСсылки;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Результат = Запрос.Выполнить();
	
	РеквизитЗаполнен = Результат.Пустой();
	
	ЗаполненныеРеквизиты.Вставить(ИмяТаблицы + ИмяПоля, РеквизитЗаполнен);
	
	Возврат РеквизитЗаполнен
	
КонецФункции

Функция ПолучитьПакетСсылочныхРеквизитов(ОписаниеОбъекта, НеВыгружаемыеПоля = Неопределено)
	
	ПакетСсылочныхРеквизитов = Новый Соответствие;
	СсылочныеРеквизиты       = Новый Массив;
	
	Для Каждого Реквизит Из ОписаниеОбъекта.Объекты Цикл
		
		Если Реквизит.Раздел = "СтандартныеРеквизиты" И Реквизит.Имя = "Ссылка" Тогда
			Продолжить;
		Иначе
			// Поля отбора формируются по ссылке или измерениям
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НеВыгружаемыеПоля) И НеВыгружаемыеПоля.Получить(Реквизит.ПолноеИмя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Реквизит.ЭтоСсылка Тогда
			СсылочныеРеквизиты.Добавить(Реквизит.ПутьВЗапросе);
		ИначеЕсли Реквизит.Раздел = "ТабличныеЧасти" Тогда 
			
			СсылочныеРеквизитыТЧ = Новый Массив;
			
			Для Каждого РеквизитТЧ Из Реквизит.Объекты Цикл
				Если РеквизитТЧ.ЭтоСсылка Тогда
					СсылочныеРеквизитыТЧ.Добавить(РеквизитТЧ.ПутьВЗапросе);
				КонецЕсли;
			КонецЦикла;
			
			Если СсылочныеРеквизитыТЧ.Количество() > 0 Тогда
				ПакетСсылочныхРеквизитов.Вставить(Реквизит.ПутьВЗапросе, СсылочныеРеквизитыТЧ);
			КонецЕсли;
			
		Иначе
			// Остальные реквизиты не учитываются
		КонецЕсли;
		
	КонецЦикла;
	
	Если СсылочныеРеквизиты.Количество() > 0 Тогда
		ПакетСсылочныхРеквизитов.Вставить(ОписаниеОбъекта.ПутьВЗапросе, СсылочныеРеквизиты);
	КонецЕсли;
	
	Возврат ПакетСсылочныхРеквизитов;
	
КонецФункции

Процедура НайтиСсылкиПоОбъектуМетаданных(ОписаниеОбъекта, ЗначенияОбъекта, КлючиЗаписей, ОписанияОбъектов, НеВыгружаемыеПоля = Неопределено)
	
	ПакетСсылочныхРеквизитов = ПолучитьПакетСсылочныхРеквизитов(ОписаниеОбъекта, НеВыгружаемыеПоля);
	
	НайденныеСсылки = Новый Соответствие;
	
	Для Каждого НаборСсылочныхРеквизитов Из ПакетСсылочныхРеквизитов Цикл
		Запрос = ПолучитьЗапросПоПолямОбъекта(НаборСсылочныхРеквизитов.Ключ, НаборСсылочныхРеквизитов.Значение, Истина, ЗначенияОбъекта);
		//@skip-check query-in-loop
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Для Каждого ИмяРеквизита Из НаборСсылочныхРеквизитов.Значение Цикл
				ЗначениеРеквизита = Выборка[ИмяРеквизита];
				ТипЗначения = ТипЗнч(ЗначениеРеквизита);
				Если ЗначениеЗаполнено(ЗначениеРеквизита) И ЭтоСсылка(ТипЗначения, Истина) Тогда
					ОписаниеОбъектаЗначения = ОписанияОбъектов.Получить(ТипЗначения);
					Если ОписаниеОбъектаЗначения = Неопределено Тогда
						ОбъектМетаданных = ЗначениеРеквизита.Метаданные();
						Раздел = ПолучитьРазделПоОбъекту(ОбъектМетаданных);
						ОписаниеОбъектаЗначения = ПолучитьОписаниеОбъекта(ОбъектМетаданных, Раздел, Новый Соответствие);
						ДобавитьОписаниеОбъектаДляКлючейЗаписи(ОписаниеОбъектаЗначения.ПолноеИмя, КлючиЗаписей, ОписаниеОбъектаЗначения);
						ОписанияОбъектов.Вставить(ТипЗначения, ОписаниеОбъектаЗначения);
					КонецЕсли;
					КлючЗаписиОбъекта = Новый Структура("Ссылка", ЗначениеРеквизита);
					КлючДобавлен = ДобавитьКлючЗаписи(ОписаниеОбъектаЗначения.ПолноеИмя, КлючиЗаписей, КлючЗаписиОбъекта);
					Если КлючДобавлен Тогда
						НайденныеСсылкиПоТипу = НайденныеСсылки.Получить(ТипЗначения);
						Если НайденныеСсылкиПоТипу = Неопределено Тогда
							НайденныеСсылкиПоТипу = Новый Массив;
							НайденныеСсылки.Вставить(ТипЗначения, НайденныеСсылкиПоТипу);
						КонецЕсли;
						НайденныеСсылкиПоТипу.Добавить(ЗначениеРеквизита);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого НайденныеСсылкиПоТипу Из НайденныеСсылки Цикл
		ОписаниеОбъектаЗначения = ОписанияОбъектов.Получить(НайденныеСсылкиПоТипу.Ключ);
		//@skip-check query-in-loop
		НайтиСсылкиПоОбъектуМетаданных(ОписаниеОбъектаЗначения, НайденныеСсылкиПоТипу.Значение, КлючиЗаписей, ОписанияОбъектов);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСТипами

Функция КоличествоСсылочныхТиповВОписанииТипа(ОписаниеТипа)
	
	КоличествоСсылочныхТипов = 0;
	
	Для Каждого Тип Из ОписаниеТипа.Типы() Цикл
		
		Если ЭтоПростойТип(Тип) Тогда
			Продолжить;
		КонецЕсли;
		
		ТипМетаданных = Метаданные.НайтиПоТипу(Тип);
		
		Если ТипМетаданных = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоСсылочныхТипов = КоличествоСсылочныхТипов + 1;
		
	КонецЦикла;
	
	Возврат КоличествоСсылочныхТипов;
	
КонецФункции

Процедура КонкретизироватьТипыУПолей(СписокПолей, ИмяТаблицы)
	
	УстановитьПривилегированныйРежим(ИСТИНА);
	
	ШаблонЗапроса =
	"ВЫБРАТЬ
	|	ТИПЗНАЧЕНИЯ(ТаблицаДанных.ИмяПоля) КАК Тип,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаДанных.ИмяПоля) КАК ТипКоличество,
	|	МАКСИМУМ(ТаблицаДанных.ИмяПоля) КАК ТипМаксимум,
	|	""ИмяПоля"" КАК Имя
	|ИЗ
	|	&ИмяТаблицы КАК ТаблицаДанных
	|ГДЕ
	|	НЕ ТаблицаДанных.ИмяПоля = НЕОПРЕДЕЛЕНО
	|
	|СГРУППИРОВАТЬ ПО
	|	ТИПЗНАЧЕНИЯ(ТаблицаДанных.ИмяПоля)";
	
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "&ИмяТаблицы", ИмяТаблицы);
	ШаблонОшибкаТипаДанных = НСтр("ru = 'Ошибка типа данных: таблица ""%1"", реквизит ""%2""'");
	
	ТекстЗапроса = "";
	
	Для Каждого Поле Из СписокПолей Цикл
		
		Если Поле.Значение.КоличествоСсылочныхТипов <= 1 Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ШаблонЗапроса, "ИмяПоля", Поле.Ключ);
		
		Поле.Значение.Тип = Новый Массив;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		
		Попытка
			//@skip-check query-in-loop
			ДанныеПоТипам = Запрос.Выполнить().Выгрузить();
		Исключение
			ОшибкаТипаДанных = СтрШаблон(ШаблонОшибкаТипаДанных, ИмяТаблицы, Поле.Ключ);
			СообщитьПользователю(ОшибкаТипаДанных);
			Продолжить;
		КонецПопытки;
		
		Для Каждого Строка Из ДанныеПоТипам Цикл
			ПустойТип = Строка.ТипКоличество = 0
				Или Строка.ТипКоличество = 1 И НЕ ЗначениеЗаполнено(Строка.ТипМаксимум);
			СвойстваПоля = СписокПолей.Получить(Строка.Имя);
			СвойстваПоля.Тип.Добавить(Новый Структура("Тип, ПустойТип", Строка.Тип, ПустойТип));
			СписокПолей.Вставить(Строка.Имя, СвойстваПоля);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТипСКвалификаторами(ОписаниеТипа, ТипКвалификатора)
	
	Если ТипКвалификатора = "Строка" Тогда
		Возврат ТипКвалификатора + " (" + Строка(ОписаниеТипа.КвалификаторыСтроки.Длина) + ")";
	ИначеЕсли ТипКвалификатора = "Число" Тогда
		Возврат ТипКвалификатора
			+ " (" + Строка(ОписаниеТипа.КвалификаторыЧисла.Разрядность) + ", "
			+ Формат(ОписаниеТипа.КвалификаторыЧисла.РазрядностьДробнойЧасти, "ЧГ=0;") + ", "
			+ Формат(ОписаниеТипа.КвалификаторыЧисла.ДопустимыйЗнак, "ЧГ=0;") + ")";
	ИначеЕсли ТипКвалификатора = "Дата" Тогда
		Возврат ТипКвалификатора + " (" + Строка(ОписаниеТипа.КвалификаторыДаты.ЧастиДаты) + ")";
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТипСтрокой(Тип)
	
	Если Тип = Тип("Неопределено") Тогда
		ТипСтрокой = "Неопределено";
	ИначеЕсли Тип = Тип("Число") Тогда
		ТипСтрокой = "Число";
	ИначеЕсли Тип = Тип("Строка") Тогда
		ТипСтрокой = "Строка";
	ИначеЕсли Тип = Тип("Дата") Тогда
		ТипСтрокой = "Дата";
	ИначеЕсли Тип = Тип("Булево") Тогда
		ТипСтрокой = "Булево";
	ИначеЕсли Тип = Тип("УникальныйИдентификатор") Тогда
		ТипСтрокой = "УникальныйИдентификатор";
	ИначеЕсли Тип = Тип("ХранилищеЗначения") Тогда
		ТипСтрокой = "ХранилищеЗначения";
	Иначе
		ПолноеИмяМетаданных = ПолучитьПолноеИмяМетаданныхПоТипу(Тип);
		Если ПолноеИмяМетаданных = Неопределено Тогда
			ТипСтрокой = Строка(Тип);
		Иначе
			ТипСтрокой = ПолноеИмяМетаданных;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТипСтрокой;
	
КонецФункции

#КонецОбласти

#Область РаботаСБД

Функция ПолучитьИмяПоляПоИмениПоляХранения(ИмяТаблицы, ИмяПоляХранения)
	
	Если ИмяПоляХранения = "PredefinedID" 
		И ЭтоТаблицаПредопределенныхДанных(ИмяТаблицы) Тогда
		Возврат "ИмяПредопределенныхДанных";
	ИначеЕсли ИмяПоляХранения = "Type" И Лев(ИмяТаблицы, 22) = "ПланВидовХарактеристик" Тогда
		Возврат "ТипЗначения";
	ИначеЕсли ИмяПоляХранения = "RecordKind" И Лев(ИмяТаблицы, 17) = "РегистрНакопления" Тогда
		Возврат "ВидДвижения";
	Иначе
		Возврат "";
	КонецЕсли;
		
КонецФункции

#КонецОбласти

#Область РаботаСБитымиСсылками

Функция ПолучитьУсловиеБитойСсылки(ИмяПоля, ОписаниеТипа)
	
	ШаблонУсловияБитойСложнойСсылки =
		"КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДанных.%ИмяПоля%) = ТИП(%ТипМетаданных%) 
		|	ТОГДА ВЫРАЗИТЬ(ТаблицаДанных.%ИмяПоля% КАК %ТипМетаданных%).Ссылка ЕСТЬ NULL
		|";
	
	ШаблонУсловияБитойСсылки =
		"ВЫРАЗИТЬ(ТаблицаДанных.%ИмяПоля% КАК %ТипМетаданных%).Ссылка ЕСТЬ NULL";
	
	ЭтоСсылочныйРеквизит  = ЛОЖЬ;
	УсловиеЗапроса        = "";
	УсловиеБитойСсылки    = "";
	УсловиеНеПустойСсылки = "НЕ " + ПолучитьУсловиеПустойСсылки(ИмяПоля, ОписаниеТипа);
	
	Если ТипЗнч(ОписаниеТипа) = Тип("ОписаниеТипов") Тогда
		Типы = ОписаниеТипа.Типы();
	Иначе
		Типы = ОписаниеТипа;
	КонецЕсли;
	
	Для Каждого Тип Из Типы Цикл
		
		ТипДляУсловия = ?(ТипЗнч(Тип) = Тип("Структура"), Тип.Тип, Тип);
		ПустойТип     = ?(ТипЗнч(Тип) = Тип("Структура"), Тип.ПустойТип, Ложь);
		
		Если ЭтоПростойТип(ТипДляУсловия) Тогда
			Продолжить;
		КонецЕсли;
		
		ПолноеИмяМетаданных = ПолучитьПолноеИмяМетаданныхПоТипу(ТипДляУсловия);
		
		Если ПолноеИмяМетаданных = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтоСсылочныйРеквизит = ИСТИНА;
		
		Если Типы.Количество() > 1 И НЕ ПустойТип Тогда
			УсловиеБитойСсылки = УсловиеБитойСсылки + Символы.ПС + СтрЗаменить(ШаблонУсловияБитойСложнойСсылки, "%ТипМетаданных%", ПолноеИмяМетаданных);
		ИначеЕсли Типы.Количество() = 1 Тогда
			УсловиеБитойСсылки = СтрЗаменить(ШаблонУсловияБитойСсылки, "%ТипМетаданных%", ПолноеИмяМетаданных);
		Иначе
			// Поля с пустым значением на битые ссылки не проверяем
		КонецЕсли;
		
	КонецЦикла;
	
	Если Типы.Количество() > 1 И ЗначениеЗаполнено(УсловиеБитойСсылки) Тогда
		УсловиеБитойСсылки = "ВЫБОР " + УсловиеБитойСсылки + Символы.ПС + "ИНАЧЕ ЛОЖЬ КОНЕЦ";
	КонецЕсли;
	
	Если ЭтоСсылочныйРеквизит И ЗначениеЗаполнено(УсловиеБитойСсылки) Тогда
		УсловиеЗапроса = УсловиеНеПустойСсылки + Символы.ПС
						+ "И " + УсловиеБитойСсылки;
		УсловиеЗапроса = СтрЗаменить(УсловиеЗапроса, "%ИмяПоля%", ИмяПоля);
	КонецЕсли;
	
	Возврат УсловиеЗапроса;
	
КонецФункции

Функция ПолучитьУсловиеПустойСсылки(ИмяПоля, ОписаниеТипа)
	
	ШаблонУсловиеЗапроса = "ТаблицаДанных.%1 В(%2)";
	ШаблонПустаяСсылка   = "ЗНАЧЕНИЕ(%1.ПустаяСсылка)";
	
	ЭтоСсылочныйРеквизит = Ложь;
	УсловиеЗапроса       = "";
	ПустыеСсылки         = Новый Массив;
	ПустыеСсылки.Добавить("НЕОПРЕДЕЛЕНО");
	
	Если ТипЗнч(ОписаниеТипа) = Тип("ОписаниеТипов") Тогда
		Типы = ОписаниеТипа.Типы();
	Иначе
		Типы = ОписаниеТипа;
	КонецЕсли;
	
	Для Каждого Тип Из Типы Цикл
		
		ТипДляУсловия = ?(ТипЗнч(Тип) = Тип("Структура"), Тип.Тип, Тип);
		
		Если ЭтоПростойТип(ТипДляУсловия) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтоСсылочныйРеквизит = Истина;
		ПолноеИмяМетаданных  = ПолучитьПолноеИмяМетаданныхПоТипу(ТипДляУсловия);
		ПустыеСсылки.Добавить(СтрШаблон(ШаблонПустаяСсылка, ПолноеИмяМетаданных));
		
	КонецЦикла;
	
	Если ЭтоСсылочныйРеквизит Тогда
		УсловиеЗапроса = СтрШаблон(ШаблонУсловиеЗапроса, ИмяПоля, СтрСоединить(ПустыеСсылки, ","));
	КонецЕсли;
	
	Возврат УсловиеЗапроса;
	
КонецФункции

Процедура ЗаполнитьТаблицуБитыхСсылокПоОбъекту(ТаблицаБитыхСсылок, ЭлементМетаданных, ИмяПоля, ОбъектнаяТаблица, Раздел, ОсновнойРаздел, Порция, Очистить)
	
	ШаблонТекстаЗапроса = 
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	&ТипМетаданных КАК ТаблицаДанных
	|ГДЕ
	|	&УсловиеЗапроса";
	
	УсловиеЗапроса = "";
	
	Если ТипЗнч(ЭлементМетаданных) = Тип("ОписаниеСтандартнойТабличнойЧасти") Тогда
		ПолноеИмяТаблицы = ОсновнойРаздел.ПолноеИмя() + "." + ЭлементМетаданных.Имя;
	Иначе
		ПолноеИмяТаблицы = ЭлементМетаданных.ПолноеИмя() + ?(Раздел = "РегистрыБухгалтерии", ".ДвиженияССубконто", "");
		ПолноеИмяТаблицы = СтрЗаменить(ПолноеИмяТаблицы, ".ТабличнаяЧасть.", ".");
	КонецЕсли;
	
	ПодчиненРегистратору = Ложь;
	Периодический = Ложь;
	Если НЕ ОбъектнаяТаблица
		И (Раздел = "РегистрыНакопления" ИЛИ Раздел = "РегистрыБухгалтерии" ИЛИ Раздел = "РегистрыРасчета") Тогда
		ПодчиненРегистратору = Истина;
	ИначеЕсли НЕ ОбъектнаяТаблица Тогда
		ПодчиненРегистратору = ЭлементМетаданных.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору;
		Периодический = ЭлементМетаданных.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический;
	КонецЕсли;
	
	СписокПолей = ПолучитьСписокПолейТаблицы(Раздел, ЭлементМетаданных, ИмяПоля);
	
	КонкретизироватьТипыУПолей(СписокПолей, ПолноеИмяТаблицы);
	
	Для Каждого Поле Из СписокПолей Цикл
		УсловиеПустаяСсылка = ПолучитьУсловиеБитойСсылки(Поле.Ключ, Поле.Значение.Тип);
		Если ПустаяСтрока(УсловиеПустаяСсылка) Тогда
			Продолжить;
		КонецЕсли;
		УсловиеЗапроса = УсловиеЗапроса + Символы.ПС + Символы.Таб + ?(ПустаяСтрока(УсловиеЗапроса), "", " ИЛИ ") + УсловиеПустаяСсылка;
	КонецЦикла;
	
	Если ПустаяСтрока(УсловиеЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(ИСТИНА);
	
	ТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "&ТипМетаданных", ПолноеИмяТаблицы);
	ТекстаЗапроса = СтрЗаменить(ТекстаЗапроса, "&УсловиеЗапроса", УсловиеЗапроса);
	Если ЗначениеЗаполнено(Порция) Тогда
		//@skip-check bsl-ql-hub
		ТекстаЗапроса = СтрЗаменить(ТекстаЗапроса, "ВЫБРАТЬ", "ВЫБРАТЬ ПЕРВЫЕ " + Формат(Порция, "ЧГ=0;"));
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации("Помощник для работы с конфигурацией.Поиск битых ссылок",
		УровеньЖурналаРегистрации.Информация,,,
		ТекстаЗапроса);
	
	Запрос = Новый Запрос(ТекстаЗапроса);
	
	ТекущееНачала = ТекущаяДатаСеанса();
	
	Результат = Запрос.Выполнить();
	
	ВремяПоиска = (ТекущаяДатаСеанса() - ТекущееНачала)/60;
	МаксимальноеВремяИсполненияЗапроса = 2; // Минуты
	
	Если ВремяПоиска > МаксимальноеВремяИсполненияЗапроса Тогда
		ШаблонСообщения = НСтр("ru = 'Время выполнения запроса по таблице %1
		|
		|%2
		|
		|составило %3 минут'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПолноеИмяТаблицы, ТекстаЗапроса, Формат(ВремяПоиска, "ЧДЦ=3; ЧН=0.000; ЧГ=0"));
		СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ЧислоОшибочныхОпределенийБитыхСсылок = 0;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОшибочноеОпределениеБитыхСсылок = Истина;
		
		Для Каждого Колонка Из Результат.Колонки Цикл
			
			Если ТипЗнч(Выборка[Колонка.Имя]) = Тип("РезультатЗапроса") Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ Колонка.Имя = "ТочкаМаршрута" И НЕ Лев(Выборка[Колонка.Имя], 18) = "<Объект не найден>" Тогда
				Продолжить;
			КонецЕсли;
			
			Если Колонка.Имя = "ТочкаМаршрута" И ЗначениеЗаполнено(Лев(Выборка[Колонка.Имя], 18)) Тогда
				Продолжить;
			КонецЕсли;
			
			ОшибочноеОпределениеБитыхСсылок = Ложь;
			
			Строка = ТаблицаБитыхСсылок.Добавить();
			Строка.Раздел           = Раздел;
			Строка.ИмяТаблицы       = ЭлементМетаданных.Имя;
			Строка.ПолноеИмяТаблицы = ПолноеИмяТаблицы;
			Строка.ВремяПоиска      = ВремяПоиска;
			
			Если ОбъектнаяТаблица Тогда
				Строка.Ключ = Выборка.Ссылка;
			Иначе
				
				Строка.Ключ = Новый СписокЗначений;
				Если ПодчиненРегистратору Тогда
					Строка.Ключ.Добавить(Выборка.Регистратор, "Регистратор");
					Строка.Ключ.Добавить(Выборка.НомерСтроки, "НомерСтроки");
				КонецЕсли;
				
				Если Раздел = "РегистрыСведений" Тогда
					Для Каждого Поле Из ЭлементМетаданных.Измерения Цикл
						Строка.Ключ.Добавить(Выборка[Поле.Имя], Поле.Имя);
					КонецЦикла;
				КонецЕсли;
				
				Если НЕ ПодчиненРегистратору И Периодический Тогда
					Строка.Ключ.Добавить(Выборка.Период, "Период");
				КонецЕсли;
				
			КонецЕсли;
			
			Строка.ИмяПоля = Колонка.Имя;
			Строка.БитаяСсылка  = Выборка[Колонка.Имя];
			
			Если Очистить И ТипЗнч(Строка.Ключ) = Тип("СписокЗначений") Тогда
				ИсправитьБитуюСсылкуВЗаписи(Строка.Ключ, Строка.Раздел, Строка.ИмяТаблицы, Строка.ИмяПоля);
			ИначеЕсли Очистить Тогда
				ИмяТаблицы = "";
				Если СтрЧислоВхождений(Строка.ПолноеИмяТаблицы, ".") > 1 Тогда
					ИмяТаблицы = Строка.ИмяТаблицы;
				КонецЕсли;
				ИсправитьБитуюСсылкуВОбъекте(Строка.Ключ, Строка.БитаяСсылка, Строка.ИмяПоля, ИмяТаблицы);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ОшибочноеОпределениеБитыхСсылок = Истина Тогда
			ЧислоОшибочныхОпределенийБитыхСсылок = ЧислоОшибочныхОпределенийБитыхСсылок + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЧислоОшибочныхОпределенийБитыхСсылок > 0 Тогда
		ТекстОшибки = НСтр("ru = 'Ошибочное определение битых ссылок по таблице:'") + " " + ПолноеИмяТаблицы
			+ " " + Формат(ЧислоОшибочныхОпределенийБитыхСсылок, "ЧГ=0") + " " + НСтр("ru = 'раз'");
		СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Выгрузка

Функция ПолучитьДанные(ОбъектыМетаданных, ТранспортДанных)
	
	Результат = Истина;
	
	Попытка
		ОбъектыМетаданныхКВыгрузке = ОбъектыМетаданных.ПолучитьЭлементы();
		ПолучитьРазрешенныеТипыКВыгрузке(ОбъектыМетаданных);
		Для Каждого ЭлементОбъектовМетаданных Из ОбъектыМетаданныхКВыгрузке Цикл
			Если Не ЭлементОбъектовМетаданных.Выгружать Тогда
				Продолжить;
			КонецЕсли;
			//@skip-check query-in-loop
			ПолучитьДанныеОбъектаМетаданных(ЭлементОбъектовМетаданных, ТранспортДанных);
		КонецЦикла;
		Если ТранспортДанных.Тип = "ВыгрузкаПоСсылке" Тогда
			Для Каждого ЭлементОбъектовМетаданных Из ОбъектыМетаданныхКВыгрузке Цикл
				ЗаписатьКлючиЗаписиПоТипуВТранспортДанных(ТранспортДанных, ЭлементОбъектовМетаданных);
			КонецЦикла;
		КонецЕсли;
	Исключение
		Результат = Ложь;
		СтрокаОписанияОшибки = ОписаниеОшибки();
		ШаблонСообщения = НСтр("ru = 'При выгрузке объекта %1(%2) возникла ошибка:
				|%3'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, "При получение данных", "", СтрокаОписанияОшибки);
		СообщитьПользователю(ТекстСообщения);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ИнициализироватьКлючиЗаписей()
	
	Возврат Новый Соответствие;
	
КонецФункции

Функция ПолучитьКлючиЗаписейПоТипу(КлючиЗаписей, ПолноеИмя)
	
	КлючиЗаписиПоТипу = КлючиЗаписей.Получить(ПолноеИмя);
	Если КлючиЗаписиПоТипу = Неопределено Тогда
		КлючиЗаписиПоТипу = Новый Соответствие;
		КлючиЗаписей.Вставить(ПолноеИмя, КлючиЗаписиПоТипу);
	КонецЕсли;
	
	Возврат КлючиЗаписиПоТипу;
	
КонецФункции

Функция ДобавитьКлючЗаписи(ПолноеИмя, КлючиЗаписей, КлючЗаписиОбъекта)
	
	Результат = Ложь;
	
	КлючиЗаписейПоТипу = ПолучитьКлючиЗаписейПоТипу(КлючиЗаписей, ПолноеИмя);
	КлючЗаписи = ИнициализироватьКлючЗаписи(ПолноеИмя, КлючЗаписиОбъекта);
	
	Если КлючиЗаписейПоТипу.Получить(КлючЗаписи.Ключ) = Неопределено Тогда
		КлючиЗаписейПоТипу.Вставить(КлючЗаписи.Ключ, КлючЗаписи.Значение);
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДобавитьОписаниеОбъектаДляКлючейЗаписи(ПолноеИмя, КлючиЗаписей, ОписаниеОбъекта)
	
	Результат = Ложь;
	
	КлючиЗаписейПоТипу = ПолучитьКлючиЗаписейПоТипу(КлючиЗаписей, ПолноеИмя);
	
	Если КлючиЗаписейПоТипу.Получить("ОписаниеОбъекта") = Неопределено Тогда
		КлючиЗаписейПоТипу.Вставить("ОписаниеОбъекта", ОписаниеОбъекта);
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИнициализироватьКлючЗаписи(ПолноеИмя, КлючЗаписиОбъекта)
	
	КлючЗаписи = Новый Структура;
	
	Если ЭтоТаблицаСсылочныхДанных(ПолноеИмя) Тогда
		КлючЗаписи.Вставить("Ключ",     КлючЗаписиОбъекта.Ссылка);
		КлючЗаписи.Вставить("Значение", КлючЗаписиОбъекта.Ссылка);
	ИначеЕсли ЭтоТаблицаНабораДанных(ПолноеИмя) Тогда
		ХешСтруктуры = ПолучитьХешСтруктуры(КлючЗаписиОбъекта);
		КлючЗаписи.Вставить("Ключ",     ХешСтруктуры);
		КлючЗаписи.Вставить("Значение", КлючЗаписиОбъекта);
	ИначеЕсли ЭтоКонстанта(ПолноеИмя) Тогда
		КлючЗаписи.Вставить("Ключ",     ПолноеИмя);
		КлючЗаписи.Вставить("Значение", КлючЗаписиОбъекта);
	КонецЕсли;
	
	Возврат КлючЗаписи;
	
КонецФункции

Функция ПолучитьХешСтруктуры(Структура)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Структура);
	ТекстСтруктураXDTO = ЗаписьXML.Закрыть();
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
	ХешированиеДанных.Добавить(ТекстСтруктураXDTO);
	
	Возврат Base64Строка(ХешированиеДанных.ХешСумма);
	
КонецФункции

Процедура ОчиститьКлючЗаписи(ПолноеИмя, КлючиЗаписей, КлючЗаписиОбъекта)
	
	КлючЗаписи = ИнициализироватьКлючЗаписи(ПолноеИмя, КлючЗаписиОбъекта);
	
	КлючиЗаписейПоТипу = ПолучитьКлючиЗаписейПоТипу(КлючиЗаписей, ПолноеИмя);
	КлючиЗаписейПоТипу.Удалить(КлючЗаписи.Ключ);
	
КонецПроцедуры

Процедура УдалитьКлючиЗаписей(ПолноеИмя, КлючиЗаписей, КлючЗаписиОбъекта = Неопределено)
	
	ШаблонСообщения   = НСтр("ru = 'Всего удалено записей: %1'");
	КоличествоУдаленных = 0;
	
	Если Не КлючЗаписиОбъекта = Неопределено Тогда
		КлючЗаписи = ИнициализироватьКлючЗаписи(ПолноеИмя, КлючЗаписиОбъекта);
		КлючиЗаписейПоТипу  = ПолучитьКлючиЗаписейПоТипу(КлючиЗаписей, ПолноеИмя);
		ЗначениеКлючаЗаписи = КлючиЗаписейПоТипу.Получить(КлючЗаписи.Ключ);
		УдалитьЗаписьПоКлючу(ПолноеИмя, ЗначениеКлючаЗаписи);
		КоличествоУдаленных = КоличествоУдаленных + 1;
	Иначе
		Для Каждого КлючиЗаписейПоТипу Из КлючиЗаписей Цикл
			Для Каждого КлючЗаписи Из КлючиЗаписейПоТипу.Значение Цикл
				Если ЗначениеЗаполнено(ПолноеИмя) И КлючиЗаписейПоТипу.Ключ <> ПолноеИмя Тогда
					Продолжить;
				КонецЕсли;
				Если КлючиЗаписейПоТипу.Ключ = "ОписаниеОбъекта" Тогда
					Продолжить;
				КонецЕсли;
				УдалитьЗаписьПоКлючу(КлючиЗаписейПоТипу.Ключ, КлючЗаписи.Значение);
				КоличествоУдаленных = КоличествоУдаленных + 1;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если КоличествоУдаленных > 0 Тогда
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Формат(КоличествоУдаленных, "ЧГ=0;"));
		СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьЗаписьПоКлючу(ПолноеИмя, ЗначениеКлючаЗаписи)
	
	ШаблонСообщения   = НСтр("ru = 'Удалена запись ""%1"" по ключам: %2'");
	ШаблонКлючаЗаписи = НСтр("ru = '%1 = %2'");
	КлючиЗаписи       = "";
	
	Если ЭтоТаблицаСсылочныхДанных(ПолноеИмя) Тогда
		ОбъектДанных = ЗначениеКлючаЗаписи.ПолучитьОбъект();
		ОбъектДанных.ПометкаУдаления = Истина;
		ОбъектДанных.ОбменДанными.Загрузка = Истина;
		ОбъектДанных.Записать();
		КлючиЗаписи = КлючиЗаписи + Символы.ПС + СтрШаблон(ШаблонКлючаЗаписи, "Ссылка", Строка(ОбъектДанных.Ссылка));
	ИначеЕсли ЭтоТаблицаНабораДанных(ПолноеИмя) Тогда
		НаборЗаписей = МенеджерОбъектаПоПолномуИмени(ПолноеИмя).СоздатьНаборЗаписей(); // РегистрСведенийНаборЗаписей
		Для Каждого ЭлементОтбора Из НаборЗаписей.Отбор Цикл
			ЭлементОтбора.Установить(ЗначениеКлючаЗаписи[ЭлементОтбора.Имя]);
			КлючиЗаписи = КлючиЗаписи + Символы.ПС + СтрШаблон(ШаблонКлючаЗаписи, ЭлементОтбора.Имя, Строка(ЗначениеКлючаЗаписи[ЭлементОтбора.Имя]));
		КонецЦикла;
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать(Истина);
	ИначеЕсли ЭтоКонстанта(ПолноеИмя) Тогда
		МенеджерЗначения = МенеджерОбъектаПоПолномуИмени(ПолноеИмя).СоздатьМенеджерЗначения(); // КонстантаМенеджерЗначения
		МенеджерЗначения.Значение = Неопределено;
		МенеджерЗначения.Записать();
	КонецЕсли;
	
	ТекстСообщения = СтрШаблон(ШаблонСообщения, ПолноеИмя, КлючиЗаписи);
	СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

Функция ПроверитьОбъектДанных(ОбъектДанных, ЭлементОбъектовМетаданных)
	
	Результат = Истина;
	
	Если ЭтоПланОбмена(ЭлементОбъектовМетаданных.ПолноеИмя)
		И ОбъектДанных.ЭтотУзел Тогда
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработкаОбъектаДанныхПередЗаписью(ОбъектДанных, ЭлементОбъектовМетаданных)
	
	Если ЭтоТаблицаПредопределенныхДанных(ЭлементОбъектовМетаданных.ПолноеИмя) Тогда
		УдалитьДубльПредопределенного(ОбъектДанных, ЭлементОбъектовМетаданных);
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьДубльПредопределенного(ОбъектДанных, ЭлементОбъектовМетаданных)
	
	Если Не ОбъектДанных.Предопределенный Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДанных.Ссылка КАК Ссылка
	|ИЗ
	|	&ТаблицаДанных КАК ТаблицаДанных
	|ГДЕ
	|	ТаблицаДанных.ИмяПредопределенныхДанных = &ИмяПредопределенныхДанных
	|	И НЕ ТаблицаДанных.Ссылка = &Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаДанных", ЭлементОбъектовМетаданных.ПолноеИмя);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ИмяПредопределенныхДанных", ОбъектДанных.ИмяПредопределенныхДанных);
	Запрос.УстановитьПараметр("Ссылка",                    ОбъектДанных.Ссылка);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерОбъекта = МенеджерОбъектаПоПолномуИмени(ЭлементОбъектовМетаданных.ПолноеИмя);
	
	ПредопределенныйОбъект = МенеджерОбъекта[ОбъектДанных.ИмяПредопределенныхДанных].ПолучитьОбъект();
	ПредопределенныйОбъект.ИмяПредопределенныхДанных = "";
	ПредопределенныйОбъект.ПометкаУдаления = Истина;
	ПредопределенныйОбъект.ОбменДанными.Загрузка = Истина;
	Если ЭлементОбъектовМетаданных.Раздел = "ПланыСчетов" Тогда
		ПредопределенныйОбъект.ВидыСубконто.Очистить();
	КонецЕсли;
	ПредопределенныйОбъект.Записать();
	
КонецПроцедуры

Процедура ПолучитьДанныеОбъектаМетаданных(ЭлементОбъектовМетаданных, ТранспортДанных)
	
	Если ЭлементОбъектовМетаданных.Раздел = "Константы" Тогда
		ПолучитьКонстанты(ЭлементОбъектовМетаданных, ТранспортДанных);
	ИначеЕсли ЭтоТаблицаНабораДанных(ЭлементОбъектовМетаданных.ПолноеИмя) Тогда
		ПолучитьНаборДанныхРегистра(ЭлементОбъектовМетаданных, ТранспортДанных);
	ИначеЕсли ЭлементОбъектовМетаданных.Раздел = "Последовательности"
		ИЛИ ЭлементОбъектовМетаданных.Раздел = "Перечисления" Тогда
		Возврат;
	Иначе
		ПолучитьДанныеОбъектногоТипа(ЭлементОбъектовМетаданных, ТранспортДанных);
	КонецЕсли;
	
КонецПроцедуры

Функция ИнициализироватьСериализаторXDTOАннотацияТипов()
	
	ТипыСАннотациейСсылок = ПредопределенныеТипыПриВыгрузке();
	
	Если ТипыСАннотациейСсылок.Количество() > 0 Тогда
		Фабрика = ПолучитьФабрикуСУказаниемТипов(ТипыСАннотациейСсылок);
		Сериализатор = Новый СериализаторXDTO(Фабрика);
	Иначе
		Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
	КонецЕсли;
	
	Возврат Сериализатор;
	
КонецФункции

Функция ИнициализироватьТранспортДанных(Тип)
	
	ТранспортДанных = Новый Структура;
	ТранспортДанных.Вставить("Тип",          Тип);
	ТранспортДанных.Вставить("Сериализатор", ИнициализироватьСериализаторXDTOАннотацияТипов());
	Если Тип = "Выгрузка" Или Тип = "ВыгрузкаПоСсылке" Тогда
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку();
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ЗаписьXML.ЗаписатьНачалоЭлемента("Config");
		ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("v8", "http://v8.1c.ru/8.1/data/enterprise/current-config");
		ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xs", "http://www.w3.org/2001/XMLSchema");
		ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
		ЗаписьXML.ЗаписатьНачалоЭлемента("Data");
		ТранспортДанных.Вставить("ЗаписьXML", ЗаписьXML);
	КонецЕсли;
	
	Если Тип = "Загрузка" Или Тип = "ВыгрузкаПоСсылке" Тогда
		ТранспортДанных.Вставить("КлючиЗаписей", ИнициализироватьКлючиЗаписей());
	КонецЕсли;
	
	Возврат ТранспортДанных;
	
КонецФункции

Процедура ЗаписатьКлючиЗаписиПоТипуВТранспортДанных(ТранспортДанных, ЭлементОбъектовМетаданных)
	
	КлючиЗаписейПоТипу = ТранспортДанных.КлючиЗаписей.Получить(ЭлементОбъектовМетаданных.ПолноеИмя);
	Если КлючиЗаписейПоТипу = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОбъекта = КлючиЗаписейПоТипу.Получить("ОписаниеОбъекта");
	ПараметрыВыгрузки = ПреобразоватьСтрокуВПараметрыВыгрузки(ЭлементОбъектовМетаданных.ПараметрыВыгрузки);
	
	Для Каждого КлючЗаписи Из КлючиЗаписейПоТипу Цикл
		Если КлючЗаписи.Ключ = "ОписаниеОбъекта" Тогда
			Продолжить;
		КонецЕсли;
		ЗаписатьКлючЗаписиВТранспортДанных(ТранспортДанных, КлючЗаписи.Значение, ОписаниеОбъекта, ПараметрыВыгрузки.НеВыгружаемыеПоля);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьКлючЗаписиВТранспортДанных(ТранспортДанных, КлючЗаписи, ОписаниеОбъекта, НеВыгружаемыеПоля)
	
	Если ЭтоТаблицаНабораДанных(ОписаниеОбъекта.ПолноеИмя) Тогда
		Попытка
			НаборЗаписей = МенеджерОбъектаПоПолномуИмени(ОписаниеОбъекта.ПолноеИмя).СоздатьНаборЗаписей();
			Отбор        = НаборЗаписей.Отбор;
			Для Каждого КлючОтбора Из КлючЗаписи Цикл
				Отбор[КлючОтбора.Ключ].Значение      = КлючОтбора.Значение;
				Отбор[КлючОтбора.Ключ].ВидСравнения  = ВидСравнения.Равно;
				Отбор[КлючОтбора.Ключ].Использование = Истина;
			КонецЦикла;
			НаборЗаписей.Прочитать();
			Если ПроверитьСсылочнуюЦелостностьВыгружаемыхДанных(НаборЗаписей, ОписаниеОбъекта, НеВыгружаемыеПоля, ТранспортДанных.Тип = "ВыгрузкаПоСсылке") Тогда
				ТранспортДанных.Сериализатор.ЗаписатьXML(ТранспортДанных.ЗаписьXML, НаборЗаписей);
			КонецЕсли;
		Исключение
			СтрокаОписанияОшибки = ОписаниеОшибки();
			ШаблонСообщения = НСтр("ru = 'При выгрузке регистра %1 возникла ошибка:
				|%3'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ОписаниеОбъекта.ПолноеИмя, СтрокаОписанияОшибки);
			СообщитьПользователю(ТекстСообщения);
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
	ИначеЕсли ЭтоТаблицаСсылочныхДанных(ОписаниеОбъекта.ПолноеИмя) Тогда
		ОбъектДанных = КлючЗаписи.ПолучитьОбъект();
		Попытка
			//@skip-check query-in-loop
			Если ПроверитьСсылочнуюЦелостностьВыгружаемыхДанных(ОбъектДанных, ОписаниеОбъекта, НеВыгружаемыеПоля, ТранспортДанных.Тип = "ВыгрузкаПоСсылке") Тогда
				ТранспортДанных.Сериализатор.ЗаписатьXML(ТранспортДанных.ЗаписьXML, ОбъектДанных);
				//Для Каждого Движение Из ОбъектДанных.Движения Цикл
				//	Движение.Прочитать();
				//	ТранспортДанных.Сериализатор.ЗаписатьXML(ТранспортДанных.ЗаписьXML, Движение);
				//КонецЦикла;
			КонецЕсли;
		Исключение
			СтрокаОписанияОшибки = ОписаниеОшибки();
			ШаблонСообщения = НСтр("ru = 'При выгрузке объекта %1(%2) возникла ошибка:
				|%3'");
			СтрокаСообщения = СтрШаблон(ШаблонСообщения, ОбъектДанных, ТипЗнч(ОбъектДанных), СтрокаОписанияОшибки);
			СообщитьПользователю(СтрокаСообщения);
			ВызватьИсключение СтрокаСообщения;
		КонецПопытки;
	ИначеЕсли ЭтоКонстанта(ОписаниеОбъекта.ПолноеИмя) Тогда
		Попытка
			МенеджерЗначения = МенеджерОбъектаПоПолномуИмени(КлючЗаписи).СоздатьМенеджерЗначения();
			МенеджерЗначения.Прочитать();
			ТранспортДанных.Сериализатор.ЗаписатьXML(ТранспортДанных.ЗаписьXML, МенеджерЗначения);
		Исключение
			СтрокаОписанияОшибки = ОписаниеОшибки();
			ШаблонСообщения = НСтр("ru = 'При выгрузке константы %1 возникла ошибка:
				|%2'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ОписаниеОбъекта.ПолноеИмя, СтрокаОписанияОшибки);
			СообщитьПользователю(ТекстСообщения);
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьКонстанты(ЭлементОбъектовМетаданных, ТранспортДанных)
	
	ОбъектМетаданных  = Метаданные.НайтиПоПолномуИмени(ЭлементОбъектовМетаданных.ПолноеИмя);
	ОписаниеОбъекта = ПолучитьОписаниеОбъекта(ОбъектМетаданных, ЭлементОбъектовМетаданных.Раздел, Новый Соответствие);
	
	Если ТранспортДанных.Тип = "Выгрузка" Тогда
		ЗаписатьКлючЗаписиВТранспортДанных(ТранспортДанных, ОписаниеОбъекта.ПолноеИмя, ОписаниеОбъекта, "")
	ИначеЕсли ТранспортДанных.Тип = "Загрузка" Или ТранспортДанных.Тип = "ВыгрузкаПоСсылке" Тогда
		ДобавитьКлючЗаписи(ЭлементОбъектовМетаданных.ПолноеИмя, ТранспортДанных.КлючиЗаписей, ОписаниеОбъекта.ПолноеИмя);
		Если ТранспортДанных.Тип = "ВыгрузкаПоСсылке" Тогда
			ДобавитьОписаниеОбъектаДляКлючейЗаписи(ЭлементОбъектовМетаданных.ПолноеИмя, ТранспортДанных.КлючиЗаписей, ОписаниеОбъекта);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьНаборДанныхРегистра(ЭлементОбъектовМетаданных, ТранспортДанных)
	
	НаборЗаписей   = МенеджерОбъектаПоПолномуИмени(ЭлементОбъектовМетаданных.ПолноеИмя).СоздатьНаборЗаписей();
	Отбор          = НаборЗаписей.Отбор;
	
	СхемаКомпоновкиДанных = ПодготовитьСхемуКомпоновкиДанных(ЭлементОбъектовМетаданных);
	НастройкиКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
	ПараметрыВыгрузки = ПреобразоватьСтрокуВПараметрыВыгрузки(ЭлементОбъектовМетаданных.ПараметрыВыгрузки);
	ЗагрузитьНастройкиКомпоновкиДанных(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, ПараметрыВыгрузки.НастройкиВыгрузки, Новый УникальныйИдентификатор);
	Данные = ВывестиСхемуКомпоновкиДанных(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных);
	
	ОписаниеОбъекта   = Неопределено;
	ОписанияОбъектов  = Новый Соответствие;
	ЗначенияОбъекта   = Новый ТаблицаЗначений;
	Для Каждого ЭлементОтбора Из Отбор Цикл
		ЗначенияОбъекта.Колонки.Добавить(ЭлементОтбора.Имя, ЭлементОтбора.ТипЗначения);
	КонецЦикла;
	ИспользуетсяОтбор = ИспользуетсяОтборСКД(ПараметрыВыгрузки.НастройкиВыгрузки);
	
	Для Каждого Строка Из Данные Цикл
		
		Если ОписаниеОбъекта = Неопределено Тогда
			ОбъектМетаданных  = Метаданные.НайтиПоПолномуИмени(ЭлементОбъектовМетаданных.ПолноеИмя);
			ОписаниеОбъекта = ПолучитьОписаниеОбъекта(ОбъектМетаданных, ЭлементОбъектовМетаданных.Раздел, Новый Соответствие);
			Если ТранспортДанных.Тип = "ВыгрузкаПоСсылке" Тогда
				ДобавитьОписаниеОбъектаДляКлючейЗаписи(ЭлементОбъектовМетаданных.ПолноеИмя, ТранспортДанных.КлючиЗаписей, ОписаниеОбъекта);
			КонецЕсли;
		КонецЕсли;
		
		// TO DO: Проверить корректность отбора на регистр расчета
		КлючЗаписиОбъекта = Новый Структура;
		Для Каждого ЭлементОтбора Из НаборЗаписей.Отбор Цикл
			КлючЗаписиОбъекта.Вставить(ЭлементОтбора.Имя, Строка[ЭлементОтбора.Имя]);
		КонецЦикла;
		
		Если НаборЗаписей.Отбор.Количество() > 0
			И ИспользуетсяОтбор Тогда
			НоваяСтрока = ЗначенияОбъекта.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЕсли;
		
		Если ТранспортДанных.Тип = "Выгрузка" Тогда
			ЗаписатьКлючЗаписиВТранспортДанных(ТранспортДанных, КлючЗаписиОбъекта, ОписаниеОбъекта, ПараметрыВыгрузки.НеВыгружаемыеПоля);
		ИначеЕсли ТранспортДанных.Тип = "Загрузка" Или ТранспортДанных.Тип = "ВыгрузкаПоСсылке" Тогда
			ДобавитьКлючЗаписи(ЭлементОбъектовМетаданных.ПолноеИмя, ТранспортДанных.КлючиЗаписей, КлючЗаписиОбъекта);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТранспортДанных.Тип = "ВыгрузкаПоСсылке" И Не ОписаниеОбъекта = Неопределено Тогда
		НайтиСсылкиПоОбъектуМетаданных(ОписаниеОбъекта, ЗначенияОбъекта, ТранспортДанных.КлючиЗаписей, ОписанияОбъектов, ПараметрыВыгрузки.НеВыгружаемыеПоля);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьДанныеОбъектногоТипа(ЭлементОбъектовМетаданных, ТранспортДанных)
	
	СхемаКомпоновкиДанных = ПодготовитьСхемуКомпоновкиДанных(ЭлементОбъектовМетаданных);
	НастройкиКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
	ПараметрыВыгрузки = ПреобразоватьСтрокуВПараметрыВыгрузки(ЭлементОбъектовМетаданных.ПараметрыВыгрузки);
	ЗагрузитьНастройкиКомпоновкиДанных(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, ПараметрыВыгрузки.НастройкиВыгрузки, Новый УникальныйИдентификатор);
	Данные = ВывестиСхемуКомпоновкиДанных(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных);
	
	ОписаниеОбъекта   = Неопределено;
	ОписанияОбъектов  = Новый Соответствие;
	ЗначенияОбъекта   = Новый Массив;
	ИспользуетсяОтбор = ИспользуетсяОтборСКД(ПараметрыВыгрузки.НастройкиВыгрузки);
	
	Для Каждого Строка Из Данные Цикл
		
		Если ОписаниеОбъекта = Неопределено Тогда
			ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ЭлементОбъектовМетаданных.ПолноеИмя);
			ОписаниеОбъекта = ПолучитьОписаниеОбъекта(ОбъектМетаданных, ЭлементОбъектовМетаданных.Раздел, Новый Соответствие);
			Если ТранспортДанных.Тип = "ВыгрузкаПоСсылке" Тогда
				ДобавитьОписаниеОбъектаДляКлючейЗаписи(ЭлементОбъектовМетаданных.ПолноеИмя, ТранспортДанных.КлючиЗаписей, ОписаниеОбъекта);
				ОписанияОбъектов.Вставить(ТипЗнч(Строка.Ссылка), ОписаниеОбъекта)
			КонецЕсли;
		КонецЕсли;
		
		Если ТранспортДанных.Тип = "Выгрузка" Тогда
			ЗаписатьКлючЗаписиВТранспортДанных(ТранспортДанных, Строка.Ссылка, ОписаниеОбъекта, ПараметрыВыгрузки.НеВыгружаемыеПоля);
		ИначеЕсли ТранспортДанных.Тип = "Загрузка" Или ТранспортДанных.Тип = "ВыгрузкаПоСсылке" Тогда
			КлючЗаписиОбъекта = Новый Структура("Ссылка", Строка.Ссылка);
			КлючДобавлен = ДобавитьКлючЗаписи(ЭлементОбъектовМетаданных.ПолноеИмя, ТранспортДанных.КлючиЗаписей, КлючЗаписиОбъекта);
			Если ИспользуетсяОтбор И КлючДобавлен Тогда
				ЗначенияОбъекта.Добавить(Строка.Ссылка);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТранспортДанных.Тип = "ВыгрузкаПоСсылке" И Не ОписаниеОбъекта = Неопределено Тогда
		НайтиСсылкиПоОбъектуМетаданных(ОписаниеОбъекта, ЗначенияОбъекта, ТранспортДанных.КлючиЗаписей, ОписанияОбъектов, ПараметрыВыгрузки.НеВыгружаемыеПоля);
	КонецЕсли;
	
КонецПроцедуры

Функция ИспользуетсяОтборСКД(НастройкиВыгрузки)
	
	Результат = Ложь;
	
	Если НастройкиВыгрузки = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого ЭлементОтбора Из НастройкиВыгрузки.Отбор.Элементы Цикл
		Если ЭлементОтбора.Использование Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПроверитьСсылочнуюЦелостностьВыгружаемыхДанных(ОбъектДанных, ОписаниеОбъекта, НеВыгружаемыеПоля, РежимВыгрузкиПоСсылке = Ложь)
	
	СтатусПроверки = Истина;
	
	Если РежимВыгрузкиПоСсылке И Не ЗначениеЗаполнено(НеВыгружаемыеПоля) Тогда
		Возврат СтатусПроверки;
	КонецЕсли;
	
	Для Каждого Реквизит Из ОписаниеОбъекта.Объекты Цикл
		Если Реквизит.Раздел = "Команды"
			ИЛИ Реквизит.Имя = "Ссылка"
			ИЛИ Реквизит.Имя = "Родитель"
			ИЛИ Реквизит.Раздел = "ПризнакиУчетаСубконто" Тогда
			Продолжить;
		КонецЕсли;
		ИмяПоля = НеВыгружаемыеПоля.Получить(Реквизит.ПолноеИмя);
		Если Реквизит.Раздел = "ТабличныеЧасти" И ЗначениеЗаполнено(ИмяПоля) И ЗначениеЗаполнено(ОбъектДанных[ИмяПоля]) Тогда
			ОбъектДанных[ИмяПоля].Очистить();
		ИначеЕсли Реквизит.Раздел = "ТабличныеЧасти" Тогда
			РеквизитОчищен = Ложь;
			Для Каждого РеквизитТЧ Из Реквизит.Объекты Цикл
				Если ОбъектДанных[Реквизит.Имя].Количество() = 0 Тогда
					Прервать;
				КонецЕсли;
				ИмяПоля = НеВыгружаемыеПоля.Получить(РеквизитТЧ.ПолноеИмя);
				Если РежимВыгрузкиПоСсылке И Не ЗначениеЗаполнено(ИмяПоля) Тогда
					Продолжить;
				КонецЕсли;
				РеквизитОчищен = ОчиститьРеквизитОбъектаДанных(ОбъектДанных[Реквизит.Имя], РеквизитТЧ, Реквизит, ЗначениеЗаполнено(ИмяПоля));
				Если Не ЗначениеЗаполнено(ИмяПоля) И РеквизитОчищен И ОписаниеОбъекта.ОчищенныеРеквизиты.Получить(РеквизитТЧ.ПолноеИмя) = Неопределено Тогда
					ШаблонСообщения = НСтр("ru = 'При выгрузке ""%1"" очищен реквизит %2 таблицы ""%3"".'");
					ТекстСообщения = СтрШаблон(ШаблонСообщения, ОписаниеОбъекта.Имя, РеквизитТЧ.Имя, Реквизит.Имя);
					СообщитьПользователю(ТекстСообщения);
					ОписаниеОбъекта.ОчищенныеРеквизиты.Вставить(РеквизитТЧ.ПолноеИмя, РеквизитТЧ.ПолноеИмя);
				КонецЕсли;
			КонецЦикла;
			ОчищенаТалица = Не РежимВыгрузкиПоСсылке И РеквизитОчищен И ОбъектДанных[Реквизит.Имя].Количество() = 0;
			//@skip-check query-in-loop
			Если ОчищенаТалица
				И Реквизит.ОбъектМетаданных.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку
				И ПроверитьЗаполненностьРеквизита("*", Реквизит.Путь,, ЗаполненныеРеквизиты) Тогда
				ШаблонСообщения = НСтр("ru = 'При выгрузке ""%1"" для ""%2"" возникла ошибка:
					|таблицу ""%3"" нельзя очищать, она является обязательной для заполнения.'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбъектДанных, ОписаниеОбъекта.Имя, Реквизит.Имя);
				СообщитьПользователю(ТекстСообщения);
				СтатусПроверки = Ложь;
				Прервать;
			ИначеЕсли ОчищенаТалица
					И ОписаниеОбъекта.ОчищенныеРеквизиты.Получить(Реквизит.ПолноеИмя) = Неопределено Тогда
				ШаблонСообщения = НСтр("ru = 'При выгрузке ""%1"" очищена таблица ""%2"".'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ОписаниеОбъекта.Имя, Реквизит.Имя);
				СообщитьПользователю(ТекстСообщения);
				ОписаниеОбъекта.ОчищенныеРеквизиты.Вставить(Реквизит.ПолноеИмя, Реквизит.ПолноеИмя);
			КонецЕсли;
		ИначеЕсли РежимВыгрузкиПоСсылке И Не ЗначениеЗаполнено(ИмяПоля) Тогда
			Продолжить;
		Иначе
			РеквизитОчищен = ОчиститьРеквизитОбъектаДанных(ОбъектДанных, Реквизит, ОписаниеОбъекта, ЗначениеЗаполнено(ИмяПоля));
			//@skip-check query-in-loop
			Если ЗначениеЗаполнено(ИмяПоля) Тогда
				// Безусловная очистка реквизита
			ИначеЕсли РеквизитОчищен
				И Реквизит.ОбъектМетаданных.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку
				И ПроверитьЗаполненностьРеквизита(Реквизит.Имя, ОписаниеОбъекта.ПолноеИмя, Реквизит.ОбъектМетаданных.Тип, ЗаполненныеРеквизиты) Тогда
				ШаблонСообщения = НСтр("ru = 'При выгрузке ""%1"" для ""%2"" возникла ошибка:
					|реквизит ""%3"" нельзя очищать, он является обязательным для заполнения.'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбъектДанных, ОписаниеОбъекта.Имя, Реквизит.Имя);
				СообщитьПользователю(ТекстСообщения);
				СтатусПроверки = Ложь;
				Прервать;
			ИначеЕсли РеквизитОчищен
				И Реквизит.Раздел = "Измерения" Тогда
				ШаблонСообщения = НСтр("ru = 'При выгрузке ""%1"" для ""%2"" возникла ошибка:
					|измерение ""%3"" нельзя очищать, оно является ключевой сущностью.'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбъектДанных, ОписаниеОбъекта.Имя, Реквизит.Имя);
				СообщитьПользователю(ТекстСообщения);
				СтатусПроверки = Ложь;
				Прервать;
			ИначеЕсли РеквизитОчищен И ОписаниеОбъекта.ОчищенныеРеквизиты.Получить(Реквизит.ПолноеИмя) = Неопределено Тогда
				ШаблонСообщения = НСтр("ru = 'При выгрузке ""%1"" очищен реквизит ""%2"".'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ОписаниеОбъекта.Имя, Реквизит.Имя);
				СообщитьПользователю(ТекстСообщения);
				ОписаниеОбъекта.ОчищенныеРеквизиты.Вставить(Реквизит.ПолноеИмя, Реквизит.ПолноеИмя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтатусПроверки;
	
КонецФункции

Функция ОчиститьРеквизитОбъектаДанных(ОбъектДанных, Реквизит, ОписаниеОбъекта, ОчиститьБезусловно = Ложь)
	
	РеквизитОчищен = Ложь;
	
	Если ОписаниеОбъекта.ЭтоСсылка Тогда
		Данные = Новый Массив;
		Данные.Добавить(ОбъектДанных);
	ИначеЕсли ОписаниеОбъекта.ЭтоНаборЗаписей Тогда
		Данные = ОбъектДанных;
	Иначе
		Возврат РеквизитОчищен;
	КонецЕсли;
	
	СтрокиКУдалению = Новый Массив;
	
	Для Каждого СтрокаДанных Из Данные Цикл
		
		ЗначениеРеквизита = СтрокаДанных[Реквизит.Имя];
		
		Если ЗначениеРеквизита = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОчиститьБезусловно И ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			СтрокаДанных[Реквизит.Имя] = Неопределено;
			РеквизитОчищен = Истина;
			Продолжить;
		КонецЕсли;
		
		ТипРеквизита = ТипЗнч(ЗначениеРеквизита);
		
		ЭтоОчищаемаяСсылка = ЭтоСсылка(ТипРеквизита) И Не ЭтоПеречисление(ТипРеквизита);
		
		Если Не ЭтоОчищаемаяСсылка Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементОбъектовМетаданных = РазрешенныеТипыКВыгрузке.Получить(ТипЗнч(ЗначениеРеквизита));
		
		Если ЭлементОбъектовМетаданных = Неопределено
			И ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			СтрокаДанных[Реквизит.Имя] = Неопределено;
			РеквизитОчищен = Истина;
		ИначеЕсли НЕ ЭлементОбъектовМетаданных = Неопределено
			И ЗначениеЗаполнено(ЭлементОбъектовМетаданных.ПараметрыВыгрузки)
			И ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			
			СхемаКомпоновкиДанных = ПодготовитьСхемуКомпоновкиДанных(ЭлементОбъектовМетаданных);
			НастройкиКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
			ПараметрыВыгрузки = ПреобразоватьСтрокуВПараметрыВыгрузки(ЭлементОбъектовМетаданных.ПараметрыВыгрузки);
			ЗагрузитьНастройкиКомпоновкиДанных(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, ПараметрыВыгрузки.НастройкиВыгрузки, Новый УникальныйИдентификатор);
			
			ОтборСсылка = НастройкиКомпоновкиДанных.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборСсылка.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Ссылка");
			ОтборСсылка.ПравоеЗначение = ЗначениеРеквизита;
			ОтборСсылка.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ОтборСсылка.Использование  = Истина;
			
			ОтборПоЗначению = ВывестиСхемуКомпоновкиДанных(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных);
			Если ОтборПоЗначению.Количество() = 0 И ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
				СтрокаДанных[Реквизит.Имя] = Неопределено;
				РеквизитОчищен = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если РеквизитОчищен И ОписаниеОбъекта.Раздел = "ТабличныеЧасти" Тогда
			УдалитьСтроку = Истина;
			Для Каждого РеквизитТЧ Из ОписаниеОбъекта.Объекты Цикл
				Если РеквизитТЧ.Имя = "НомерСтроки" Тогда
					Продолжить;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(СтрокаДанных[РеквизитТЧ.Имя])
					И РеквизитТЧ.ОбъектМетаданных.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку Тогда
					УдалитьСтроку = Истина;
					Прервать;
				Иначе
					УдалитьСтроку = УдалитьСтроку И Не ЗначениеЗаполнено(СтрокаДанных[РеквизитТЧ.Имя]);
				КонецЕсли;
			КонецЦикла;
			Если УдалитьСтроку Тогда
				СтрокиКУдалению.Добавить(СтрокаДанных);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаДанных Из СтрокиКУдалению Цикл
		Данные.Удалить(СтрокаДанных);
	КонецЦикла;
	
	Возврат РеквизитОчищен;
	
КонецФункции

Функция ПредопределенныеТипыПриВыгрузке()
	
	Типы = Новый Массив;
	
	Для Каждого ОбъектМетаданных Из Метаданные.Справочники Цикл
		Типы.Добавить(ОбъектМетаданных);
	КонецЦикла;
	
	Для Каждого ОбъектМетаданных Из Метаданные.ПланыСчетов Цикл
		Типы.Добавить(ОбъектМетаданных);
	КонецЦикла;
	
	Для Каждого ОбъектМетаданных Из Метаданные.ПланыВидовХарактеристик Цикл
		Типы.Добавить(ОбъектМетаданных);
	КонецЦикла;
	
	Для Каждого ОбъектМетаданных Из Метаданные.ПланыВидовРасчета Цикл
		Типы.Добавить(ОбъектМетаданных);
	КонецЦикла;
	
	Возврат Типы;
	
КонецФункции

Функция ПолучитьФабрикуСУказаниемТипов(Знач Типы)
	
	НаборСхем = ФабрикаXDTO.ЭкспортСхемыXML("http://v8.1c.ru/8.1/data/enterprise/current-config");
	Схема = НаборСхем[0];
	Схема.ОбновитьЭлементDOM();
	
	УказанныеТипы = Новый Соответствие;
	Для каждого Тип Из Типы Цикл
		УказанныеТипы.Вставить(XMLТипСсылки(Тип), Истина);
	КонецЦикла;
	
	ПространствоИмен = Новый Соответствие;
	ПространствоИмен.Вставить("xs", "http://www.w3.org/2001/XMLSchema");
	РазыменовательПространствИменDOM = Новый РазыменовательПространствИменDOM(ПространствоИмен);
	ТекстXPath = "/xs:schema/xs:complexType/xs:sequence/xs:element[starts-with(@type,'tns:')]";
	
	Запрос = Схема.ДокументDOM.СоздатьВыражениеXPath(ТекстXPath, РазыменовательПространствИменDOM);
	//@skip-check server-execution-safe-mode
	Результат = Запрос.Вычислить(Схема.ДокументDOM);

	Пока Истина Цикл
		
		УзелПоля = Результат.ПолучитьСледующий();
		Если УзелПоля = Неопределено Тогда
			Прервать;
		КонецЕсли;
		АтрибутТип = УзелПоля.Атрибуты.ПолучитьИменованныйЭлемент("type");
		ТипБезNSПрефикса = Сред(АтрибутТип.ТекстовоеСодержимое, СтрДлина("tns:") + 1);
		
		Если УказанныеТипы.Получить(ТипБезNSПрефикса) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		УзелПоля.УстановитьАтрибут("nillable", "true");
		УзелПоля.УдалитьАтрибут("type");
	КонецЦикла;
	
	ЗаписьXML = Новый ЗаписьXML;
	ИмяФайлаСхемы = ПолучитьИмяВременногоФайла("xsd");
	ЗаписьXML.ОткрытьФайл(ИмяФайлаСхемы);
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(Схема.ДокументDOM, ЗаписьXML);
	ЗаписьXML.Закрыть();
	
	Фабрика = СоздатьФабрикуXDTO(ИмяФайлаСхемы);
	
	Попытка
		УдалитьФайлы(ИмяФайлаСхемы);
	Исключение
		СтрокаОписанияОшибки = ОписаниеОшибки();
		СообщитьПользователю(СтрокаОписанияОшибки);
	КонецПопытки;
	
	Возврат Фабрика;
	
КонецФункции

Процедура ПолучитьРазрешенныеТипыКВыгрузке(ОбъектыМетаданных)
	
	ОбъектыМетаданныхКВыгрузке = ОбъектыМетаданных.ПолучитьЭлементы();
	
	РазрешенныеТипыКВыгрузке = Новый Соответствие;
	
	Для Каждого Элемент Из ОбъектыМетаданныхКВыгрузке Цикл
		Если Не Элемент.Выгружать Тогда
			Продолжить;
		КонецЕсли;
		Если ЭтоТаблицаСсылочныхДанных(Элемент.ПолноеИмя) Тогда
			РазрешенныеТипыКВыгрузке.Вставить(Тип(СтрЗаменить(Элемент.ПолноеИмя, ".", "Ссылка.")), Элемент);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьСхемуКомпоновкиДанных(ЭлементОбъектовМетаданных, СтрокаПолейДляВыборки = "", ВыбратьРазличные = Ложь)
	
	ТекстЗапроса = ПолучитьТекстЗапросаПоСтроке(ЭлементОбъектовМетаданных, СтрокаПолейДляВыборки, ВыбратьРазличные);
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.Текст = ТекстЗапроса;
	ПостроительЗапроса.ЗаполнитьНастройки();
	
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	НаборыДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборыДанных.Имя                          = "НаборыДанных";
	НаборыДанных.Запрос                       = ТекстЗапроса;
	НаборыДанных.ИсточникДанных               = "ИсточникДанных";
	НаборыДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	
	ЭтоНаборДанных = ЭтоТаблицаНабораДанных(ЭлементОбъектовМетаданных.ПолноеИмя);
	
	ГруппировкаДетальныеЗаписи = СхемаКомпоновкиДанных.НастройкиПоУмолчанию.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаДетальныеЗаписи.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	
	ТипТаблицаЗначений = Тип("ТаблицаЗначений");
	
	Для Каждого ПолеОтбора Из ПостроительЗапроса.ДоступныеПоля Цикл
		
		Если ПолеОтбора.Имя = "ИмяПредопределенныхДанных"
			ИЛИ ПолеОтбора.Имя = "ВерсияДанных"
			ИЛИ ПолеОтбора.ТипЗначения.СодержитТип(ТипТаблицаЗначений) Тогда
			Продолжить;
		КонецЕсли;
		
		ПолеНабора = НаборыДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабора.Заголовок   = СокрЛП(ПолеОтбора.Представление);
		ПолеНабора.Поле        = ПолеОтбора.Имя;
		ПолеНабора.ПутьКДанным = ПолеОтбора.Имя;
		
		ЭлементОтбораКомпоновкиДанных = СхемаКомпоновкиДанных.НастройкиПоУмолчанию.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораКомпоновкиДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПолеНабора.ПутьКДанным);
		ЭлементОтбораКомпоновкиДанных.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбораКомпоновкиДанных.ИдентификаторПользовательскойНастройки = Новый УникальныйИдентификатор;
		ЭлементОтбораКомпоновкиДанных.Использование = Ложь;
		ЭлементОтбораКомпоновкиДанных.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
		
		Если ЗначениеЗаполнено(СтрокаПолейДляВыборки)
			Или ПолеОтбора.Имя = "Ссылка" И Не ЭтоНаборДанных
			Или ЭтоНаборДанных Тогда
			ВыбранноеПолеКомпоновкиДанных = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПолеКомпоновкиДанных.Заголовок = СокрЛП(ПолеОтбора.Представление);
			ВыбранноеПолеКомпоновкиДанных.Использование = Истина;
			ВыбранноеПолеКомпоновкиДанных.Поле = Новый ПолеКомпоновкиДанных(ПолеОтбора.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СхемаКомпоновкиДанных;
	
КонецФункции

Функция ВывестиСхемуКомпоновкиДанных(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, ПроверятьДоступностьПолей = Ложь)
	
	ТаблицаДанных     = Новый ТаблицаЗначений;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных.ПолучитьНастройки(),,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"), ПроверятьДоступностьПолей);

	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений();
	ПроцессорВывода.УстановитьОбъект(ТаблицаДанных);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	
	Возврат ТаблицаДанных;
	
КонецФункции

Процедура ЗагрузитьНастройкиКомпоновкиДанных(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, НастройкиВыгрузки, УникальныйИдентификатор)
	
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор));
	НастройкиКомпоновкиДанных.Инициализировать(ИсточникДоступныхНастроек);
	
	Если Не НастройкиВыгрузки = Неопределено Тогда
		НастройкиКомпоновкиДанных.ЗагрузитьНастройки(НастройкиВыгрузки);
	Иначе
		НастройкиКомпоновкиДанных.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КонецЕсли;
	
КонецПроцедуры

Функция XMLТипСсылки(Знач Значение)
	
	Если ТипЗнч(Значение) = Тип("ОбъектМетаданных") Тогда
		ОбъектМетаданных = Значение;
		МенеджерОбъекта = МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
		Ссылка = МенеджерОбъекта.ПолучитьСсылку();
	Иначе
		ОбъектМетаданных = Значение.Метаданные();
		Ссылка = Значение;
	КонецЕсли;
	
	Если ЭтоСсылочныйОбъект(ОбъектМетаданных) Тогда
		XMLТип = СериализаторXDTO.XMLТипЗнч(Ссылка);
	Иначе
		ТекстИсключения = НСтр("ru = 'Ошибка при определении XMLТипа ссылки для объекта %1: объект не является ссылочным!'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%1", ОбъектМетаданных.ПолноеИмя());
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Возврат XMLТип.ИмяТипа;
	
КонецФункции

Функция ПолучитьТекстЗапросаПоСтроке(ЭлементОбъектовМетаданных, Знач СтрокаПолейДляВыборки = "", ВыбратьРазличные = Ложь)
	
	Если НЕ ЗначениеЗаполнено(СтрокаПолейДляВыборки) Тогда
		СтрокаПолейДляВыборки = "ТаблицаДанных.*";
	КонецЕсли;
	
	//@skip-check bsl-ql-hub
	ШаблонТексЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ %1 %2 ИЗ %3 КАК ТаблицаДанных";
	ИмяТаблицаДанных = ЭлементОбъектовМетаданных.ПолноеИмя;
	Если ЭлементОбъектовМетаданных.Раздел = "РегистрБухгалтерии" Тогда
		ИмяТаблицаДанных = ИмяТаблицаДанных + ".ДвиженияССубконто";
	КонецЕсли;
	
	ТекстЗапроса = СтрШаблон(ШаблонТексЗапроса, ?(ВыбратьРазличные, "РАЗЛИЧНЫЕ", ""), СтрокаПолейДляВыборки, ИмяТаблицаДанных);
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	Возврат СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция ПолучитьМенеджерИлиМодуль(Имя)
	
	УстановитьБезопасныйРежим(Истина);
	Модуль = Вычислить(Имя);
	
	Возврат Модуль;
	
КонецФункции

Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Разделитель = ".")
	
	МассивСтрок = Новый Массив();
	ДлинаРазделителя = СтрДлина(Разделитель);
	Пока Истина Цикл
		Поз = СтрНайти(Строка, Разделитель);
		Если Поз = 0 Тогда
			Если (СокрЛП(Строка) <> "") Тогда
				МассивСтрок.Добавить(Строка);
			КонецЕсли;
			Возврат МассивСтрок;
		КонецЕсли;
		МассивСтрок.Добавить(Лев(Строка, Поз - 1));
		Строка = Сред(Строка, Поз + ДлинаРазделителя);
	КонецЦикла;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте'");
#КонецЕсли