#Область ОписаниеПеременных

&НаКлиенте
Перем РаботаСМетаданными;

&НаКлиенте
Перем МенеджерВременныхТаблиц;

&НаКлиенте
Перем ПравилаРасшифровкиПраваДоступа;

&НаКлиенте
Перем ПоследняяКомандаВыбора;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Инициализировать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ИнициализироватьТерминал();
	ИнициализироватьРаботаСМетаданными();
	ИнициализироватьРаботаСПравамиДоступа();
	ИнициализироватьРежимы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПраваДоступаВыбор(Элемент, Область, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьРасшифровкуОбъектаВПравахДоступа(Область);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОбъектыМетаданных

&НаКлиенте
Процедура ОбъектыМетаданныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ИмяОбработки", Поле.Имя);
	ОбъектыМетаданныхВыборСобытие(, ПараметрыОбработки)
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыМетаданныхПередРазворачиванием(Элемент, Строка, Отказ)
	
	ОбъектыМетаданныхЗаполнитьДочерниеЭлементы(ОбъектыМетаданных.НайтиПоИдентификатору(Строка));
	
КонецПроцедуры

&НаКлиенте
Процедура ОМВыгружатьПриИзменении(Элемент)
	
	ИзменитьСтатусВыгрузкиОбъекта();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРоли

&НаКлиенте
Процедура РолиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ИмяОбработки", Поле.Имя);
	РолиВыборСобытие(, ПараметрыОбработки)
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПользователи

&НаКлиенте
Процедура ПользователиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ИмяОбработки", Поле.Имя);
	ПользователиВыборСобытие(, ПараметрыОбработки)
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыБитыеСсылки

&НаКлиенте
Процедура БитыеСсылкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.БитыеСсылкиКлюч Тогда
		РаботаСМетаданными.ОткрытьФормуОбъектаСБитойСсылкой(ЭтотОбъект, ВыбраннаяСтрока);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьОтборПоЗаполненным(Команда)
	
	УстановитьПометкуДляКнопки(Элементы.ОбъектыМетаданныхУстановитьОтборПоЗаполненным, ОтборПоЗаполненным);
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоОтмеченным(Команда)
	
	УстановитьПометкуДляКнопки(Элементы.ОбъектыМетаданныхУстановитьОтборПоОтмеченным, ОтборПоОтмеченным);
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимАнализаПрав(Команда)
	
	УстановитьПометкуДляКнопки(Элементы.ОбъектыМетаданныхУстановитьРежимАнализаПрав, РежимАнализПрав);
	ОтобразитьСтраницыИКолонкиПоРежимам();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимАнализаТаблиц(Команда)
	
	УстановитьПометкуДляКнопки(Элементы.ОбъектыМетаданныхУстановитьРежимАнализаТаблиц, РежимАнализТаблиц);
	ОтобразитьСтраницыИКолонкиПоРежимам();
	Если ОбъектыМетаданных.ПолучитьЭлементы().Количество() > 0 Тогда
		ЗаполнитьМетаданныеСобытие();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимАнализаДанных(Команда)
	
	УстановитьПометкуДляКнопки(Элементы.ОбъектыМетаданныхУстановитьРежимАнализаДанных, РежимАнализДанных);
	ОтобразитьСтраницыИКолонкиПоРежимам();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтатистику(Команда)
	
	РаботаСМетаданными.ЗаполнитьСтатистику(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиБитыеСсылки(Команда)
	
	РаботаСМетаданными.НайтиБитыеСсылки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьБитыеСсылки(Команда)
	
	ОткрытьФорму(Объект.ПутьКФормам + "ПараметрыОчисткиБитыхСсылок",,
		ЭтотОбъект,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьБитуюСсылку(Команда)
	
	РаботаСМетаданными.ОчиститьУказанныеБитыеСсылки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСоединениеСУБД(Команда)
	
	УстановитьСоединениеСБДНаТолстомКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСкриптТеримнала(Команда)
	
	ВыполнитьСкриптТеримналаВКонтесте();
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьБезопасныйРежим(Команда)
	
	БезопасныйРежим = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМетаданные(Команда)
	
	ЗаполнитьМетаданныеСобытие();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьОбъектПоТаблицеБД(Команда)
	
	РаботаСМетаданными.ВвестиИмяТаблицыБазДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокРолей(Команда)
	
	ЗаполнитьСписокРолейСобытие();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПользователей(Команда)
	
	ЗаполнитьПользователейСобытие();
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиСКДПоТекстуЗапроса(Команда)
	
	НачатьПоискСКДПоТекстуЗапроса();
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиИсториюМетаданных(Команда)
	
	НачатьПолучениеИсторииМетаданных();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКСледующемуОбъекту(Команда)
	
	ПерейтиПоИсторииМетаданных(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКПредыдущемуОбъекту(Команда)
	
	ПерейтиПоИсторииМетаданных(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьУникальныйИдентификатор(Команда)
	
	ОткрытьФормуОпределенияУникальногоИдентификатора();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьУдалениеПомеченных(Команда)
	
	ЗапуститьУдалениеПомеченныхНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИсторию(Команда)
	
	УдалитьИсториюДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОчисткуЖурналаРегистрации(Команда)
	
	НачатьОчисткуЖурналаРегистрации();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиВыгрузки(Команда)
	
	ВыбратьФайлСохраненияНастроекВыгрузки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройкиВыгрузки(Команда)
	
	ВыбратьФайлЗагрузкиНастроекВыгрузки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанные(Команда)
	
	ЗагрузитьДанныеОбъектовПоказатьВопрос();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанные(Команда)
	
	ВыгрузитьДанныеОбъектов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПолнотекстовыйПоиск(Команда)
	
	ВыполнитьПолнотекстовыйПоискНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСтатусПолнотекстовогоИндекса(Команда)
	
	ПолучитьСтатусПолнотекстовогоИндексаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиСсылкиНаОбъект(Команда)
	
	ОткрытьФормуСпискаТипов(1);
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиСсылкиВОбъекте(Команда)
	
	ОткрытьФормуСпискаТипов(2);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьКонстанты(Команда)
	
	РаботаСМетаданными.ОтметитьКонстанты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьПредопределенные(Команда)
	
	РаботаСМетаданными.ЗаполнитьСтатистику(ЭтотОбъект);
	РаботаСМетаданными.ОтметитьПредопределенные(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьРежимВыгрузкиПоСсылке(Команда)
	
	Элементы.ОбъектыМетаданныхУказатьРежимВыгрузкиПоСсылке.Пометка =
		НЕ Элементы.ОбъектыМетаданныхУказатьРежимВыгрузкиПоСсылке.Пометка;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСМетаданными

#Область Общие

&НаКлиенте
Процедура СвернутьДеревоОбъектыМетаданных()
	
	ЭлементыПервогоУровня = ОбъектыМетаданных.ПолучитьЭлементы();
	Для Каждого ЭлементПервогоУровня Из ЭлементыПервогоУровня Цикл
		ЭлементыВторогоУровня = ЭлементПервогоУровня.ПолучитьЭлементы();
		Для Каждого ЭлементВторогоУровня Из ЭлементыВторогоУровня Цикл
			Если ЭлементВторогоУровня.Раздел = "Общие" Тогда
				ЭлементыТретьегоУровня = ЭлементВторогоУровня.ПолучитьЭлементы();
				Для Каждого ЭлементТретьегоУровня Из ЭлементыТретьегоУровня Цикл
					Элементы.ОбъектыМетаданных.Свернуть(ЭлементТретьегоУровня.ПолучитьИдентификатор());
				КонецЦикла;
			КонецЕсли;
			Элементы.ОбъектыМетаданных.Свернуть(ЭлементВторогоУровня.ПолучитьИдентификатор());
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоОбъектыМетаданных()
	
	ЭлементыПервогоУровня = ОбъектыМетаданных.ПолучитьЭлементы();
	Для Каждого ЭлементПервогоУровня Из ЭлементыПервогоУровня Цикл
		Элементы.ОбъектыМетаданных.Развернуть(ЭлементПервогоУровня.ПолучитьИдентификатор());
		ЭлементыВторогоУровня = ЭлементПервогоУровня.ПолучитьЭлементы();
		Для Каждого ЭлементВторогоУровня Из ЭлементыВторогоУровня Цикл
			Элементы.ОбъектыМетаданных.Развернуть(ЭлементВторогоУровня.ПолучитьИдентификатор());
			Если ЭлементВторогоУровня.Раздел = "Общие" Тогда
				ЭлементыТретьегоУровня = ЭлементВторогоУровня.ПолучитьЭлементы();
				Для Каждого ЭлементТретьегоУровня Из ЭлементыТретьегоУровня Цикл
					Элементы.ОбъектыМетаданных.Развернуть(ЭлементТретьегоУровня.ПолучитьИдентификатор());
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМетаданныеПоРазделам() Экспорт
	
	МетаданныеПоРазделам = РаботаСМетаданными.ПолучитьМетаданныеПоРазделам();
	
	Возврат МетаданныеПоРазделам;
	
КонецФункции

&НаКлиенте
Функция ПолучитьПоляМетаданныхПоРазделу(Раздел, ИмяМетаданных, ТолькоСсылочные = Ложь) Экспорт
	
	РеквизитыМетаданныеПоРазделу = РаботаСМетаданными.ПолучитьПоляМетаданныхПоРазделу(Раздел, ИмяМетаданных, ТолькоСсылочные);
	
	Возврат РеквизитыМетаданныеПоРазделу;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьМетаданныеСобытие(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	РаботаСМетаданными.ЗаполнитьМетаданные(ЭтотОбъект, РежимАнализТаблиц);
	
	ЭлементыОбъектовМетаданных = ОбъектыМетаданных.ПолучитьЭлементы()[0].ПолучитьЭлементы();
	Для Каждого ЭлементОбъектаМетаданных Из ЭлементыОбъектовМетаданных Цикл
		
		Если Не ЭлементОбъектаМетаданных.Раздел = "Общие" Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементыОбъектовМетаданныхОбщие = ЭлементОбъектаМетаданных.ПолучитьЭлементы();
		Для Каждого ЭлементОбъектаМетаданныхОбщий Из ЭлементыОбъектовМетаданныхОбщие Цикл
			Если Не (ЭлементОбъектаМетаданныхОбщий.Имя = "Подсистемы" Или ЭлементОбъектаМетаданныхОбщий.Имя = "ФункциональныеОпции") Тогда
				Продолжить;
			КонецЕсли;
			ЗаполнитьИдентификаторыСтрок(ЭлементОбъектаМетаданныхОбщий);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИдентификаторыСтрок(ОбъектыМетаданныхРаздела)
	
	ЭлементыОбъектовМетаданных = ОбъектыМетаданныхРаздела.ПолучитьЭлементы();
	Для Каждого ЭлементОбъектаМетаданных Из ЭлементыОбъектовМетаданных Цикл
		Если НЕ ЗначениеЗаполнено(ЭлементОбъектаМетаданных.ПолноеИмя) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ИдентификаторыСтрок.Добавить();
		НоваяСтрока.ПолноеИмя = ЭлементОбъектаМетаданных.ПолноеИмя;
		НоваяСтрока.ИдентификаторСтроки = ЭлементОбъектаМетаданных.ПолучитьИдентификатор();
		ЗаполнитьИдентификаторыСтрок(ЭлементОбъектаМетаданных);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыМетаданныхВыборСобытие(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ТекущиеДанные = Элементы.ОбъектыМетаданных.ТекущиеДанные;
	
	ПоследняяКомандаВыбора = ДополнительныеПараметры.ИмяОбработки;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ИмяОбработки = "ОМКартинкаРоль" Тогда
		РаботаСМетаданными.ПолучитьПраваДоступа(ЭтотОбъект, "Роли");
		Элементы.ТипыПоиска.ТекущаяСтраница = Элементы.ГруппаПраваДоступа;
	ИначеЕсли ДополнительныеПараметры.ИмяОбработки = "ОМКартинкаПользователь" Тогда
		РаботаСМетаданными.ПолучитьПраваДоступа(ЭтотОбъект, "Пользователи");
		Элементы.ТипыПоиска.ТекущаяСтраница = Элементы.ГруппаПраваДоступа;
	ИначеЕсли ДополнительныеПараметры.ИмяОбработки = "ОМКартинкаПараметрыВыгрузки" Тогда
		ОткрытьФормуПараметровВыгрузки();
	ИначеЕсли ДополнительныеПараметры.ИмяОбработки = "ОМИмяСУБД" Тогда
		РаботаСМетаданными.ПолучитьИндексыПоОбъектуМетаданных(ЭтотОбъект);
		Элементы.ТипыПоиска.ТекущаяСтраница = Элементы.Индексы;
	ИначеЕсли ДополнительныеПараметры.ИмяОбработки = "ОМКоличествоЭлементов" Тогда
		
		ТекущиеДанные = Элементы.ОбъектыМетаданных.ТекущиеДанные;
		
		Если ТекущиеДанные.КоличествоЭлементов = 0 ИЛИ ТекущиеДанные.ЗаголовокТипа = НСтр("ru = 'Хранилище значения'") Тогда
			Возврат;
		КонецЕсли;
		
		СистемнаяТаблица = "";
		Если СтрНайти(ТекущиеДанные.Имя, "ИнициализированныеПредопределенныеДанные") > 0 Тогда
			СистемнаяТаблица = "ПредопределенныеДанные";
			ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя().ПолучитьРодителя();
		КонецЕсли;
		
		ОбъектыМетаданныхЗаполнитьДочерниеЭлементы(ТекущиеДанные);
		
		Если ТекущиеДанные.ЭтоОсновнаяТаблица Тогда
			ОткрытьСписокЭлементовПоОбъектуМетаданных(ТекущиеДанные, СистемнаяТаблица);
		ИначеЕсли ТекущиеДанные.ЭтоТаблица Тогда
			ОткрытьСписокЭлементовПоТаблицеОбъектаМетаданных(ТекущиеДанные);
		ИначеЕсли ТекущиеДанные.ЭтоПоле Тогда
			ОткрытьСписокЭлементовПоРеквизитуОбъектаМетаданных(ТекущиеДанные);
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры.ИмяОбработки = "ОМТипСГиперссылками" Тогда
		ОткрытьФормуСпискаТипов();
	ИначеЕсли (ДополнительныеПараметры.ИмяОбработки = "ОМИмяДополнениеСГиперссылкой"
		ИЛИ ДополнительныеПараметры.ИмяОбработки = "ОМИмяОбъектаМетаданныхСГиперссылкой"
		ИЛИ ДополнительныеПараметры.ИмяОбработки = "ОМИмяДополнение") И ТекущиеДанные.ЭтоОсновнаяТаблица Тогда
		
		ФормаСпискаПоОбъектуМетаданных = ПолучитьФормуСпискаПоОбъектуМетаданных(ТекущиеДанные.ПолноеИмя);
		
		ОткрытьФорму(ФормаСпискаПоОбъектуМетаданных);
		
	ИначеЕсли (ТекущиеДанные.Раздел = "Подсистемы" И Не Лев(ТекущиеДанные.Владелец, 10) = "Подсистема") 
			ИЛИ (ТекущиеДанные.Раздел = "ФункциональныеОпции" И Не Лев(ТекущиеДанные.Владелец, 19) = "ФункциональныеОпции") Тогда
		ИдентификаторПодсистемы = ИдентификаторыСтрок.НайтиСтроки(Новый Структура("ПолноеИмя", ТекущиеДанные.ПолноеИмя));
		Если ИдентификаторПодсистемы.Количество() > 0 Тогда
			Элементы.ОбъектыМетаданных.ТекущаяСтрока = ИдентификаторПодсистемы[0].ИдентификаторСтроки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьРаботаСМетаданными()
	
	Если РаботаСМетаданными = Неопределено Тогда
		//@skip-check use-non-recommended-method
		РаботаСМетаданными = ПолучитьФорму(Объект.ПутьКФормам + "РаботаСМетаданными",,,
			Новый УникальныйИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыМетаданныхЗаполнитьДочерниеЭлементы(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.НеобходимоДетализировать Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Владелец) И ИсторияМетаданных.НайтиПоЗначению(ИдентификаторСтроки) = Неопределено Тогда
		ИсторияМетаданных.Добавить(ИдентификаторСтроки, ТекущиеДанные.ПолноеИмя);
		ТекущийИдентификаторМетаданных = ИдентификаторСтроки;
		Элементы.ОбъектыМетаданных.ТекущаяСтрока = ТекущийИдентификаторМетаданных;
	КонецЕсли;
	
	РаботаСМетаданными.ЗаполнитьДочерниеМетаданные(ЭтотОбъект, ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПолучениеИсторииМетаданных()
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ИсторияОбъектовПослеВыбораЭлемента", ЭтотОбъект);
	
	ИсторияМетаданных.ПоказатьВыборЭлемента(ОписаниеОповещенияОЗакрытии,
		НСтр("ru = 'История метаданных'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиПоИсторииМетаданных(ПоискНазад = Истина)
	
	Если Элементы.ОбъектыМетаданных.ТекущаяСтрока <> ТекущийИдентификаторМетаданных Тогда
		Элементы.ОбъектыМетаданных.ТекущаяСтрока = ТекущийИдентификаторМетаданных;
		Возврат;
	КонецЕсли;
	
	ПредыдущийЭлемент = Неопределено;
	ИдентификаторНайден = Ложь;
	Для Каждого Элемент Из ИсторияМетаданных Цикл
		
		Если ИдентификаторНайден И Не ПоискНазад Тогда
			Прервать;
		КонецЕсли;
		
		Если Элемент.Значение = ТекущийИдентификаторМетаданных Тогда
			ИдентификаторНайден = Истина;
		КонецЕсли;
		
		Если ИдентификаторНайден И ПоискНазад Тогда
			Прервать;
		КонецЕсли;
		
		ПредыдущийЭлемент = Элемент;
		
	КонецЦикла;
	
	Если ИдентификаторНайден И Не ПоискНазад Тогда
		ТекущийИдентификаторМетаданных = Элемент.Значение;
	ИначеЕсли ИдентификаторНайден И ПоискНазад И Не ПредыдущийЭлемент = Неопределено Тогда
		ТекущийИдентификаторМетаданных = ПредыдущийЭлемент.Значение;
	КонецЕсли;
	
	Если ИдентификаторНайден Тогда
		Элементы.ОбъектыМетаданных.ТекущаяСтрока = ТекущийИдентификаторМетаданных;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Частные

&НаКлиенте
Процедура ОткрытьСписокЭлементовПоОбъектуМетаданных(ТекущиеДанные, СистемнаяТаблица)
	
	Если ПустаяСтрока(ТекущиеДанные.ПолноеИмя) ИЛИ ПустаяСтрока(ТекущиеДанные.РеквизитыСтрокой) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РеквизитыТаблицы",   СтрокуВМассивРеквизитов(ТекущиеДанные.РеквизитыСтрокой));
	ПараметрыОткрытия.Вставить("ОсновнаяТаблица",    ТекущиеДанные.ПолноеИмя);
	ПараметрыОткрытия.Вставить("ДинамическийСписок", ИСТИНА);
	ПараметрыОткрытия.Вставить("СистемнаяТаблица",   СистемнаяТаблица);
	
	ОткрытьФорму(Объект.ПутьКФормам + "СписокЭлементов", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокЭлементовПоТаблицеОбъектаМетаданных(ТекущиеДанные)
	
	Если ПустаяСтрока(ТекущиеДанные.ПолноеИмя) ИЛИ ПустаяСтрока(ТекущиеДанные.РеквизитыСтрокой) Тогда
		Возврат;
	КонецЕсли;
	
	ОсновнаяТаблица = ТекущиеДанные.ПолноеИмя;
	ОсновнаяТаблица = СтрЗаменить(ОсновнаяТаблица, ".ТабличнаяЧасть.", ".");
	ОсновнаяТаблица = СтрЗаменить(ОсновнаяТаблица, ".СтандартнаяТабличнаяЧасть.", ".");
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РеквизитыТаблицы",   СтрокуВМассивРеквизитов(ТекущиеДанные.РеквизитыСтрокой));
	ПараметрыОткрытия.Вставить("ОсновнаяТаблица",    ОсновнаяТаблица);
	ПараметрыОткрытия.Вставить("ДинамическийСписок", ЛОЖЬ);
	ПараметрыОткрытия.Вставить("СистемнаяТаблица",   ТекущиеДанные.Раздел);
	
	ОткрытьФорму(Объект.ПутьКФормам + "СписокЭлементов", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокЭлементовПоРеквизитуОбъектаМетаданных(ТекущиеДанные)
	
	Если НЕ ТекущиеДанные.ЭтоПоле Тогда
		Возврат;
	КонецЕсли;
	
	ОсновнаяТаблица = ТекущиеДанные.Владелец;
	ОсновнаяТаблица = СтрЗаменить(ОсновнаяТаблица, ".ТабличнаяЧасть.", ".");
	ОсновнаяТаблица = СтрЗаменить(ОсновнаяТаблица, ".СтандартнаяТабличнаяЧасть.", ".");
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РеквизитыТаблицы", СтрокуВМассивРеквизитов(ТекущиеДанные.Имя));
	ПараметрыОткрытия.Вставить("ОсновнаяТаблица",  ОсновнаяТаблица);
	
	ОткрытьФорму(Объект.ПутьКФормам + "СписокЭлементов", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияОбъектовПослеВыбораЭлемента(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ОбъектыМетаданных.ТекущаяСтрока = ВыбранныйЭлемент.Значение;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьФормуСпискаПоОбъектуМетаданных(ПолноеИмя)
	
	Если СтрНачинаетсяС(ПолноеИмя, "ФункциональныеОпции") Тогда
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмя);
		ЧастиОбъектаМетаданных = СтрРазделить(ОбъектМетаданных.Хранение.ПолноеИмя(), ".");
	Иначе
		ЧастиОбъектаМетаданных = СтрРазделить(ПолноеИмя, ".");
	КонецЕсли;
	
	Возврат ЧастиОбъектаМетаданных[0] + "." + ЧастиОбъектаМетаданных[1] + "." + ?(ЧастиОбъектаМетаданных[0] = "Константа",  "ФормаКонстант", "ФормаСписка");
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область РаботаСПравамиДоступа

#Область Общие

&НаКлиенте
Процедура ИнициализироватьРаботаСПравамиДоступа()
	
	ПравилаРасшифровкиПраваДоступа = СформироватьПравилаРасшифровкиПраваДоступа();
	ПоследняяКомандаВыбора = Неопределено;
	АнализироватьТолькоИнтерфейсныеОбъекты = Истина;
	ИнициализироватьРаботаСМетаданными();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьРасшифровкуОбъектаВПравахДоступа(Область)
	
	ТекстОшибки = "";
	Попытка
		
		Если Область.Текст = "" Тогда
			Возврат;
		КонецЕсли; 
		
		ПервоначальныеДанныеЗаполнены = Ложь;
		
		Правило = ПравилаРасшифровкиПраваДоступа[ПоследняяКомандаВыбора];
		
		Если Правило = Неопределено Тогда
			Возврат
		КонецЕсли;
		
		ЗначениеПоиска = ?(СтрНайти(ПоследняяКомандаВыбора, "Объект") <> 0, РаботаСМетаданными.ПолучитьПолноеИмяОбъектаМетаданных(Область.Текст), Область.Текст);
		
		ИдентификаторСтроки = ПолучитьИдентификаторСтрокиКлиент(Правило,
			ЗначениеПоиска,
			ПервоначальныеДанныеЗаполнены,
			Элементы[Правило.ТаблицаПоиска].Отображение);
		
		Если ИдентификаторСтроки = Неопределено И ПервоначальныеДанныеЗаполнены Тогда
			ИдентификаторСтроки = ПолучитьИдентификаторСтрокиКлиент(Правило,
				ЗначениеПоиска,
				ПервоначальныеДанныеЗаполнены,
				Элементы[Правило.ТаблицаПоиска].Отображение,
				Истина);
		КонецЕсли;
		
		Если ИдентификаторСтроки <> Неопределено Тогда
			
			Элементы.ГруппаВидыОтборов.ТекущаяСтраница = Элементы[Правило.СтраницаПерехода];
			Элементы[Правило.ТаблицаПоиска].ТекущаяСтрока = ИдентификаторСтроки;
			
			ПараметрыОбработки = Новый Структура;
			ПараметрыОбработки.Вставить("ИмяОбработки", Правило.ПараметрПроцедурыРасшифровки);
			ВыполнитьОбработкуОповещения(Новый ОписаниеОповещения(Правило.ПроцедураРасшифровки, ЭтотОбъект, ПараметрыОбработки));
			
		Иначе
			ТекстОшибки = НСтр("ru = 'Расшифровка по текущей строке не найдена.'");
		КонецЕсли;
		
	Исключение
		ТекстОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Если ТекстОшибки <> "" Тогда
		СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РолиВыборСобытие(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПоследняяКомандаВыбора = ДополнительныеПараметры.ИмяОбработки;
	
	Если ДополнительныеПараметры.ИмяОбработки = "РолиКартинкаПользователь" Тогда
		РаботаСМетаданными.ПолучитьПраваПоРолямИПользователям(ЭтотОбъект, "Роли");
	ИначеЕсли ДополнительныеПараметры.ИмяОбработки = "РолиКартинкаОбъект" Тогда
		РаботаСМетаданными.ПолучитьПраваОбъектовМетаданныхПоРолиПользователю(ЭтотОбъект, "Роли");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиВыборСобытие(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПоследняяКомандаВыбора = ДополнительныеПараметры.ИмяОбработки;
	
	Если ДополнительныеПараметры.ИмяОбработки = "ПользователиКартинкаРоль" Тогда
		РаботаСМетаданными.ПолучитьПраваПоРолямИПользователям(ЭтотОбъект, "Пользователи");
	ИначеЕсли ДополнительныеПараметры.ИмяОбработки = "ПользователиКартинкаОбъект" Тогда
		РаботаСМетаданными.ПолучитьПраваОбъектовМетаданныхПоРолиПользователю(ЭтотОбъект, "Пользователи");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокРолейСобытие(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	РаботаСМетаданными.ЗаполнитьСписокРолей(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПользователейСобытие(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	РаботаСМетаданными.ЗаполнитьСписокПользователей(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область Частные

&НаКлиенте
Функция ПолучитьИдентификаторСтрокиКлиент(Правило, ЗначениеПоиска, ПервоначальныеДанныеЗаполнены, ТипДанных, Перезаполнять = Ложь)
	
	Результат = Неопределено;
	
	Если Элементы[Правило.ТаблицаПоиска].Отображение = ОтображениеТаблицы.Список Тогда
	
		Если Перезаполнять Тогда
			ЭтотОбъект[Правило.ТаблицаПоиска].Очистить();
			ВыполнитьОбработкуОповещения(Новый ОписаниеОповещения(Правило.ПроцедураЗаполнения, ЭтотОбъект));
		Иначе
			Если ЭтотОбъект[Правило.ТаблицаПоиска].Количество() = 0 Тогда
				ВыполнитьОбработкуОповещения(Новый ОписаниеОповещения(Правило.ПроцедураЗаполнения, ЭтотОбъект));
			Иначе
				ПервоначальныеДанныеЗаполнены = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ОтборСтрок = Новый Структура;
		ОтборСтрок.Вставить(Правило.КолонкаПоиска, ЗначениеПоиска);

		НайденныеСтроки = ЭтотОбъект[Правило.ТаблицаПоиска].НайтиСтроки(ОтборСтрок);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Результат = НайденныеСтроки[0].ПолучитьИдентификатор();
		КонецЕсли;
		
	ИначеЕсли Элементы[Правило.ТаблицаПоиска].Отображение = ОтображениеТаблицы.Дерево Тогда
		
		Если Перезаполнять Тогда
			Возврат Неопределено;
		Иначе
			
			ЭлементыДерева = ЭтотОбъект[Правило.ТаблицаПоиска].ПолучитьЭлементы();
			
			Если ЭлементыДерева.Количество() = 0 Тогда
				ВыполнитьОбработкуОповещения(Новый ОписаниеОповещения(Правило.ПроцедураЗаполнения, ЭтотОбъект));
			Иначе 
				ПервоначальныеДанныеЗаполнены = Истина;
			КонецЕсли;
			
			ВыполнитьПоискПоДеревуРекурсией(ЭлементыДерева, Правило.КолонкаПоиска, ЗначениеПоиска, Результат);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьПравилаРасшифровкиПраваДоступа()
	
	ПравилаРасшифровки = Новый Соответствие;
	
	ПравилоРасшифровки = ИнициализироватьПравилоРасшифровки();
	ПравилоРасшифровки.СтраницаПерехода             = "ГруппаРоли";
	ПравилоРасшифровки.ТаблицаПоиска                = "Роли";
	ПравилоРасшифровки.КолонкаПоиска                = "ИмяРоли";
	ПравилоРасшифровки.ПроцедураЗаполнения          = "ЗаполнитьСписокРолейСобытие";
	ПравилоРасшифровки.ПроцедураРасшифровки         = "РолиВыборСобытие";
	ПравилоРасшифровки.ПараметрПроцедурыРасшифровки = "РолиКартинкаПользователь";
	
	ПравилаРасшифровки.Вставить("ПользователиКартинкаРоль", ПравилоРасшифровки);
	
	ПравилоРасшифровки = ИнициализироватьПравилоРасшифровки();
	ПравилоРасшифровки.СтраницаПерехода             = "ГруппаРоли";
	ПравилоРасшифровки.ТаблицаПоиска                = "Роли";
	ПравилоРасшифровки.КолонкаПоиска                = "ИмяРоли";
	ПравилоРасшифровки.ПроцедураЗаполнения          = "ЗаполнитьСписокРолейСобытие";
	ПравилоРасшифровки.ПроцедураРасшифровки         = "РолиВыборСобытие";
	ПравилоРасшифровки.ПараметрПроцедурыРасшифровки = "РолиКартинкаОбъект";
	
	ПравилаРасшифровки.Вставить("ОМКартинкаРоль", ПравилоРасшифровки);
	
	ПравилоРасшифровки = ИнициализироватьПравилоРасшифровки();
	ПравилоРасшифровки.СтраницаПерехода             = "ГруппаПользователиИБ";
	ПравилоРасшифровки.ТаблицаПоиска                = "Пользователи";
	ПравилоРасшифровки.КолонкаПоиска                = "ИмяПользователя";
	ПравилоРасшифровки.ПроцедураЗаполнения          = "ЗаполнитьПользователейСобытие";
	ПравилоРасшифровки.ПроцедураРасшифровки         = "ПользователиВыборСобытие";
	ПравилоРасшифровки.ПараметрПроцедурыРасшифровки = "ПользователиКартинкаОбъект";
	
	ПравилаРасшифровки.Вставить("ОМКартинкаПользователь", ПравилоРасшифровки);
	
	ПравилоРасшифровки = ИнициализироватьПравилоРасшифровки();
	ПравилоРасшифровки.СтраницаПерехода             = "ГруппаПользователиИБ";
	ПравилоРасшифровки.ТаблицаПоиска                = "Пользователи";
	ПравилоРасшифровки.КолонкаПоиска                = "ИмяПользователя";
	ПравилоРасшифровки.ПроцедураЗаполнения          = "ЗаполнитьПользователейСобытие";
	ПравилоРасшифровки.ПроцедураРасшифровки         = "ПользователиВыборСобытие";
	ПравилоРасшифровки.ПараметрПроцедурыРасшифровки = "ПользователиКартинкаРоль";
	
	ПравилаРасшифровки.Вставить("РолиКартинкаПользователь", ПравилоРасшифровки);
	
	ПравилоРасшифровки = ИнициализироватьПравилоРасшифровки();
	ПравилоРасшифровки.СтраницаПерехода             = "ГруппаДеревоМетаданных";
	ПравилоРасшифровки.ТаблицаПоиска                = "ОбъектыМетаданных";
	ПравилоРасшифровки.КолонкаПоиска                = "ПолноеИмя";
	ПравилоРасшифровки.ПроцедураЗаполнения          = "ЗаполнитьМетаданныеСобытие";
	ПравилоРасшифровки.ПроцедураРасшифровки         = "ОбъектыМетаданныхВыборСобытие";
	ПравилоРасшифровки.ПараметрПроцедурыРасшифровки = "ОМКартинкаРоль";
	
	ПравилаРасшифровки.Вставить("РолиКартинкаОбъект", ПравилоРасшифровки);
	
	ПравилоРасшифровки = ИнициализироватьПравилоРасшифровки();
	ПравилоРасшифровки.СтраницаПерехода             = "ГруппаДеревоМетаданных";
	ПравилоРасшифровки.ТаблицаПоиска                = "ОбъектыМетаданных";
	ПравилоРасшифровки.КолонкаПоиска                = "ПолноеИмя";
	ПравилоРасшифровки.ПроцедураЗаполнения          = "ЗаполнитьМетаданныеСобытие";
	ПравилоРасшифровки.ПроцедураРасшифровки         = "ОбъектыМетаданныхВыборСобытие";
	ПравилоРасшифровки.ПараметрПроцедурыРасшифровки = "ОМКартинкаПользователь";
	
	ПравилаРасшифровки.Вставить("ПользователиКартинкаОбъект", ПравилоРасшифровки);
	
	Возврат ПравилаРасшифровки;
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
функция ИнициализироватьПравилоРасшифровки()
	
	Результат = Новый Структура;
	
	Результат.Вставить("СтраницаПерехода");
	Результат.Вставить("ТаблицаПоиска");
	Результат.Вставить("КолонкаПоиска");
	Результат.Вставить("ПроцедураЗаполнения");
	Результат.Вставить("ПроцедураРасшифровки");
	Результат.Вставить("ПараметрПроцедурыРасшифровки");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Выгрузка

#Область Общие

&НаКлиенте
Процедура ВыбратьФайлСохраненияНастроекВыгрузки()
	
#Если Не ВебКлиент Тогда
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьНастройкиВыгрузкиОкончаниеВыбора", ЭтотОбъект);
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Заголовок = "Сохранить файл Json";
	Диалог.Фильтр = "(*.json)|*.json";
	Диалог.Показать(ОписаниеОповещения);
	
#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайлЗагрузкиНастроекВыгрузки()
	
#Если Не ВебКлиент Тогда
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьНастройкиВыгрузкиОкончаниеВыбора", ЭтотОбъект);
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = "Открыть файл Json";
	Диалог.Фильтр = "(*.json)|*.json";
	Диалог.Показать(ОписаниеОповещения);

#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСпискаТипов(ТипПоиска = 0)
	
	ТекущиеДанные = Элементы.ОбъектыМетаданных.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТипПоиска",    ТипПоиска); // 1 - поиск ссылок на объект, 2 - поиск ссылок в объекте
	ПараметрыФормы.Вставить("Раздел",       ТекущиеДанные.Раздел);
	ПараметрыФормы.Вставить("ПолноеИмя",    ТекущиеДанные.ПолноеИмя);
	Если ТипПоиска = 0 И ЗначениеЗаполнено(ТекущиеДанные.ЗначениеТипа) Тогда
		ИмяТаблицы = СтрЗаменить(ТекущиеДанные.Владелец, ".ТабличнаяЧасть.", ".");
		ИмяТаблицы = СтрЗаменить(ИмяТаблицы,             ".Реквизит.",       ".");
		ПараметрыФормы.Вставить("ЗначениеТипа", ТекущиеДанные.ЗначениеТипа);
		ПараметрыФормы.Вставить("ИмяПоля",      ТекущиеДанные.Имя);
		ПараметрыФормы.Вставить("ИмяТаблицы",   ИмяТаблицы);
	КонецЕсли;
	
	ОткрытьФорму(Объект.ПутьКФормам + "ФормаСпискаТипов",
		ПараметрыФормы,
		ЭтотОбъект,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСтатусВыгрузкиОбъекта()
	
	ТекущиеДанные = Элементы.ОбъектыМетаданных.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСМетаданными.ПроставитьСтатусЭлемента(ТекущиеДанные, "Выгружать", ТекущиеДанные.Выгружать);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеОбъектов()
	
	АдресФайлаВоВременномХранилище = РаботаСМетаданными.ВыгрузитьДанныеОбъектов(ЭтотОбъект, Элементы.ОбъектыМетаданныхУказатьРежимВыгрузкиПоСсылке.Пометка);
	
	Если Не ПустаяСтрока(АдресФайлаВоВременномХранилище) Тогда
		ИмяФайла = НСтр("ru = 'Файл выгрузки.xml'");
		НачатьПолучениеФайлаССервера(АдресФайлаВоВременномХранилище, ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеОбъектовПоказатьВопрос()
	
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ЗагрузитьДанныеОбъектовПоказатьВопросЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(Объект.ПутьКФормам + "ПараметрыЗагрузки",
		Новый Структура,
		ЭтотОбъект,,,,
		ОписаниеОповещенияОЗавершении,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеОбъектовПоказатьВопросЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДанныеОбъектов(РезультатЗакрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеОбъектов(ОчищатьНеСовпадающиеЭлементы)
	
	ПараметрыДиалога = Новый ПараметрыДиалогаПомещенияФайлов();
	ПараметрыДиалога.МножественныйВыбор = Ложь;
	ПараметрыДиалога.Заголовок = "Выберите файл загрузки";
	ПараметрыДиалога.Фильтр = "(*.xml)|*.xml";
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОчищатьНеСовпадающиеЭлементы", ОчищатьНеСовпадающиеЭлементы);
	
	ОписаниеОповещенияЗавершение = Новый ОписаниеОповещения("ЗагрузитьДанныеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	НачатьПомещениеФайлаНаСервер(ОписаниеОповещенияЗавершение,,,, ПараметрыДиалога, УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область Частные

&НаКлиенте
Процедура ЗагрузитьДанныеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		СообщитьПользователю(НСтр("ru = 'Ошибка загрузки файла выгрузки'"));
		Возврат;
	КонецЕсли;
	
	РаботаСМетаданными.ЗагрузитьДанныеОбъектов(Результат.Адрес, ДополнительныеПараметры.ОчищатьНеСовпадающиеЭлементы);
	
КонецПроцедуры

#Если НЕ ВебКлиент Тогда

&НаКлиенте
Процедура СохранитьНастройкиВыгрузкиОкончаниеВыбора(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(ВыбранныеФайлы) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьJSON = ИнициализироватьВыгрузкуJSON(ВыбранныеФайлы[0]);
	СформироватьФайлНастроекВыгрузкиJSON(ЗаписьJSON);
	СообщитьПользователю(НСтр("ru = 'Настройки сохранены'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройкиВыгрузкиОкончаниеВыбора(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(ВыбранныеФайлы) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбъектыМетаданных.ПолучитьЭлементы().Количество() = 0 Тогда
		ЗаполнитьМетаданныеСобытие();
	КонецЕсли;
	
	ЧтениеJSON = ИнициализироватьЗагрузкуJSON(ВыбранныеФайлы[0]);
	ДанныеФайлаНастроек = ПрочитатьФайлНастроекJSON(ЧтениеJSON);
	ПрименитьФайлНастроекJSON(ДанныеФайлаНастроек);
	СообщитьПользователю(НСтр("ru = 'Настройки прочитаны'"));
	
КонецПроцедуры

&НаКлиенте
Функция ИнициализироватьВыгрузкуJSON(ИмяФайлаВыгрузки)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(, Символы.Таб);
	ЗаписьJSON.ОткрытьФайл(ИмяФайлаВыгрузки,,, ПараметрыЗаписиJSON);
	
	Возврат ЗаписьJSON;
	
КонецФункции

&НаКлиенте
Функция ИнициализироватьЗагрузкуJSON(ИмяФайлаЗагрузки)
	
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.ОткрытьФайл(ИмяФайлаЗагрузки);
	
	Возврат ЧтениеJSON;
	
КонецФункции

&НаКлиенте
Процедура СформироватьФайлНастроекВыгрузкиJSON(ЗаписьJSON, ДанныеВыгрузки = Неопределено, Уровень = 0)
	
	Уровень = Уровень + 1;
	
	Если Уровень = 1 Тогда
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("РежимВыгрузкиПоСсылке");
		ЗаписьJSON.ЗаписатьЗначение(Элементы.ОбъектыМетаданныхУказатьРежимВыгрузкиПоСсылке.Пометка);
		ЗаписьJSON.ЗаписатьИмяСвойства("Строки");
		ЗаписьJSON.ЗаписатьНачалоМассива();
	КонецЕсли;
	
	Если ДанныеВыгрузки = Неопределено Тогда
		ДанныеВыгрузки = ОбъектыМетаданных;
	КонецЕсли;
	
	ЭлементыВыгрузки = ДанныеВыгрузки.ПолучитьЭлементы();
	
	Для Каждого ЭлементВыгрузки Из ЭлементыВыгрузки Цикл
		
		Если Не ЭлементВыгрузки.ЭтоОсновнаяТаблица Тогда
			СформироватьФайлНастроекВыгрузкиJSON(ЗаписьJSON, ЭлементВыгрузки, Уровень);
		КонецЕсли;
		
		Если ЭлементВыгрузки.ЭтоОсновнаяТаблица И ЭлементВыгрузки.Выгружать Тогда
			ЗаписатьСтрокуФайлаНастроекJSON(ЗаписьJSON, ЭлементВыгрузки.ПолноеИмя, ЭлементВыгрузки.ПараметрыВыгрузки, ЭлементВыгрузки.Выгружать, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Уровень = 1 Тогда
		ЗаписьJSON.ЗаписатьКонецМассива();
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		ЗаписьJSON.Закрыть();
	КонецЕсли;
	
	Уровень = Уровень - 1;
	
КонецПроцедуры

&НаКлиенте
Функция ПрочитатьФайлНастроекJSON(ЧтениеJSON)
	
	ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	Если ДанныеJSON.Свойство("РежимВыгрузкиПоСсылке") Тогда
		Элементы.ОбъектыМетаданныхУказатьРежимВыгрузкиПоСсылке.Пометка = ДанныеJSON.РежимВыгрузкиПоСсылке;
	КонецЕсли;
	
	ДанныеФайлаНастроек = Новый Соответствие();
	Для Каждого Строка Из ДанныеJSON.Строки Цикл
		ДанныеФайлаНастроек.Вставить(Строка.ПолноеИмя, Строка);
	КонецЦикла;
	
	Возврат ДанныеФайлаНастроек;
	
КонецФункции

&НаКлиенте
Процедура ПрименитьФайлНастроекJSON(ДанныеФайлаНастроек, ДанныеВыгрузки = Неопределено)
	
	Если ДанныеВыгрузки = Неопределено Тогда
		ДанныеВыгрузки = ОбъектыМетаданных;
	КонецЕсли;
	
	ЭлементыВыгрузки = ДанныеВыгрузки.ПолучитьЭлементы();
	
	Для Каждого ЭлементВыгрузки Из ЭлементыВыгрузки Цикл
		
		Если Не ЭлементВыгрузки.ЭтоОсновнаяТаблица Тогда
			ПрименитьФайлНастроекJSON(ДанныеФайлаНастроек, ЭлементВыгрузки);
		КонецЕсли;
		
		НастройкаВыгрузки = ДанныеФайлаНастроек.Получить(ЭлементВыгрузки.ПолноеИмя);
		
		Если ЭлементВыгрузки.ЭтоОсновнаяТаблица
			И ЗначениеЗаполнено(НастройкаВыгрузки) Тогда
			ЭлементВыгрузки.Выгружать = НастройкаВыгрузки.Выгружать;
			Если ЭлементВыгрузки.Выгружать Тогда
				РаботаСМетаданными.ПроставитьСтатусЭлемента(ЭлементВыгрузки, "Выгружать");
			КонецЕсли;
			Если НастройкаВыгрузки.Свойство("ПараметрыВыгрузки") Тогда
				ЭлементВыгрузки.ПараметрыВыгрузки = НастройкаВыгрузки.ПараметрыВыгрузки;
				ЭлементВыгрузки.КартинкаПараметрыВыгрузки = БиблиотекаКартинок.ПараметрыВыводаКомпоновкиДанных;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьСтрокуФайлаНастроекJSON(ЗаписьJSON, ПолноеИмя, ПараметрыВыгрузки, Выгружать, ВыгружатьПриНеобходимости)
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("ПолноеИмя");
	ЗаписьJSON.ЗаписатьЗначение(ПолноеИмя);
	ЗаписьJSON.ЗаписатьИмяСвойства("Выгружать");
	ЗаписьJSON.ЗаписатьЗначение(Выгружать);
	ЗаписьJSON.ЗаписатьИмяСвойства("ВыгружатьПриНеобходимости");
	ЗаписьJSON.ЗаписатьЗначение(ВыгружатьПриНеобходимости);
	ЗаписьJSON.ЗаписатьИмяСвойства("ПолноеИмя");
	ЗаписьJSON.ЗаписатьЗначение(ПолноеИмя);
	Если ЗначениеЗаполнено(ПараметрыВыгрузки) Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства("ПараметрыВыгрузки");
		ЗаписьJSON.ЗаписатьЗначение(ПараметрыВыгрузки);
	КонецЕсли;
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
КонецПроцедуры

#КонецЕсли

#КонецОбласти

#КонецОбласти

#Область РаботаСДаннымиИнформационнойБазы

#Область Общие

&НаКлиенте
Процедура УстановитьСоединениеСБДНаТолстомКлиенте()
	
	Элементы.ФормаУстановитьСоединениеСУБД.Пометка = НЕ Элементы.ФормаУстановитьСоединениеСУБД.Пометка;
	
#Если ТолстыйКлиентУправляемоеПриложение Тогда
	
	Если Элементы.ФормаУстановитьСоединениеСУБД.Пометка Тогда
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	1 КАК Флаг
		|ПОМЕСТИТЬ ВТСоединениеСУБД
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Флаг");
		
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.Выполнить();
		
	Иначе
		МенеджерВременныхТаблиц = Неопределено;
	КонецЕсли;
	
#Иначе
	
	ПоказатьПредупреждение(, "Соединение с СУБД можно установить только в толстом клиенте!");
	Элементы.ФормаУстановитьСоединениеСУБД.Пометка = Ложь;
	
#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОчисткуЖурналаРегистрации()
	
	СократитьЖурналРегистрацииПослеВводаДаты = Новый ОписаниеОповещения(
		"СократитьЖурналРегистрацииПослеВводаДаты",
		ЭтотОбъект);
	
	ТекущаяДата = ПолучитьТекущуюДату();
	
	ПоказатьВводДаты(СократитьЖурналРегистрацииПослеВводаДаты, ТекущаяДата);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОпределенияУникальногоИдентификатора()
	
	ТекущиеДанные = Элементы.ОбъектыМетаданных.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Раздел",           ТекущиеДанные.Раздел);
	ПараметрыФормы.Вставить("ПолноеИмяОбъекта", ТекущиеДанные.ПолноеИмя);
	
	ОткрытьФорму(Объект.ПутьКФормам + "ФормаУникальныйИдентификатор",
		ПараметрыФормы,
		ЭтотОбъект,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПараметровВыгрузки()
	
	ТекущиеДанные = Элементы.ОбъектыМетаданных.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектыМетаданныхЗаполнитьДочерниеЭлементы(ТекущиеДанные);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Раздел",              ТекущиеДанные.Раздел);
	ПараметрыФормы.Вставить("ПолноеИмя",           ТекущиеДанные.ПолноеИмя);
	ПараметрыФормы.Вставить("ТекстНастроек",       ТекущиеДанные.ПараметрыВыгрузки);
	ПараметрыФормы.Вставить("ИдентификаторСтроки", ТекущиеДанные.ПолучитьИдентификатор());
	
	ВыборПараметровВыгрузки = Новый ОписаниеОповещения("ВыборПараметровВыгрузки", ЭтотОбъект, ПараметрыФормы);
	
	ОткрытьФорму(Объект.ПутьКФормам + "ПараметрыВыгрузки",
		ПараметрыФормы,
		ЭтотОбъект,,,,
		ВыборПараметровВыгрузки,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПоискСКДПоТекстуЗапроса()
	
	ТекущиеДанные = Элементы.ОбъектыМетаданных.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекущиеДанные.ЭтоПоле Тогда
		СообщитьПользователю(НСтр("ru = 'Для анализа необходимо выбрать поле'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ЗначениеТипа) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЗначениеТипа <> "Хранилище значения" Тогда
		СообщитьПользователю(НСтр("ru = 'Должно быть выбрано поле с типом ""Хранилище значения""'"));
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяТаблицы", ТекущиеДанные.Владелец);
	ДополнительныеПараметры.Вставить("ИмяПоля",    ТекущиеДанные.Имя);
	
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(
		"НайтиСКДПоТекстуЗапросаОкончаниеВводаТекстаПоиска",
		ЭтотОбъект,
		ДополнительныеПараметры);
	ПоказатьВводСтроки(ОписаниеОповещенияОЗавершении,, НСтр("ru = 'Текст части запроса для поиска'"));
	
КонецПроцедуры

&НаСервере
Процедура УдалитьИсториюДанных()
	
	ПрикладныеМетаданные = Новый Массив;
	ПрикладныеМетаданные.Добавить("Константы");
	ПрикладныеМетаданные.Добавить("Справочники");
	ПрикладныеМетаданные.Добавить("Документы");
	ПрикладныеМетаданные.Добавить("РегистрыСведений");
	ПрикладныеМетаданные.Добавить("БизнесПроцессы");
	ПрикладныеМетаданные.Добавить("Задачи");
	ПрикладныеМетаданные.Добавить("ПланыСчетов");
	ПрикладныеМетаданные.Добавить("ПланыВидовХарактеристик");
	ПрикладныеМетаданные.Добавить("ПланыОбмена");
	ПрикладныеМетаданные.Добавить("ПланыВидовРасчета");
	
	Для Каждого ИмяМетаданных Из ПрикладныеМетаданные Цикл
		Для Каждого ОбъектМетаданных Из Метаданные[ИмяМетаданных] Цикл
			Если ОбъектМетаданных.ИсторияДанных = Метаданные.СвойстваОбъектов.ИспользованиеИсторииДанных.НеИспользовать Тогда
				Продолжить;
			КонецЕсли;
			ИсторияДанных.УдалитьВерсии(ОбъектМетаданных);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗапуститьУдалениеПомеченныхНаСервере()
	
	УстановитьМонопольныйРежим(Истина);
	УстановитьПривилегированныйРежим(Истина);
	ПомеченныеНаУдаление = НайтиПомеченныеНаУдаление();
	УдалитьОбъекты(ПомеченныеНаУдаление, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Частные

&НаКлиенте
Процедура ВыборПараметровВыгрузки(Результат, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = Элементы.ОбъектыМетаданных.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ПараметрыВыгрузки = Результат;
	Если ЗначениеЗаполнено(ТекущиеДанные.ПараметрыВыгрузки) Тогда
		ТекущиеДанные.КартинкаПараметрыВыгрузки = БиблиотекаКартинок.ПараметрыВыводаКомпоновкиДанных;
	Иначе
		ТекущиеДанные.КартинкаПараметрыВыгрузки = БиблиотекаКартинок.ПолеВводаВыбрать;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СократитьЖурналРегистрацииПослеВводаДаты(Дата, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Возврат;
	КонецЕсли;
	
	СократитьЖурналРегистрацииНаСервере(Дата);
	
КонецПроцедуры

&НаСервере
Процедура СократитьЖурналРегистрацииНаСервере(Дата)
	
	СократитьЖурналРегистрации(Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиСКДПоТекстуЗапросаОкончаниеВводаТекстаПоиска(Строка, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Строка) Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("СтрокаПоиска", Строка);
	
	НайтиСКДПоТекстуЗапросаНаСервере(ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НайтиСКДПоТекстуЗапросаНаСервере(ДанныеПоиска)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДанныеТаблицы.ИмяПоля
	|ИЗ
	|	&ИмяТаблицы КАК ДанныеТаблицы");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяТаблицы", ДанныеПоиска.ИмяТаблицы);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяПоля",     ДанныеПоиска.ИмяПоля);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НастройкиСКД = Выборка[ДанныеПоиска.ИмяПоля].Получить();
		
		Если НастройкиСКД = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(НастройкиСКД) <> Тип("НастройкиКомпоновкиДанных") Тогда
			СообщитьПользователю(НСтр("ru = 'В поле должны храниться настройки компоновки данных'"));
			Возврат;
		КонецЕсли;
		
		КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(НастройкиСКД);
		КомпоновщикНастроекКомпоновкиДанных.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.Полное);
		Источник = КомпоновщикНастроекКомпоновкиДанных.ПолучитьИсточникДоступныхНастроек();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область РаботаСТерминалом

#Область Общие

&НаКлиенте
Процедура ИнициализироватьТерминал()
	
	Если ПустаяСтрока(СредаИсполнения) Тогда
		СредаИсполнения = "1С";
		КонтекстИсполнения = "Сервер";
	КонецЕсли;
	
	Если СредаИсполнения = "1С" Тогда
		ТекстТерминала = "// СтруктураПараметров - Структура" + Символы.ПС + "// МассивПараметров - Массив" + Символы.ПС + Символы.ПС;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСкриптТеримналаВКонтесте()
	
	Если СредаИсполнения = "1С" И КонтекстИсполнения = "Сервер" Тогда
		ВыполнитьСкриптТеримналаНаСервере();
	ИначеЕсли СредаИсполнения = "1С" И КонтекстИсполнения = "Клиент" Тогда
		ВыполнитьСкриптТеримналаНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Частные

&НаКлиенте
Процедура ВыполнитьСкриптТеримналаНаКлиенте()
	
#Если Не ВебКлиент Тогда
	//@skip-check module-unused-local-variable
	СтруктураПараметров = Новый Структура;
	//@skip-check module-unused-local-variable
	МассивПараметров = Новый Массив;
	
	Выполнить(ТекстТерминала);
#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьСкриптТеримналаНаСервере()
	
	//@skip-check module-unused-local-variable
	СтруктураПараметров = Новый Структура;
	//@skip-check module-unused-local-variable
	МассивПараметров = Новый Массив;
	
	Если БезопасныйРежим Тогда
		УстановитьБезопасныйРежим(Истина);
	КонецЕсли;
	//@skip-check server-execution-safe-mode
	Выполнить(ТекстТерминала);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПолнотекстовыйПоиск

#Область Общие

&НаСервере
Процедура ВыполнитьПолнотекстовыйПоискНаСервере()
	
	НайденныеДанные.Очистить();
	
	СписокПолнотекстовогоПоиска = ПолнотекстовыйПоиск.СоздатьСписок();
	СписокПолнотекстовогоПоиска.СтрокаПоиска            = СтрокаПолнотекстовогоПоиска;
	СписокПолнотекстовогоПоиска.ПорогНечеткости         = ПорогНечеткости;
	СписокПолнотекстовогоПоиска.ИспользованиеМетаданных = ИспользованиеМетаданныхПолнотекстовогоПоиска.Использовать;
	СписокПолнотекстовогоПоиска.ПолучатьОписание        = Истина;
	СписокПолнотекстовогоПоиска.ПолучатьПредставление   = Истина;
	СписокПолнотекстовогоПоиска.ПерваяЧасть();
	
	ПозицияПоиска = 0;
	ПолноеКоличество = СписокПолнотекстовогоПоиска.ПолноеКоличество();
	
	Пока 1 = 1 Цикл
		
		Количество = СписокПолнотекстовогоПоиска.Количество();
		
		Для Каждого ЭлементПоиска Из СписокПолнотекстовогоПоиска Цикл
			СтрокаДанных = НайденныеДанные.Добавить();
			СтрокаДанных.ЗначениеПоиска = ЭлементПоиска.Значение;
			СтрокаДанных.Метаданные     = ЭлементПоиска.Метаданные.ПолноеИмя();
			СтрокаДанных.Описание       = ЭлементПоиска.Описание;
			СтрокаДанных.Представление  = ЭлементПоиска.Представление;
		КонецЦикла;
		
		ПозицияПоиска = ПозицияПоиска + Количество;
		
		Если ПозицияПоиска >= ПолноеКоличество
			Или ПозицияПоиска >= ЛимитПоиска Тогда
			Прервать;
		КонецЕсли;
		
		СписокПолнотекстовогоПоиска.СледующаяЧасть();
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтатусПолнотекстовогоИндексаНаСервере()
	
	ШаблонВерсии       = НСтр("ru = 'Версия полнотекстового поиска %1.'");
	ШаблонСтатуса      = НСтр("ru = 'Индекс %1 актуален (%2).'");
	ШаблонКорректности = НСтр("ru = 'Индекс %1 корректен.'");
	
	ВерсияПоиска     = ПолнотекстовыйПоиск.ПолучитьВерсиюПолнотекстовогоПоиска();
	ДатаАктуальности = ПолнотекстовыйПоиск.ДатаАктуальности();
	ИндексАктуален   = ПолнотекстовыйПоиск.ИндексАктуален();
	ИндексКорректен  = ПолнотекстовыйПоиск.ПроверитьИндекс();
	
	ТекстВерсии       = СтрШаблон(ШаблонВерсии,       ВерсияПоиска);
	ТекстСтатуса      = СтрШаблон(ШаблонСтатуса,      ?(ИндексАктуален, "", НСтр("ru = 'не'")), Формат(ДатаАктуальности, "ДЛФ=DT;"));
	ТекстКорректности = СтрШаблон(ШаблонКорректности, ?(ИндексКорректен, "", НСтр("ru = 'не'")));
	
	СтатусПолнотекстовогоИндекса = ТекстВерсии + Символы.ПС + ТекстСтатуса + Символы.ПС + ТекстКорректности;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область РежимыФормы

#Область Общие

&НаКлиенте
Процедура ИнициализироватьРежимы()
	
	Элементы.ОбъектыМетаданныхУстановитьРежимАнализаДанных.Пометка  = РежимАнализДанных;
	Элементы.ОбъектыМетаданныхУстановитьРежимАнализаПрав.Пометка    = РежимАнализПрав;
	Элементы.ОбъектыМетаданныхУстановитьРежимАнализаТаблиц.Пометка  = РежимАнализТаблиц;
	Элементы.ОбъектыМетаданныхУстановитьОтборПоЗаполненным.Пометка = ОтборПоЗаполненным;
	Элементы.ОбъектыМетаданныхУстановитьОтборПоОтмеченным.Пометка = ОтборПоОтмеченным;
	
	ОтобразитьСтраницыИКолонкиПоРежимам();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьСтраницыИКолонкиПоРежимам()
	
	Элементы.ГруппаРоли.Видимость                                        = РежимАнализПрав;
	Элементы.ГруппаПользователиИБ.Видимость                              = РежимАнализПрав;
	
	Элементы.ГруппаПраваДоступа.Видимость = РежимАнализПрав;
	Элементы.Индексы.Видимость            = РежимАнализТаблиц;
	
	Элементы.ОМВыгружать.Видимость                  = РежимАнализДанных;
	Элементы.ОМКартинкаПараметрыВыгрузки.Видимость  = РежимАнализДанных;
	Элементы.ОМКоличествоЭлементов.Видимость        = РежимАнализДанных;
	Элементы.ОМКоличествоПредопределенных.Видимость = РежимАнализДанных;
	Элементы.ОМИмяСУБД.Видимость              = РежимАнализТаблиц;
	Элементы.ОМКартинкаРоль.Видимость         = РежимАнализПрав;
	Элементы.ОМКартинкаПользователь.Видимость = РежимАнализПрав;
	
	Элементы.ОбъектыМетаданныхУстановитьОтборПоЗаполненным.Видимость = РежимАнализДанных;
	Элементы.ОбъектыМетаданныхУстановитьОтборПоОтмеченным.Видимость = РежимАнализДанных;
	Элементы.ОбъектыМетаданныхЗапуститьУдалениеПомеченных.Видимость = РежимАнализДанных;
	
КонецПроцедуры

&НаСервере
Процедура Инициализировать()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Объект.ПутьКФормам = ОбработкаОбъект.Метаданные().ПолноеИмя() + ".Форма.";
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ОМИмяОбъектаМетаданныхСГиперссылкой");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ОМИмяОбъектаМетаданных");
	
	ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ОбъектыМетаданных.Выключен");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветРамкиКнопки);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ОМВыгружать");
	
	ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ОбъектыМетаданных.ЭтоОсновнаяТаблица");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Ложь;
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ОМИмяСУБД");
	
	ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ОбъектыМетаданных.ВходитВИндексСУБД");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветФонаВыделенияПоля);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента      = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ОМТипСГиперссылками");
	
	ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ОбъектыМетаданных.ЗаголовокТипа");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.ПравоеЗначение = НСтр("ru = '<Несколько типов>'");
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ОМТипБезГиперссылок");
	
	ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ОбъектыМетаданных.ЗаголовокТипа");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = НСтр("ru = '<Несколько типов>'");
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Пока отключаем поля с гиперссылкой
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	МассивПолей = Новый Массив;
	МассивПолей.Добавить("ОМКартинкаСГиперссылкой");
	МассивПолей.Добавить("ОМИмяДополнениеСГиперссылкой");
	МассивПолей.Добавить("ОМИмяОбъектаМетаданныхСГиперссылкой");
	
	УстановитьПоляДляУсловногоОформления(Элемент, МассивПолей);
	
	Если ОтборПоЗаполненным Тогда
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
		ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ОбъектыМетаданных.ОбъектЗаполнен");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Ложь;
		КолонкиДерева                = Новый Массив;
		
		КолонкиДерева.Добавить("ОМИмяОбъектаМетаданныхСГиперссылкой");
		КолонкиДерева.Добавить("ОМИмяДополнениеСГиперссылкой");
		КолонкиДерева.Добавить("ОМКартинкаСГиперссылкой");
		КолонкиДерева.Добавить("ОМИмяОбъектаМетаданных");
		КолонкиДерева.Добавить("ОМИмяДополнение");
		КолонкиДерева.Добавить("ОМКартинка");
		КолонкиДерева.Добавить("ОМТипСГиперссылками");
		КолонкиДерева.Добавить("ОМТипБезГиперссылок");
		КолонкиДерева.Добавить("ОМКоличествоЭлементов");
		КолонкиДерева.Добавить("ОМКоличествоПредопределенных");
		КолонкиДерева.Добавить("ОМКартинкаРоль");
		КолонкиДерева.Добавить("ОМКартинкаПользователь");
		КолонкиДерева.Добавить("ОМИмяСУБД");
		КолонкиДерева.Добавить("ОМКартинкаПараметрыВыгрузки");
		КолонкиДерева.Добавить("ОМВыгружать");
		
		УстановитьПоляДляУсловногоОформления(Элемент, КолонкиДерева);
		
	КонецЕсли;
	
	Если ОтборПоОтмеченным Тогда
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
		ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ОбъектыМетаданных.Выгружать");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Ложь;
		КолонкиДерева                = Новый Массив;
		
		КолонкиДерева.Добавить("ОМИмяОбъектаМетаданныхСГиперссылкой");
		КолонкиДерева.Добавить("ОМИмяДополнениеСГиперссылкой");
		КолонкиДерева.Добавить("ОМКартинкаСГиперссылкой");
		КолонкиДерева.Добавить("ОМИмяОбъектаМетаданных");
		КолонкиДерева.Добавить("ОМИмяДополнение");
		КолонкиДерева.Добавить("ОМКартинка");
		КолонкиДерева.Добавить("ОМТипСГиперссылками");
		КолонкиДерева.Добавить("ОМТипБезГиперссылок");
		КолонкиДерева.Добавить("ОМКоличествоЭлементов");
		КолонкиДерева.Добавить("ОМКоличествоПредопределенных");
		КолонкиДерева.Добавить("ОМКартинкаРоль");
		КолонкиДерева.Добавить("ОМКартинкаПользователь");
		КолонкиДерева.Добавить("ОМИмяСУБД");
		КолонкиДерева.Добавить("ОМКартинкаПараметрыВыгрузки");
		КолонкиДерева.Добавить("ОМВыгружать");
		
		УстановитьПоляДляУсловногоОформления(Элемент, КолонкиДерева);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Прочее

#Область Общие

&НаКлиенте
Процедура УстановитьПометкуДляКнопки(Элемент, Режим)
	
	Элемент.Пометка = Не Элемент.Пометка;
	Режим = Элемент.Пометка;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПоляДляУсловногоОформления(Элемент, МассивПолей)

	Для Каждого ИмяПоля Из МассивПолей Цикл
		ОформляемоеПоле      = Элемент.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция СтрокуВМассивРеквизитов(Знач Строка)
	
	Строка = СтрЗаменить(Строка, ";", Символы.ПС);
	
	Массив = Новый Массив;
	
	Для ф = 1 По СтрЧислоСтрок(Строка) Цикл
		
		Элемент = СтрПолучитьСтроку(Строка, ф);
		
		Если ПустаяСтрока(Элемент) Тогда
			Продолжить;
		КонецЕсли;
		
		Массив.Добавить(Элемент);
		
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СообщитьПользователю(Текст)
	
	СообщениеПользователю = Новый СообщениеПользователю;
	СообщениеПользователю.Текст = Текст;
	СообщениеПользователю.Сообщить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТекущуюДату()
	
	Возврат ТекущаяДатаСеанса();
	
КонецФункции

#КонецОбласти

#Область Частные

&НаКлиенте
Процедура ВыполнитьПоискПоДеревуРекурсией(ЭлементыДерева, ИмяКолонки, ЗначениеПоиска, ИдентификаторСтроки = Неопределено) 
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		
		Если ЭлементДерева[ИмяКолонки] = ЗначениеПоиска Тогда
			ИдентификаторСтроки = ЭлементДерева.ПолучитьИдентификатор();
			Возврат;
		КонецЕсли;
		
		ВыполнитьПоискПоДеревуРекурсией(ЭлементДерева.ПолучитьЭлементы(), ИмяКолонки, ЗначениеПоиска, ИдентификаторСтроки);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти