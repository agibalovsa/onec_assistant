#Область ОписаниеПеременных

&НаСервере
Перем ОбъектОбработки;

&НаСервере
Перем КартинкиМетаданных;

&НаСервере
Перем ЛокальнаяБиблиотекаКартинок;

&НаСервере
Перем СтруктураХранения;

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСМетаданными

#Область Общие

&НаКлиенте
Процедура ЗаполнитьМетаданные(Форма, ЗаполнитьСтруктуруХранения = Ложь) Экспорт
	
	Если ЗаполнитьСтруктуруХранения Тогда
		ПоказатьПредупреждение(Новый ОписаниеОповещения, НСтр("ru = 'Внимание. В режиме ""Анализ таблиц"", заполнение дерева метаданных происходит в несколько раз дольше.'"));
	КонецЕсли;
	
	ДобавитьМетаданныеПоТипу(ЗаполнитьСтруктуруХранения);
	ПолучитьДанныеКоллекцииФормы(ОбъектыМетаданных, Форма.ОбъектыМетаданных);
	Форма.КоличествоПолейМетаданных = КоличествоПолейМетаданных;
	Форма.КоличествоУзловМетаданных = КоличествоУзловМетаданных;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДочерниеМетаданные(Форма, ТекущиеДанные) Экспорт
	
	МетаданныеПодраздела = ТекущиеДанные.ПолучитьЭлементы();
	КоличествоПолейМетаданных = КоличествоПолейМетаданных - МетаданныеПодраздела.Количество();
	МетаданныеПодраздела.Очистить();
	
	ЭлементыОбъектовМетаданных = ОбъектыМетаданных.ПолучитьЭлементы();
	ЭлементОбъектовМетаданных = ЭлементыОбъектовМетаданных.Добавить();
	ЗаполнитьЗначенияСвойств(ЭлементОбъектовМетаданных, ТекущиеДанные);
	
	ЗаполнитьДочерниеМетаданныеНаСервере(ЭлементОбъектовМетаданных.ПолучитьИдентификатор());
	
	ПолучитьДанныеКоллекцииФормы(ОбъектыМетаданных, ТекущиеДанные, 1);
	
	ТекущиеДанные.НеобходимоДетализировать = Ложь;

	Форма.КоличествоПолейМетаданных = КоличествоПолейМетаданных;
	Форма.КоличествоУзловМетаданных = КоличествоУзловМетаданных;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМетаданныеПоРазделам() Экспорт
	
	МетаданныеПоРазделам = ПолучитьМетаданныеПоРазделамНаСервере();
	
	Возврат МетаданныеПоРазделам;
	
КонецФункции

&НаКлиенте
Функция ПолучитьПоляМетаданныхПоРазделу(Раздел, ИмяМетаданных, ТолькоСсылочные = Ложь) Экспорт
	
	РеквизитыМетаданныеПоРазделу = ПолучитьПоляМетаданныхПоРазделуНаСервере(Раздел, ИмяМетаданных, ТолькоСсылочные);
	
	Возврат РеквизитыМетаданныеПоРазделу;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьОбъектыМетаданныхПоПризнаку(ОтбираемыеОбъектыМетаданных, ТипПризнака, ЗначениеПризнака)
	
	ОбъектыМетаданныхПоПризнаку = ОбъектыМетаданных.ПолучитьЭлементы();
	ОбъектыМетаданныхПоПризнаку.Очистить();
	
	ЭлементыОбъектовМетаданных = ОтбираемыеОбъектыМетаданных.ПолучитьЭлементы()[0].ПолучитьЭлементы();
	Для Каждого ЭлементОбъектаМетаданных Из ЭлементыОбъектовМетаданных Цикл
		Если ЭлементОбъектаМетаданных.Раздел = "Общие" Тогда
			ЭлементыОбъектовМетаданныхОбщие = ЭлементОбъектаМетаданных.ПолучитьЭлементы();
			Для Каждого ЭлементОбъектаМетаданныхОбщий Из ЭлементыОбъектовМетаданныхОбщие Цикл
				ЭлементыОбъектовМетаданныхПоПризнаку = ЭлементОбъектаМетаданныхОбщий.ПолучитьЭлементы();
				Для Каждого ЭлементОбъектовМетаданныхПоПризнаку Из ЭлементыОбъектовМетаданныхПоПризнаку Цикл
					Если Не ЭлементОбъектовМетаданныхПоПризнаку[ТипПризнака] = ЗначениеПризнака Тогда
						Продолжить;
					КонецЕсли;
					ОбъектМетаданныхПоПризнаку = ОбъектыМетаданныхПоПризнаку.Добавить();
					ЗаполнитьЗначенияСвойств(ОбъектМетаданныхПоПризнаку, ЭлементОбъектовМетаданныхПоПризнаку);
					ОбъектМетаданныхПоПризнаку.Идентификатор = ЭлементОбъектовМетаданныхПоПризнаку.ПолучитьИдентификатор();
				КонецЦикла;
			КонецЦикла;
		Иначе
			ЭлементыОбъектовМетаданныхПоПризнаку = ЭлементОбъектаМетаданных.ПолучитьЭлементы();
			Для Каждого ЭлементОбъектовМетаданныхПоПризнаку Из ЭлементыОбъектовМетаданныхПоПризнаку Цикл
				Если Не ЭлементОбъектовМетаданныхПоПризнаку[ТипПризнака] = ЗначениеПризнака Тогда
					Продолжить;
				КонецЕсли;
				ОбъектМетаданныхПоПризнаку = ОбъектыМетаданныхПоПризнаку.Добавить();
				ЗаполнитьЗначенияСвойств(ОбъектМетаданныхПоПризнаку, ЭлементОбъектовМетаданныхПоПризнаку);
				ОбъектМетаданныхПоПризнаку.Идентификатор = ЭлементОбъектовМетаданныхПоПризнаку.ПолучитьИдентификатор();
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиОбъектыМетаданныхПоПризнакуВИсточник(ОтбираемыеОбъектыМетаданных)
	
	ОбъектыМетаданныхПоПризнаку = ОбъектыМетаданных.ПолучитьЭлементы();
	Для Каждого ЭлементыОбъектовМетаданныхПоПризнаку Из ОбъектыМетаданныхПоПризнаку Цикл
		ЭлементОбъектаМетаданных = ОтбираемыеОбъектыМетаданных.НайтиПоИдентификатору(ЭлементыОбъектовМетаданныхПоПризнаку.Идентификатор);
		ЗаполнитьЗначенияСвойств(ЭлементОбъектаМетаданных, ЭлементыОбъектовМетаданныхПоПризнаку);
	КонецЦикла;
	
	ОбъектыМетаданныхПоПризнаку.Очистить();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПолноеИмяОбъектаМетаданных(Строка) Экспорт
	
	Возврат ПолучитьПолноеИмяОбъектаМетаданныхНаСервере(Строка);
	
КонецФункции

&НаКлиенте
Процедура ОтметитьКонстанты(Форма) Экспорт
	
	Если Форма.ОбъектыМетаданных.ПолучитьЭлементы().Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыОбъектовМетаданных = Форма.ОбъектыМетаданных.ПолучитьЭлементы()[0].ПолучитьЭлементы();
	Для Каждого ЭлементОбъектаМетаданных Из ЭлементыОбъектовМетаданных Цикл
		Если ЭлементОбъектаМетаданных.Раздел = "Константы" Тогда
			ЭлементыОсновныхТаблиц = ЭлементОбъектаМетаданных.ПолучитьЭлементы();
			Для Каждого ЭлементОсновныхТаблиц Из ЭлементыОсновныхТаблиц Цикл
				Если НЕ ЭлементОсновныхТаблиц.ЗаголовокТипа = "ХранилищеЗначения" Тогда
					ЭлементОсновныхТаблиц.Выгружать = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьПредопределенные(Форма) Экспорт
	
	Если Форма.ОбъектыМетаданных.ПолучитьЭлементы().Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыОбъектовМетаданных = Форма.ОбъектыМетаданных.ПолучитьЭлементы()[0].ПолучитьЭлементы();
	Для Каждого ЭлементОбъектаМетаданных Из ЭлементыОбъектовМетаданных Цикл
		Если ЭлементОбъектаМетаданных.Раздел = "Общие" Тогда
			Продолжить;
		Иначе
			ЭлементыОсновныхТаблиц = ЭлементОбъектаМетаданных.ПолучитьЭлементы();
			Для Каждого ЭлементОсновныхТаблиц Из ЭлементыОсновныхТаблиц Цикл
				Если Не ЭлементОсновныхТаблиц.ЭтоОсновнаяТаблица Тогда
					Прервать;
				КонецЕсли;
				Если ЭлементОсновныхТаблиц.КоличествоПредопределенных > 0 Тогда
					ЭлементОсновныхТаблиц.Выгружать = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Частные

&НаСервере
Процедура ИнициализироватьКартинкиМетаданных()
	
	Если НЕ КартинкиМетаданных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализироватьОбъектОбработки();
	
	КартинкиМетаданных = ОбъектОбработки.ПолучитьМакет("КартинкиМетаданных");
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьЛокальнуюБиблиотекуКартинок()
	
	Если НЕ ЛокальнаяБиблиотекаКартинок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЛокальнаяБиблиотекаКартинок = Новый Структура;
	ЛокальнаяБиблиотекаКартинок.Вставить("ПланОбмена",             БиблиотекаКартинок.ПланОбмена);
	ЛокальнаяБиблиотекаКартинок.Вставить("КритерийОтбора",         БиблиотекаКартинок.КритерийОтбора);
	ЛокальнаяБиблиотекаКартинок.Вставить("Константа",              БиблиотекаКартинок.Константа);
	ЛокальнаяБиблиотекаКартинок.Вставить("Справочник",             БиблиотекаКартинок.Справочник);
	ЛокальнаяБиблиотекаКартинок.Вставить("Документ",               БиблиотекаКартинок.Документ);
	ЛокальнаяБиблиотекаКартинок.Вставить("Перечисление",           БиблиотекаКартинок.Перечисление);
	ЛокальнаяБиблиотекаКартинок.Вставить("Отчет",                  БиблиотекаКартинок.Отчет);
	ЛокальнаяБиблиотекаКартинок.Вставить("Обработка",              БиблиотекаКартинок.Обработка);
	ЛокальнаяБиблиотекаКартинок.Вставить("ПланВидовХарактеристик", БиблиотекаКартинок.ПланВидовХарактеристик);
	ЛокальнаяБиблиотекаКартинок.Вставить("ПланСчетов",             БиблиотекаКартинок.ПланСчетов);
	ЛокальнаяБиблиотекаКартинок.Вставить("ПланВидовРасчета",       БиблиотекаКартинок.ПланВидовРасчета);
	ЛокальнаяБиблиотекаКартинок.Вставить("РегистрСведений",        БиблиотекаКартинок.РегистрСведений);
	ЛокальнаяБиблиотекаКартинок.Вставить("РегистрНакопления",      БиблиотекаКартинок.РегистрНакопления);
	ЛокальнаяБиблиотекаКартинок.Вставить("РегистрБухгалтерии",     БиблиотекаКартинок.РегистрБухгалтерии);
	ЛокальнаяБиблиотекаКартинок.Вставить("РегистрРасчета",         БиблиотекаКартинок.РегистрРасчета);
	ЛокальнаяБиблиотекаКартинок.Вставить("БизнесПроцесс",          БиблиотекаКартинок.БизнесПроцесс);
	ЛокальнаяБиблиотекаКартинок.Вставить("Задача",                 БиблиотекаКартинок.Задача);
	ЛокальнаяБиблиотекаКартинок.Вставить("ВнешнийИсточникДанных",  БиблиотекаКартинок.ВнешнийИсточникДанных);
	ЛокальнаяБиблиотекаКартинок.Вставить("Пользователь",           БиблиотекаКартинок.Пользователь);
	ЛокальнаяБиблиотекаКартинок.Вставить("ХранилищеНастроек",      БиблиотекаКартинок.ХранилищеНастроек);
	ЛокальнаяБиблиотекаКартинок.Вставить("ПользовательБезНеобходимыхСвойств", БиблиотекаКартинок.ПользовательБезНеобходимыхСвойств);
	ЛокальнаяБиблиотекаКартинок.Вставить("ПользовательСАутентификацией",      БиблиотекаКартинок.ПользовательСАутентификацией);
	ЛокальнаяБиблиотекаКартинок.Вставить("РегламентноеЗадание",    БиблиотекаКартинок.РегламентноеЗадание);
	ЛокальнаяБиблиотекаКартинок.Вставить("ЖурналДокументов",       БиблиотекаКартинок.ЖурналДокументов);

КонецПроцедуры

&НаСервере
Функция ПолучитьКартинкуПоРазделу(ИмяПодраздела)
	
	ИнициализироватьКартинкиМетаданных();
	ИнициализироватьЛокальнуюБиблиотекуКартинок();
	
	Если ИмяПодраздела = "Конфигурация" Тогда
		Возврат КартинкиМетаданных.Области.Конфигурация.Картинка;
	ИначеЕсли ИмяПодраздела = "Общие" Тогда
		Возврат КартинкиМетаданных.Области.Общие.Картинка;
	ИначеЕсли ИмяПодраздела = "Подсистемы" Тогда
		Возврат КартинкиМетаданных.Области.Подсистема.Картинка;
	ИначеЕсли ИмяПодраздела = "ПараметрыСеанса" Тогда
		Возврат КартинкиМетаданных.Области.ПараметрСеанса.Картинка;
	ИначеЕсли ИмяПодраздела = "ОбщиеРеквизиты" Тогда
		Возврат КартинкиМетаданных.Области.ОбщийРеквизит.Картинка;
	ИначеЕсли ИмяПодраздела = "ПланыОбмена" Тогда
		Возврат ЛокальнаяБиблиотекаКартинок.ПланОбмена;
	ИначеЕсли ИмяПодраздела = "КритерииОтбора" Тогда
		Возврат ЛокальнаяБиблиотекаКартинок.КритерийОтбора;
	ИначеЕсли ИмяПодраздела = "РегламентныеЗадания" Тогда
		Возврат ЛокальнаяБиблиотекаКартинок.РегламентноеЗадание;
	ИначеЕсли ИмяПодраздела = "ФункциональныеОпции" Тогда
		Возврат КартинкиМетаданных.Области.ФункциональнаяОпция.Картинка;
	ИначеЕсли ИмяПодраздела = "ХранилищаНастроек" Тогда
		Возврат ЛокальнаяБиблиотекаКартинок.ХранилищеНастроек;
	ИначеЕсли ИмяПодраздела = "ОбщиеФормы" Тогда
		Возврат КартинкиМетаданных.Области.ОбщаяФорма.Картинка;
	ИначеЕсли ИмяПодраздела = "ОбщиеКоманды" Тогда
		Возврат КартинкиМетаданных.Области.Команда.Картинка;
	ИначеЕсли ИмяПодраздела = "WebСервисы" Тогда
		Возврат КартинкиМетаданных.Области.WebСервис.Картинка;
	ИначеЕсли ИмяПодраздела = "Константы" Тогда
		Возврат ЛокальнаяБиблиотекаКартинок.Константа;
	ИначеЕсли ИмяПодраздела = "Справочники" Тогда
		Возврат ЛокальнаяБиблиотекаКартинок.Справочник;
	ИначеЕсли ИмяПодраздела = "Документы" Тогда
		Возврат ЛокальнаяБиблиотекаКартинок.Документ;
	ИначеЕсли ИмяПодраздела = "Последовательности" Тогда
		Возврат КартинкиМетаданных.Области.Последовательность.Картинка;
	ИначеЕсли ИмяПодраздела = "ЖурналыДокументов" Тогда
		Возврат ЛокальнаяБиблиотекаКартинок.ЖурналДокументов;
	ИначеЕсли ИмяПодраздела = "Перечисления" Тогда
		Возврат ЛокальнаяБиблиотекаКартинок.Перечисление;
	ИначеЕсли ИмяПодраздела = "Отчеты" Тогда
		Возврат ЛокальнаяБиблиотекаКартинок.Отчет;
	ИначеЕсли ИмяПодраздела = "Обработки" Тогда
		Возврат ЛокальнаяБиблиотекаКартинок.Обработка;
	ИначеЕсли ИмяПодраздела = "ПланыВидовХарактеристик" Тогда
		Возврат ЛокальнаяБиблиотекаКартинок.ПланВидовХарактеристик;
	ИначеЕсли ИмяПодраздела = "ПланыСчетов" Тогда
		Возврат ЛокальнаяБиблиотекаКартинок.ПланСчетов;
	ИначеЕсли ИмяПодраздела = "ПланыВидовРасчета" Тогда
		Возврат ЛокальнаяБиблиотекаКартинок.ПланВидовРасчета;
	ИначеЕсли ИмяПодраздела = "РегистрыСведений" Тогда
		Возврат ЛокальнаяБиблиотекаКартинок.РегистрСведений;
	ИначеЕсли ИмяПодраздела = "РегистрыНакопления" Тогда
		Возврат ЛокальнаяБиблиотекаКартинок.РегистрНакопления;
	ИначеЕсли ИмяПодраздела = "РегистрыБухгалтерии" Тогда
		Возврат ЛокальнаяБиблиотекаКартинок.РегистрБухгалтерии;
	ИначеЕсли ИмяПодраздела = "РегистрыРасчета" Тогда
		Возврат ЛокальнаяБиблиотекаКартинок.РегистрРасчета;
	ИначеЕсли ИмяПодраздела = "БизнесПроцессы" Тогда
		Возврат ЛокальнаяБиблиотекаКартинок.БизнесПроцесс;
	ИначеЕсли ИмяПодраздела = "Задачи" Тогда
		Возврат ЛокальнаяБиблиотекаКартинок.Задача;
	ИначеЕсли ИмяПодраздела = "ВнешниеИсточникиДанных" Тогда
		Возврат ЛокальнаяБиблиотекаКартинок.ВнешнийИсточникДанных;
	ИначеЕсли ИмяПодраздела = "СтандартныеРеквизиты" Тогда
		Возврат КартинкиМетаданных.Области.СтандартныйРеквизит.Картинка;
	ИначеЕсли ИмяПодраздела = "Реквизиты" Тогда
		Возврат БиблиотекаКартинок.Реквизит;
	ИначеЕсли ИмяПодраздела = "РеквизитыАдресации" Тогда
		Возврат КартинкиМетаданных.Области.РеквизитАдресации.Картинка;
	ИначеЕсли ИмяПодраздела = "СтандартныеТабличныеЧасти" Тогда
		Возврат КартинкиМетаданных.Области.СтандартнаяТабличнаяЧасть.Картинка;
	ИначеЕсли ИмяПодраздела = "ТабличныеЧасти" Тогда
		Возврат БиблиотекаКартинок.ВложеннаяТаблица;
	ИначеЕсли ИмяПодраздела = "Измерения" Тогда
		Возврат БиблиотекаКартинок.Измерение;
	ИначеЕсли ИмяПодраздела = "Ресурсы" Тогда
		Возврат БиблиотекаКартинок.Ресурс;
	ИначеЕсли ИмяПодраздела = "Операции" Тогда
		Возврат КартинкиМетаданных.Области.Операция.Картинка;
	ИначеЕсли ИмяПодраздела = "Команды" Тогда
		Возврат КартинкиМетаданных.Области.Команда.Картинка;
	ИначеЕсли ИмяПодраздела = "ПризнакиУчета" Тогда
		Возврат КартинкиМетаданных.Области.ПризнакиУчета.Картинка;
	ИначеЕсли ИмяПодраздела = "ПризнакиУчетаСубконто" Тогда
		Возврат КартинкиМетаданных.Области.ПризнакиУчетаСубконто.Картинка;
	ИначеЕсли ИмяПодраздела = "Перерасчеты" Тогда
		Возврат КартинкиМетаданных.Области.Перерасчеты.Картинка;
	ИначеЕсли ИмяПодраздела = "СистемныеТаблицы" ИЛИ ИмяПодраздела = "Характеристики" Тогда
		Возврат БиблиотекаКартинок.Настройка;
	ИначеЕсли ИмяПодраздела = "ПредопределенныеДанные" Тогда
		Возврат КартинкиМетаданных.Области.ПредопределенныеДанные.Картинка;
	ИначеЕсли ИмяПодраздела = "РегистрацияИзмененийКонстанты" ИЛИ ИмяПодраздела = "РегистрацияИзменений" Тогда
		Возврат КартинкиМетаданных.Области.РегистрацияИзменений.Картинка;
	ИначеЕсли ИмяПодраздела = "ТочкиМаршрута" Тогда
		Возврат КартинкиМетаданных.Области.ТочкиМаршрута.Картинка;
	ИначеЕсли ИмяПодраздела = "ЗначенияСубконто" Тогда
		Возврат КартинкиМетаданных.Области.ЗначенияСубконто.Картинка;
	ИначеЕсли ИмяПодраздела = "Роли" Тогда
		Возврат КартинкиМетаданных.Области.Роли.Картинка;
	ИначеЕсли ИмяПодраздела = "Пользователи" Тогда
		Возврат ЛокальнаяБиблиотекаКартинок.Пользователь;
	ИначеЕсли ИмяПодраздела = "ПользователиБезНеобходимыхСвойств" Тогда
		Возврат ЛокальнаяБиблиотекаКартинок.ПользовательБезНеобходимыхСвойств;
	ИначеЕсли ИмяПодраздела = "ПользователиСАутентификацией" Тогда
		Возврат ЛокальнаяБиблиотекаКартинок.ПользовательСАутентификацией;
	ИначеЕсли ИмяПодраздела = "ПараметрыВыгрузки" Тогда
		Возврат БиблиотекаКартинок.ПараметрыВыводаКомпоновкиДанных;
	ИначеЕсли ИмяПодраздела = "ПустыеПараметрыВыгрузки" Тогда
		Возврат БиблиотекаКартинок.ПолеВводаВыбрать;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ДобавитьМетаданныеПодраздела(ИмяРаздела, ИмяПодраздела, МетаданныеЭлемента, МетаданныеОбъект, РеквизитыОбъекта, ИдентификаторОбъектаСОборотамиОстатками)
	
	ИнициализироватьОбъектОбработки();
	
	Если ИмяПодраздела = "Подсистемы"
		И НЕ МетаданныеОбъект = Неопределено
		И Лев(МетаданныеОбъект.ПолноеИмя(), 10) = "Подсистема" Тогда
		
		МетаданныеПодраздела = МетаданныеЭлемента;
		
	ИначеЕсли ИмяПодраздела = "Подсистемы" Тогда
		
		Картинка = ПолучитьКартинкуПоРазделу(ИмяПодраздела);
		
		КоличествоПолейМетаданных = КоличествоПолейМетаданных + 1;
		
		МетаданныеПодраздела = МетаданныеЭлемента;
		Подраздел            = МетаданныеПодраздела.Добавить();
		Подраздел.Имя        = ИмяПодраздела;
		Подраздел.Владелец   = ИмяРаздела;
		Подраздел.Раздел     = ИмяПодраздела;
		Подраздел.Картинка   = Картинка;
		
		НовыйУровеньПодраздела = Подраздел.ПолучитьЭлементы();
		
		Подсистемы = ОбъектОбработки.ПолучитьПодсистемыОбъекта(МетаданныеОбъект);
		
		Для Каждого Подсистема Из Подсистемы Цикл
			
			КоличествоПолейМетаданных = КоличествоПолейМетаданных + 1;
			
			НовыйЭлемент = НовыйУровеньПодраздела.Добавить();
			НовыйЭлемент.ПолноеИмя     = Подсистема.ПолноеИмя();
			НовыйЭлемент.ИмяДополнение = ?(Подсистема.ВключатьВКомандныйИнтерфейс, "(+)", "");
			НовыйЭлемент.Имя           = Подсистема.Имя;
			НовыйЭлемент.Владелец      = ИмяРаздела;
			НовыйЭлемент.Картинка      = Картинка;
			НовыйЭлемент.Раздел        = ИмяПодраздела;
			
		КонецЦикла;
		
		Возврат;
		
	ИначеЕсли ИмяПодраздела = "ФункциональныеОпции" И НЕ Метаданные.ФункциональныеОпции.Содержит(МетаданныеОбъект) Тогда
		
		Картинка = ПолучитьКартинкуПоРазделу(ИмяПодраздела);
		
		КоличествоПолейМетаданных = КоличествоПолейМетаданных + 1;
		
		МетаданныеПодраздела = МетаданныеЭлемента;
		Подраздел            = МетаданныеПодраздела.Добавить();
		Подраздел.Имя        = ИмяПодраздела;
		Подраздел.Владелец   = ИмяРаздела;
		Подраздел.Раздел     = ИмяПодраздела;
		Подраздел.Картинка   = Картинка;
		
		НовыйУровеньПодраздела = Подраздел.ПолучитьЭлементы();
		
		ФункциональныеОпции = ОбъектОбработки.ПолучитьФункциональныеОпцииОбъекта(МетаданныеОбъект);
		
		Для Каждого ФункциональнаяОпция Из ФункциональныеОпции Цикл
			
			Префикс = "";
			ХранениеВКонстантах = Метаданные.Константы.Содержит(ФункциональнаяОпция.Хранение);
			Если ХранениеВКонстантах И ПолучитьФункциональнуюОпцию(ФункциональнаяОпция.Имя) Тогда
				Префикс = "(+)";
			ИначеЕсли ХранениеВКонстантах И Не ПолучитьФункциональнуюОпцию(ФункциональнаяОпция.Имя) Тогда
				Префикс = "(-)";
			ИначеЕсли Не ХранениеВКонстантах Тогда
				Префикс = "(*)";
			КонецЕсли;
			
			КоличествоПолейМетаданных = КоличествоПолейМетаданных + 1;
			
			ЭлементМетаданных = НовыйУровеньПодраздела.Добавить();
			ЭлементМетаданных.ПолноеИмя        = ФункциональнаяОпция.ПолноеИмя();
			ЭлементМетаданных.ИмяДополнение    = Префикс;
			ЭлементМетаданных.Имя              = ФункциональнаяОпция.Имя;
			ЭлементМетаданных.Владелец         = ИмяРаздела;
			ЭлементМетаданных.Картинка         = Картинка;
			ЭлементМетаданных.Раздел           = ИмяПодраздела;
			ЭлементМетаданных.ЗаголовокТипа    = ОбъектОбработки.ОпределитьТип(ФункциональнаяОпция.Хранение.Тип, ЭлементМетаданных);
			
		КонецЦикла;
		
		Возврат;
		
	ИначеЕсли ИмяПодраздела = "РегистрацияИзмененийКонстанты" Тогда
		
		СтруктураПодраздела = Новый Структура("Назначение, Метаданные", ИмяПодраздела, ИмяРаздела);
		ДанныеСистемнойТаблицыПодраздела = СтруктураХранения.СтруктураХраненияСистемныхТаблиц.НайтиСтроки(СтруктураПодраздела);
		
		Для Каждого СтрокаТаблицыЗначений Из ДанныеСистемнойТаблицыПодраздела Цикл
			
			КоличествоПолейМетаданных = КоличествоПолейМетаданных + 1;
			
			Подраздел  = МетаданныеЭлемента.Добавить();
			Подраздел.Имя        = СтрокаТаблицыЗначений.Назначение;
			Подраздел.Раздел     = ИмяПодраздела;
			Подраздел.Владелец   = ИмяРаздела;
			Подраздел.ЭтоТаблица = Истина;
			Подраздел.ИмяСУБД    = СтрокаТаблицыЗначений.ИмяТаблицыХранения;
			Подраздел.Картинка   = ПолучитьКартинкуПоРазделу(ИмяПодраздела);
			
		КонецЦикла;
		
		Возврат;
		
	ИначеЕсли ИмяПодраздела = "Прочие" Тогда
		
		СтруктураПодраздела = Новый Структура("Прочие, Метаданные", Истина, ИмяРаздела);
		ДанныеСистемнойТаблицыПодраздела = СтруктураХранения.СтруктураХраненияСистемныхТаблиц.НайтиСтроки(СтруктураПодраздела);
		
		Для Каждого СтрокаТаблицыЗначений Из ДанныеСистемнойТаблицыПодраздела Цикл
			
			КоличествоПолейМетаданных = КоличествоПолейМетаданных + 1;
			
			Подраздел          = МетаданныеЭлемента.Добавить();
			Подраздел.Имя      = СтрокаТаблицыЗначений.Назначение;
			Подраздел.Картинка = Подраздел.ПолучитьРодителя().Картинка;
			
			МетаданныеПодраздела = Подраздел.ПолучитьЭлементы();
			
			КоличествоПолейМетаданных = КоличествоПолейМетаданных + 1;
			
			Подподраздел = МетаданныеПодраздела.Добавить();
			Подподраздел.Имя        = СтрокаТаблицыЗначений.ИмяТаблицы;
			Подподраздел.Раздел     = СтрокаТаблицыЗначений.Назначение;
			Подподраздел.Владелец   = ИмяРаздела;
			Подподраздел.ЭтоТаблица = Истина;
			Подподраздел.ИмяСУБД    = СтрокаТаблицыЗначений.ИмяТаблицыХранения;
			Подподраздел.Картинка   = Подраздел.ПолучитьРодителя().Картинка;
			Подподраздел.ПолноеИмя  = СтрокаТаблицыЗначений.ИмяТаблицы;
			
			Если СтрокаТаблицыЗначений.Назначение = "Обороты" ИЛИ СтрокаТаблицыЗначений.Назначение = "Итоги" Тогда
				
				ИдентификаторОбъектаСОборотамиОстатками = Подподраздел.ПолучитьИдентификатор();
				
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат;
		
	Иначе
		
		КоличествоПолейМетаданных = КоличествоПолейМетаданных + 1;
		
		Подраздел          = МетаданныеЭлемента.Добавить();
		Подраздел.Имя      = ИмяПодраздела;
		Подраздел.Картинка = ПолучитьКартинкуПоРазделу(ИмяПодраздела);
		
		МетаданныеПодраздела = Подраздел.ПолучитьЭлементы();
		
	КонецЕсли;
	
	Если ИмяПодраздела = "РегистрацияИзменений" ИЛИ ИмяПодраздела = "ТочкиМаршрута" ИЛИ  ИмяПодраздела = "ЗначенияСубконто" Тогда
		
		СтруктураПодраздела = Новый Структура("Назначение, Метаданные", ИмяПодраздела, ИмяРаздела);
		ДанныеСистемнойТаблицыПодраздела = СтруктураХранения.СтруктураХраненияСистемныхТаблиц.НайтиСтроки(СтруктураПодраздела);
		
		Для Каждого СтрокаТаблицыЗначений Из ДанныеСистемнойТаблицыПодраздела Цикл
			
			КоличествоПолейМетаданных = КоличествоПолейМетаданных + 1;
			
			Подраздел = МетаданныеПодраздела.Добавить();
			Подраздел.Имя        = СтрокаТаблицыЗначений.ИмяТаблицы;
			Подраздел.Раздел     = ИмяПодраздела;
			Подраздел.Владелец   = ИмяРаздела;
			Подраздел.ЭтоТаблица = Истина;
			Подраздел.ИмяСУБД    = СтрокаТаблицыЗначений.ИмяТаблицыХранения;
			Подраздел.Картинка   = ПолучитьКартинкуПоРазделу(ИмяПодраздела);
			Подраздел.ПолноеИмя  = СтрокаТаблицыЗначений.ИмяТаблицы;
			
			Если ИмяПодраздела = "ТочкиМаршрута" Тогда
				Подраздел.РеквизитыСтрокой = "Ссылка;Порядок;Представление";
			ИначеЕсли ИмяПодраздела = "РегистрацияИзменений" Тогда
				Подраздел.РеквизитыСтрокой = "Узел;НомерСообщения;Ссылка";
			КонецЕсли;
			
		КонецЦикла;
		
		Если ИмяПодраздела = "РегистрацияИзменений" ИЛИ ИмяПодраздела = "ТочкиМаршрута" Тогда
			ЗаполнитьСтатистикуТаблицы(Подраздел, , ИмяПодраздела);
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли ИмяПодраздела = "СистемныеТаблицы" Тогда
		
		СтруктураПодраздела = Новый Структура("Метаданные, ИмяТаблицы", ИмяРаздела, "");
		ДанныеСистемнойТаблицыПодраздела = СтруктураХранения.СтруктураХраненияСистемныхТаблиц.НайтиСтроки(СтруктураПодраздела);
		
		СтруктураПодраздела = Новый Структура("Метаданные, ИмяТаблицы", ИмяРаздела, " ");
		Для Каждого Строка Из СтруктураХранения.СтруктураХраненияСистемныхТаблиц.НайтиСтроки(СтруктураПодраздела) Цикл
			
			ДанныеСистемнойТаблицыПодраздела.Добавить(Строка);
			
		КонецЦикла;
		
		Для Каждого СтрокаТаблицыЗначений Из ДанныеСистемнойТаблицыПодраздела Цикл
			
			Если СтрНайти(СтрокаТаблицыЗначений.Назначение, "ИнициализированныеПредопределенныеДанные") = 0 Тогда
				
				КоличествоПолейМетаданных = КоличествоПолейМетаданных + 1;
				
				Подраздел                  = МетаданныеПодраздела.Добавить();
				Подраздел.Имя              = СтрокаТаблицыЗначений.Назначение;
				Подраздел.Раздел           = ИмяПодраздела;
				Подраздел.Владелец         = ИмяРаздела;
				
				Подраздел.ЭтоТаблица = Истина;
				Подраздел.ИмяСУБД    = СтрокаТаблицыЗначений.ИмяТаблицыХранения;
				Подраздел.Картинка   = ПолучитьКартинкуПоРазделу(ИмяПодраздела);
				
				Если СтрокаТаблицыЗначений.Назначение = "Обороты" Тогда
					
					Подраздел.ПолноеИмя = ИмяРаздела + ".Обороты";
					ИдентификаторОбъектаСОборотамиОстатками = Подраздел.ПолучитьИдентификатор();
					
				ИначеЕсли СтрокаТаблицыЗначений.Назначение = "Итоги" Тогда
					
					Подраздел.ПолноеИмя = ИмяРаздела + ".Остатки";
					ИдентификаторОбъектаСОборотамиОстатками = Подраздел.ПолучитьИдентификатор();
					
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат;
		
	ИначеЕсли ИмяПодраздела = "ПредопределенныеДанные" Тогда
		
		СтруктураПодраздела = Новый Структура("Метаданные", ИмяРаздела);
		ДанныеСистемнойТаблицыПодраздела = СтруктураХранения.СтруктураХраненияСистемныхТаблиц.НайтиСтроки(СтруктураПодраздела);
		
		Для Каждого СтрокаТаблицыЗначений Из ДанныеСистемнойТаблицыПодраздела Цикл
			
			Если СтрНайти(СтрокаТаблицыЗначений.Назначение, "ИнициализированныеПредопределенныеДанные") > 0 Тогда
				
				КоличествоПолейМетаданных = КоличествоПолейМетаданных + 1;
				
				Подраздел = МетаданныеПодраздела.Добавить();
				Подраздел.Имя        = СтрокаТаблицыЗначений.Назначение;
				Подраздел.Раздел     = ИмяПодраздела;
				Подраздел.Владелец   = ИмяРаздела;
				Подраздел.ИмяСУБД    = СтрокаТаблицыЗначений.ИмяТаблицыХранения;
				Подраздел.Картинка   = ПолучитьКартинкуПоРазделу(ИмяПодраздела);
				Подраздел.ПолноеИмя  = ИмяРаздела;
				Подраздел.ЭтоОсновнаяТаблица = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗаполнитьСтатистикуТаблицы(Подраздел, , ИмяПодраздела);
		
		Возврат;
		
	ИначеЕсли ИмяРаздела = "РегистрыБухгалтерии" И ИмяПодраздела = "Измерения" Тогда
		
		Счета = Новый Массив;
		Если МетаданныеОбъект.Корреспонденция Тогда
			Счета.Добавить("СчетДт");
			Счета.Добавить("СчетКт");
		Иначе
			Счета.Добавить("Счет");
		КонецЕсли;
		
		Для Каждого Счет Из Счета Цикл
			
			КоличествоПолейМетаданных = КоличествоПолейМетаданных + 1;
			
			Подраздел = МетаданныеПодраздела.Добавить();
			Подраздел.Имя                  = Счет;
			Подраздел.Раздел               = ИмяПодраздела;
			Подраздел.Владелец             = ИмяРаздела;
			Подраздел.ПолноеИмя            = МетаданныеОбъект.ПолноеИмя() + "." + Счет;
			Подраздел.КартинкаРоль         = ПолучитьКартинкуПоРазделу("Роли");
			Подраздел.КартинкаПользователь = ПолучитьКартинкуПоРазделу("Пользователи");
			Подраздел.СтандартныйРеквизит  = ИСТИНА;
			
			Подраздел.ЗаголовокТипа = "ПланСчетов." + МетаданныеОбъект.ПланСчетов.Имя;
			
			РеквизитОбъекта = Новый Структура;
			РеквизитОбъекта.Вставить("Имя",       Счет);
			РеквизитОбъекта.Вставить("Тип",       Новый ОписаниеТипов("ПланСчетовСсылка." + МетаданныеОбъект.ПланСчетов.Имя));
			РеквизитОбъекта.Вставить("Подраздел", ИмяПодраздела);
			РеквизитОбъекта.Вставить("Пароль",    Ложь);
			
			РеквизитыОбъекта.Добавить(РеквизитОбъекта);
			
			Подраздел.ЭтоПоле    = ОбъектОбработки.ЭтоПоляТаблицы(ИмяПодраздела);
			Подраздел.ЭтоТаблица = ОбъектОбработки.ЭтоТаблица(ИмяПодраздела);
			Подраздел.ИмяСУБД    = СтруктураХранения.СтруктураХраненияТаблиц.Получить(Подраздел.ПолноеИмя);
			Подраздел.Картинка   = ПолучитьКартинкуПоРазделу(ИмяПодраздела);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого МетаданныеПодраздел Из МетаданныеОбъект[ИмяПодраздела] Цикл
		
		Если ИмяРаздела = "РегистрыБухгалтерии" И ОбъектОбработки.ПроверитьСуществованиеСвойства("Балансовый", МетаданныеПодраздел) Тогда
			
			Если НЕ МетаданныеПодраздел.Балансовый Тогда
				
				Поля = Новый Массив;
				Поля.Добавить("Дт");
				Поля.Добавить("Кт");
				
				Для Каждого Поле Из Поля Цикл
					
					КоличествоПолейМетаданных = КоличествоПолейМетаданных + 1;
					
					Подраздел                  = МетаданныеПодраздела.Добавить();
					Подраздел.Имя              = МетаданныеПодраздел.Имя + Поле;
					Подраздел.Раздел           = ИмяПодраздела;
					Подраздел.Владелец         = ИмяРаздела;
					
					Подраздел.ЗаголовокТипа = ОбъектОбработки.ОпределитьТип(МетаданныеПодраздел.Тип, Подраздел);
					
					РеквизитОбъекта = Новый Структура;
					РеквизитОбъекта.Вставить("Имя",       МетаданныеПодраздел.Имя + Поле);
					РеквизитОбъекта.Вставить("Тип",       МетаданныеПодраздел.Тип);
					РеквизитОбъекта.Вставить("Подраздел", ИмяПодраздела);
					РеквизитОбъекта.Вставить("Пароль",    Ложь);
					
					РеквизитыОбъекта.Добавить(РеквизитОбъекта);
					
					Подраздел.ПолноеИмя            = МетаданныеПодраздел.ПолноеИмя();
					Подраздел.КартинкаРоль         = ПолучитьКартинкуПоРазделу("Роли");
					Подраздел.КартинкаПользователь = ПолучитьКартинкуПоРазделу("Пользователи");
					
					Подраздел.ЭтоПоле    = ОбъектОбработки.ЭтоПоляТаблицы(ИмяПодраздела);
					Подраздел.ЭтоТаблица = ОбъектОбработки.ЭтоТаблица(ИмяПодраздела);
					Подраздел.ИмяСУБД    = СтруктураХранения.СтруктураХраненияТаблиц.Получить(Подраздел.ПолноеИмя + Поле);
					Подраздел.Картинка   = ПолучитьКартинкуПоРазделу(ИмяПодраздела);
					
				КонецЦикла;
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИмяПодраздела = "Характеристики" Тогда
			
			КоличествоПолейМетаданных = КоличествоПолейМетаданных + 1;
			
			РазделХарактеристик          = МетаданныеПодраздела.Добавить();
			РазделХарактеристик.Имя      = МетаданныеПодраздел.ВидыХарактеристик.Имя;
			РазделХарактеристик.Раздел   = ИмяПодраздела;
			РазделХарактеристик.Владелец = ИмяРаздела;
			РазделХарактеристик.Картинка = ПолучитьКартинкуПоРазделу(ИмяПодраздела);
			
			Для Каждого СвойствоХарактеристик Из ОбъектОбработки.ПолучитьСписокСвойствХарактеристик() Цикл
				
				КоличествоПолейМетаданных = КоличествоПолейМетаданных + 1;
				
				ПодразделХарактеристик               = РазделХарактеристик.ПолучитьЭлементы().Добавить();
				ПодразделХарактеристик.Имя           = СвойствоХарактеристик;
				
				Если СвойствоХарактеристик = "ВидыХарактеристик" ИЛИ СвойствоХарактеристик = "ЗначенияХарактеристик" Тогда
					ПодразделХарактеристик.ЗаголовокТипа = МетаданныеПодраздел[СвойствоХарактеристик].ПолноеИмя();
				Иначе
					ПодразделХарактеристик.ЗаголовокТипа = МетаданныеПодраздел[СвойствоХарактеристик];
				КонецЕсли;
				
				ПодразделХарактеристик.Раздел        = РазделХарактеристик.Имя;
				ПодразделХарактеристик.Владелец      = ИмяРаздела;
				ПодразделХарактеристик.Картинка      = ПолучитьКартинкуПоРазделу("Реквизиты");
				
			КонецЦикла;
			
			Продолжить;
			
		КонецЕсли;
		
		КоличествоПолейМетаданных = КоличествоПолейМетаданных + 1;
		
		Подраздел                  = МетаданныеПодраздела.Добавить();
		Подраздел.Имя              = МетаданныеПодраздел.Имя;
		Подраздел.Раздел           = ИмяПодраздела;
		Подраздел.Владелец         = ИмяРаздела;
		
		Если ИмяПодраздела = "Подсистемы" Тогда
			ДобавитьМетаданныеПодраздела(
				ИмяРаздела,
				ИмяПодраздела,
				Подраздел.ПолучитьЭлементы(),
				МетаданныеПодраздел,
				РеквизитыОбъекта,
				ИдентификаторОбъектаСОборотамиОстатками)
		ИначеЕсли ИмяПодраздела = "СтандартныеРеквизиты" Тогда
			
			Подраздел.ПолноеИмя            = МетаданныеОбъект.ПолноеИмя() + "." + Подраздел.Имя;
			Подраздел.КартинкаРоль         = ПолучитьКартинкуПоРазделу("Роли");
			Подраздел.КартинкаПользователь = ПолучитьКартинкуПоРазделу("Пользователи");
			Подраздел.СтандартныйРеквизит  = ИСТИНА;
			Подраздел.ВходитВИндексСУБД    = СтруктураХранения.СтруктураХраненияИндексов.Получить(Подраздел.ПолноеИмя) <> Неопределено;
			
			Подраздел.ЗаголовокТипа = ОбъектОбработки.ОпределитьТип(МетаданныеПодраздел.Тип, Подраздел);
			
			РеквизитОбъекта = Новый Структура;
			РеквизитОбъекта.Вставить("Имя",       МетаданныеПодраздел.Имя);
			РеквизитОбъекта.Вставить("Тип",       МетаданныеПодраздел.Тип);
			РеквизитОбъекта.Вставить("Подраздел", ИмяПодраздела);
			РеквизитОбъекта.Вставить("Пароль",    Ложь);
			
			РеквизитыОбъекта.Добавить(РеквизитОбъекта);
			
		ИначеЕсли ИмяПодраздела = "СтандартныеТабличныеЧасти" Тогда
			
			Подраздел.ПолноеИмя            = МетаданныеОбъект.ПолноеИмя() + ".ТабличнаяЧасть." + Подраздел.Имя;
			Подраздел.КартинкаРоль         = ПолучитьКартинкуПоРазделу("Роли");
			Подраздел.КартинкаПользователь = ПолучитьКартинкуПоРазделу("Пользователи");
			Подраздел.СтандартныйРеквизит  = ИСТИНА;
			
			РеквизитыТабличнойЧастиОбъекта = Новый Массив;
			
			ДобавитьМетаданныеТабличнойЧасти(Подраздел.ПолноеИмя, "СтандартныеРеквизиты", Подраздел, МетаданныеПодраздел, РеквизитыТабличнойЧастиОбъекта);
			
			Подраздел.РеквизитыСтрокой = ОбъектОбработки.ПреобразоватьРеквизитыВСтроку(РеквизитыТабличнойЧастиОбъекта);
			
			//@skip-check query-in-loop
			ЗаполнитьСтатистикуТаблицы(Подраздел, РеквизитыТабличнойЧастиОбъекта);
			
		ИначеЕсли ИмяПодраздела = "ТабличныеЧасти" Тогда
			
			Подраздел.ПолноеИмя            = МетаданныеПодраздел.ПолноеИмя();
			Подраздел.КартинкаРоль         = ПолучитьКартинкуПоРазделу("Роли");
			Подраздел.КартинкаПользователь = ПолучитьКартинкуПоРазделу("Пользователи");
			
			РеквизитыТабличнойЧастиОбъекта = Новый Массив;
			
			ДобавитьМетаданныеТабличнойЧасти(Подраздел.ПолноеИмя, "СтандартныеРеквизиты", Подраздел, МетаданныеПодраздел, РеквизитыТабличнойЧастиОбъекта);
			ДобавитьМетаданныеТабличнойЧасти(Подраздел.ПолноеИмя, "Реквизиты", Подраздел, МетаданныеПодраздел, РеквизитыТабличнойЧастиОбъекта);
			
			Подраздел.РеквизитыСтрокой = ОбъектОбработки.ПреобразоватьРеквизитыВСтроку(РеквизитыТабличнойЧастиОбъекта);
			
			//@skip-check query-in-loop
			ЗаполнитьСтатистикуТаблицы(Подраздел, РеквизитыТабличнойЧастиОбъекта);
			
		Иначе
			
			Если ИмяПодраздела = "Реквизиты" ИЛИ ИмяПодраздела = "РеквизитыАдресации" ИЛИ ИмяПодраздела = "Измерения" ИЛИ ИмяПодраздела = "Ресурсы" 
				ИЛИ ИмяПодраздела = "ПризнакиУчета" ИЛИ ИмяПодраздела = "ПризнакиУчетаСубконто" Тогда
				
				Подраздел.ЗаголовокТипа = ОбъектОбработки.ОпределитьТип(МетаданныеПодраздел.Тип, Подраздел);
				
				Если ИмяПодраздела = "Реквизиты" ИЛИ ИмяПодраздела = "РеквизитыАдресации" ИЛИ ИмяПодраздела = "Измерения" ИЛИ ИмяПодраздела = "Ресурсы" Тогда
					
					Если МетаданныеПодраздел.РежимПароля Тогда
						Подраздел.ЗаголовокТипа = Лев(Подраздел.ЗаголовокТипа, СтрДлина(Подраздел.ЗаголовокТипа) - 1) + ", Пароль)";
					КонецЕсли;
					
					РеквизитОбъекта = Новый Структура;
					РеквизитОбъекта.Вставить("Имя",       МетаданныеПодраздел.Имя);
					РеквизитОбъекта.Вставить("Тип",       МетаданныеПодраздел.Тип);
					РеквизитОбъекта.Вставить("Подраздел", ИмяПодраздела);
					РеквизитОбъекта.Вставить("Пароль",    МетаданныеПодраздел.РежимПароля);
					
					РеквизитыОбъекта.Добавить(РеквизитОбъекта);
				
				КонецЕсли;
				
			КонецЕсли;
			
			Подраздел.ПолноеИмя            = МетаданныеПодраздел.ПолноеИмя();
			Подраздел.КартинкаРоль         = ПолучитьКартинкуПоРазделу("Роли");
			Подраздел.КартинкаПользователь = ПолучитьКартинкуПоРазделу("Пользователи");
			Подраздел.ВходитВИндексСУБД    = СтруктураХранения.СтруктураХраненияИндексов.Получить(Подраздел.ПолноеИмя) <> Неопределено;
			
		КонецЕсли;
		
		Подраздел.ЭтоПоле    = ОбъектОбработки.ЭтоПоляТаблицы(ИмяПодраздела);
		Подраздел.ЭтоТаблица = ОбъектОбработки.ЭтоТаблица(ИмяПодраздела);
		Подраздел.ИмяСУБД    = СтруктураХранения.СтруктураХраненияТаблиц.Получить(Подраздел.ПолноеИмя);
		Подраздел.Картинка   = ПолучитьКартинкуПоРазделу(ИмяПодраздела);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьМетаданныеТабличнойЧасти(ИмяРаздела, ИмяПодраздела, МетаданныеЭлемента, МетаданныеОбъект, РеквизитыТабличнойЧастиОбъекта)
	
	ИнициализироватьОбъектОбработки();
	
	Реквизиты = МетаданныеЭлемента.ПолучитьЭлементы();
	
	Для Каждого МетаданныеПодраздел Из МетаданныеОбъект[ИмяПодраздела] Цикл
		
		КоличествоПолейМетаданных = КоличествоПолейМетаданных + 1;
		
		Реквизит          = Реквизиты.Добавить();
		Реквизит.Имя      = МетаданныеПодраздел.Имя;
		Реквизит.Раздел   = ИмяПодраздела;
		Реквизит.Владелец = ИмяРаздела;
		
		Если ИмяПодраздела = "СтандартныеРеквизиты" Тогда
			Реквизит.ПолноеИмя    = ИмяРаздела + "." + Реквизит.Имя;
			Реквизит.СтандартныйРеквизит = ИСТИНА;
		Иначе
			Реквизит.ПолноеИмя    = МетаданныеПодраздел.ПолноеИмя();
		КонецЕсли;
		
		Реквизит.ЗаголовокТипа = ОбъектОбработки.ОпределитьТип(МетаданныеПодраздел.Тип, Реквизит);
		
		РеквизитТабличнойЧастиОбъекта = Новый Структура;
		РеквизитТабличнойЧастиОбъекта.Вставить("Имя",       МетаданныеПодраздел.Имя);
		РеквизитТабличнойЧастиОбъекта.Вставить("Тип",       МетаданныеПодраздел.Тип);
		РеквизитТабличнойЧастиОбъекта.Вставить("Подраздел", "");
		РеквизитТабличнойЧастиОбъекта.Вставить("Пароль",    Ложь);
		
		РеквизитыТабличнойЧастиОбъекта.Добавить(РеквизитТабличнойЧастиОбъекта);
		
		Реквизит.ИмяСУБД              = СтруктураХранения.СтруктураХраненияТаблиц.Получить(Реквизит.ПолноеИмя);
		Реквизит.ВходитВИндексСУБД    = СтруктураХранения.СтруктураХраненияИндексов.Получить(Реквизит.ПолноеИмя) <> Неопределено;
		Реквизит.Картинка             = ПолучитьКартинкуПоРазделу(ИмяПодраздела);
		Реквизит.КартинкаРоль         = ПолучитьКартинкуПоРазделу("Роли");
		Реквизит.КартинкаПользователь = ПолучитьКартинкуПоРазделу("Пользователи");
		Реквизит.ЭтоПоле              = ОбъектОбработки.ЭтоПоляТаблицы(ИмяПодраздела);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОбъектМетаданныхПоРазделу(ЭлементМетаданных, ИмяРаздела, МетаданныеОбъект = Неопределено)
	
	ИнициализироватьОбъектОбработки();
	
	Если МетаданныеОбъект = Неопределено Тогда
		МетаданныеОбъект = Метаданные.НайтиПоПолномуИмени(ЭлементМетаданных.ПолноеИмя);
	КонецЕсли;
	
	Если СтруктураХранения = Неопределено Тогда
		СтруктураХранения = ПолучитьИзВременногоХранилища(АдресСтруктурыХранения);
	КонецЕсли;
	
	МетаданныеЭлемента = ЭлементМетаданных.ПолучитьЭлементы();
	
	СписокМетаданных = ОбъектОбработки.ПодчиненныеМетаданныеРаздела(ИмяРаздела);
	
	РеквизитыОбъекта = Новый Массив;
	ИдентификаторОбъектаСОборотамиОстатками = 0;
	
	Для Каждого Подраздел Из СписокМетаданных Цикл
		ДобавитьМетаданныеПодраздела(
			ЭлементМетаданных.ПолноеИмя,
			Подраздел,
			МетаданныеЭлемента,
			МетаданныеОбъект,
			РеквизитыОбъекта,
			ИдентификаторОбъектаСОборотамиОстатками);
	КонецЦикла;
	
	ЭлементМетаданных.РеквизитыСтрокой = ОбъектОбработки.ПреобразоватьРеквизитыВСтроку(РеквизитыОбъекта);
	ЗаполнитьСтатистикуТаблицы(ЭлементМетаданных, РеквизитыОбъекта);
	
	Если ИдентификаторОбъектаСОборотамиОстатками <> 0 Тогда
		ЗаполнитьСтатистикуРеквизитовОборотовОстатков(ИдентификаторОбъектаСОборотамиОстатками, РеквизитыОбъекта);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьМетаданныеПоРазделу(РазделыКонфигурации, Раздел)
	
	ИнициализироватьОбъектОбработки();
	
	Картинка = ПолучитьКартинкуПоРазделу(Раздел.ИмяРаздела);
	
	КоличествоУзловМетаданных = КоличествоУзловМетаданных + 1;
	
	РазделКонфигурации          = РазделыКонфигурации.Добавить();
	РазделКонфигурации.Имя      = Раздел.ИмяРаздела;
	РазделКонфигурации.Раздел   = Раздел.ИмяРаздела;
	РазделКонфигурации.Картинка = Картинка;
	
	МетаданныеРаздела           = РазделКонфигурации.ПолучитьЭлементы();
	
	Для Каждого ОбъектМетаданных Из Метаданные[Раздел.ИмяРаздела] Цикл
		
		КоличествоУзловМетаданных = КоличествоУзловМетаданных + 1;
		
		ЭлементМетаданных                     = МетаданныеРаздела.Добавить();
		ЭлементМетаданных.Имя                 = ОбъектМетаданных.Имя;
		ЭлементМетаданных.Раздел              = Раздел.ИмяРаздела;
		ЭлементМетаданных.ПолноеИмя           = ОбъектМетаданных.ПолноеИмя();
		ЭлементМетаданных.Картинка            = Картинка;
		ЭлементМетаданных.ЭтоОсновнаяТаблица  = Раздел.ЭтоОсновнаяТаблица;
		
		Если Раздел.ИмяРаздела <> "РегламентныеЗадания" И Раздел.ИмяРаздела <> "WebСервисы" И Раздел.ИмяРаздела <> "Перечисления" Тогда
			ЭлементМетаданных.КартинкаРоль         = ПолучитьКартинкуПоРазделу("Роли");
			ЭлементМетаданных.КартинкаПользователь = ПолучитьКартинкуПоРазделу("Пользователи");
			ЭлементМетаданных.КартинкаПараметрыВыгрузки = ПолучитьКартинкуПоРазделу("ПустыеПараметрыВыгрузки");
		КонецЕсли;
		
		Если Раздел.ИмяРаздела = "РегламентныеЗадания" Тогда
			
			СтруктураПодраздела = Новый Структура("Назначение, Метаданные", Раздел.ИмяРаздела, ЭлементМетаданных.ПолноеИмя);
			ДанныеСистемнойТаблицыПодраздела = СтруктураХранения.СтруктураХраненияСистемныхТаблиц.НайтиСтроки(СтруктураПодраздела);
			
			Для Каждого СтрокаТаблицыЗначений из ДанныеСистемнойТаблицыПодраздела Цикл
				ЭлементМетаданных.ИмяСУБД = СтрокаТаблицыЗначений.ИмяТаблицыХранения;
			КонецЦикла;
			
		Иначе
			ЭлементМетаданных.ИмяСУБД = СтруктураХранения.СтруктураХраненияТаблиц.Получить(ЭлементМетаданных.ПолноеИмя);
		КонецЕсли;
		
		Если Раздел.ЭтаТаблицаСодержитТип Тогда
			ЭлементМетаданных.ЗаголовокТипа = ЭлементМетаданных.ПолноеИмя;
			ЭлементМетаданных.ЗначениеТипа  = ЭлементМетаданных.ПолноеИмя;
		КонецЕсли;
		
		Если Раздел.ИмяРаздела = "ФункциональныеОпции" Тогда
			ЭлементМетаданных.ЗаголовокТипа = ОбъектОбработки.ОпределитьТип(ОбъектМетаданных.Хранение.Тип, ЭлементМетаданных);
		ИначеЕсли ОбъектОбработки.ПроверитьСуществованиеСвойства("Тип", ОбъектМетаданных) Тогда
			
			ЭлементМетаданных.ЗаголовокТипа = ОбъектОбработки.ОпределитьТип(ОбъектМетаданных.Тип, ЭлементМетаданных);
			
		КонецЕсли;
		
		Если Раздел.Детализировать Тогда
			ЗаполнитьОбъектМетаданныхПоРазделу(ЭлементМетаданных, Раздел.ИмяРаздела, ОбъектМетаданных);
		Иначе
			ЭлементМетаданных.НеобходимоДетализировать = Истина;
			МетаданныеЭлемента = ЭлементМетаданных.ПолучитьЭлементы();
			Подраздел = МетаданныеЭлемента.Добавить();
			Подраздел.Имя = "НеобходимоДетализировать";
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьМетаданныеПоТипу(ЗаполнитьСтруктуруХранения = Ложь)
	
	ИнициализироватьОбъектОбработки();
	ИнициализироватьСтруктуруХранения(ЗаполнитьСтруктуруХранения);
	
	Конфигурации          = ОбъектыМетаданных.ПолучитьЭлементы();
	Конфигурации.Очистить();
	
	КоличествоУзловМетаданных = 1;
	КоличествоПолейМетаданных = 0;
	
	Конфигурация          = Конфигурации.Добавить();
	Конфигурация.Имя      = Метаданные.Имя;
	Конфигурация.Раздел   = "Конфигурация";
	Конфигурация.Картинка = ПолучитьКартинкуПоРазделу("Конфигурация");
	
	РазделыКонфигурации   = Конфигурация.ПолучитьЭлементы();
	
	ДобавитьСистемныеТаблицы(РазделыКонфигурации, БиблиотекаКартинок.Настройка);
	
	// Общие
	КоличествоУзловМетаданных = КоличествоУзловМетаданных + 1;
	
	ОбщийРаздел          = РазделыКонфигурации.Добавить();
	ОбщийРаздел.Имя      = "Общие";
	ОбщийРаздел.Раздел   = "Общие";
	ОбщийРаздел.Картинка = ПолучитьКартинкуПоРазделу("Общие");
	
	ОбщиеПодразделы = ОбщийРаздел.ПолучитьЭлементы();
	
	Разделы = ОбъектОбработки.ПолучитьРазделы();
	
	Для Каждого Раздел Из Разделы Цикл
		ДобавитьМетаданныеПоРазделу(?(Раздел.Общий, ОбщиеПодразделы, РазделыКонфигурации), Раздел);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСистемныеТаблицы(РазделыКонфигурации, Картинка)
	
	КоличествоУзловМетаданных = КоличествоУзловМетаданных + 1;
	
	РазделКонфигурации          = РазделыКонфигурации.Добавить();
	РазделКонфигурации.Имя      = "СистемныеТаблицы";
	РазделКонфигурации.Картинка = Картинка;
	
	МетаданныеРаздела           = РазделКонфигурации.ПолучитьЭлементы();
	
	Для Каждого Соответствие Из СтруктураХранения.СтруктураХраненияОбщихСистемныхТаблиц Цикл
		КоличествоПолейМетаданных = КоличествоПолейМетаданных + 1;
		ЭлементМетаданных                     = МетаданныеРаздела.Добавить();
		ЭлементМетаданных.Имя                 = Соответствие.Ключ;
		ЭлементМетаданных.Раздел              = "СистемныеТаблицы";
		ЭлементМетаданных.ИмяСУБД             = Соответствие.Значение;
		ЭлементМетаданных.Картинка            = Картинка;
		ЭлементМетаданных.ЭтоОсновнаяТаблица  = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДочерниеМетаданныеНаСервере(ИдентификаторСтроки)
	
	ТекущиеДанные = ОбъектыМетаданных.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьОбъектМетаданныхПоРазделу(ТекущиеДанные, ТекущиеДанные.Раздел);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПолноеИмяОбъектаМетаданныхНаСервере(ИмяМетаданных)
	
	ИнициализироватьОбъектОбработки();
	
	Возврат ОбъектОбработки.ПолучитьПолноеИмяОбъектаМетаданных(ИмяМетаданных);
	
КонецФункции

&НаСервере
Функция ПолучитьПоляМетаданныхПоРазделуНаСервере(Раздел, ИмяМетаданных, ТолькоСсылочные)
	
	ИнициализироватьОбъектОбработки();
	
	Возврат ОбъектОбработки.ПолучитьПоляМетаданныхПоРазделу(Раздел, ИмяМетаданных, ТолькоСсылочные);
	
КонецФункции

&НаСервере
Функция ПолучитьМетаданныеПоРазделамНаСервере()
	
	ИнициализироватьОбъектОбработки();
	
	Возврат ОбъектОбработки.ПолучитьМетаданныеПоРазделам();
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область РаботаСПравамиДоступа

#Область Общие

&НаКлиенте
Процедура ПолучитьПраваДоступа(Форма, РежимРаботы) Экспорт
	
	ТекущиеДанные = Форма.Элементы.ОбъектыМетаданных.ТекущиеДанные;
	
	Если ПустаяСтрока(ТекущиеДанные.ПолноеИмя) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.СтандартныйРеквизит Тогда
		
		Если СтрНайти(ТекущиеДанные.Владелец, "ТабличнаяЧасть") > 0 И ТекущиеДанные.ПолучитьРодителя().Раздел = "СтандартныеТабличныеЧасти" Тогда
			
			ПутьКОбъектуМетаданных     = СтрЗаменить(ТекущиеДанные.Владелец, ".ТабличнаяЧасть.", Символы.ПС);
			ПутьКСтандартномуРеквизиту = СтрПолучитьСтроку(ПутьКОбъектуМетаданных, СтрЧислоСтрок(ПутьКОбъектуМетаданных))
				+ "." + СтрЗаменить(ТекущиеДанные.ПолноеИмя, ТекущиеДанные.Владелец + ".", "");
			ПутьКОбъектуМетаданных = СтрПолучитьСтроку(ПутьКОбъектуМетаданных, 1);
			
		Иначе
			
			ПутьКОбъектуМетаданных = ТекущиеДанные.Владелец;
			Если ТекущиеДанные.Раздел = "СтандартныеТабличныеЧасти" Тогда
				ПутьКСтандартномуРеквизиту = СтрЗаменить(ТекущиеДанные.ПолноеИмя, ТекущиеДанные.Владелец + ".ТабличнаяЧасть.", "");
			Иначе
				ПутьКСтандартномуРеквизиту = СтрЗаменить(ТекущиеДанные.ПолноеИмя, ТекущиеДанные.Владелец + ".", "");
			КонецЕсли;
		
		КонецЕсли;
		
	Иначе
		
		ПутьКОбъектуМетаданных     = ТекущиеДанные.ПолноеИмя;
		ПутьКСтандартномуРеквизиту = Неопределено;
		
		НаименованиеОбъекта = СтрЗаменить(ПутьКОбъектуМетаданных, ".", Символы.ПС);
		НаименованиеОбъекта = СтрПолучитьСтроку(НаименованиеОбъекта, СтрЧислоСтрок(НаименованиеОбъекта));
		
	КонецЕсли;
	
	Если РежимРаботы = "Роли" Тогда
		ИмяМакета = "РолиОбъектовМетаданных";
	ИначеЕсли РежимРаботы = "Пользователи" Тогда
		ИмяМакета = "ПользователиОбъектовМетаданных";
	КонецЕсли;
	
	ОтборСтрок = Новый Структура("Реквизит, Объект",
		ПутьКОбъектуМетаданных,
		?(ПутьКСтандартномуРеквизиту = Неопределено, НаименованиеОбъекта, ПутьКСтандартномуРеквизиту));
		
	Если Форма[ИмяМакета].НайтиСтроки(ОтборСтрок).Количество() = 0 Тогда
		Форма.ПраваДоступа = ПолучитьПраваДоступаНаСервере(
			ПутьКОбъектуМетаданных,
			ПутьКСтандартномуРеквизиту,
			НаименованиеОбъекта,
			ИмяМакета,
			ТекущиеДанные.Раздел,
			РежимРаботы);
		ПолучитьДанныеКоллекцииФормы(ЭтотОбъект[ИмяМакета], Форма[ИмяМакета], 0, Истина, Ложь);
	Иначе
		ПолучитьДанныеКоллекцииФормы(Форма[ИмяМакета], ЭтотОбъект[ИмяМакета], 0, Ложь, Ложь);
		Форма.ПраваДоступа = СформироватьТабличныйДокументПоПравам(
			ПутьКОбъектуМетаданных,
			?(ПутьКСтандартномуРеквизиту = Неопределено, НаименованиеОбъекта, ПутьКСтандартномуРеквизиту),
			ИмяМакета);
		ЭтотОбъект[ИмяМакета].Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПраваПоРолямИПользователям(Форма, РежимРаботы) Экспорт
	
	ТекущиеДанные = Форма.Элементы[РежимРаботы].ТекущиеДанные;
	
	Если ПустаяСтрока(ТекущиеДанные) Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьДанныеКоллекцииФормы(Форма.СоответствияРолейИПользователей, СоответствияРолейИПользователей, 0, Ложь, Истина);
	
	Если РежимРаботы = "Роли" Тогда
		Форма.ПраваДоступа = ПолучитьПраваПоРолямИПользователямСервер(ТекущиеДанные.ИмяРоли, "ПользователиРоли");
	ИначеЕсли РежимРаботы = "Пользователи" тогда
		Форма.ПраваДоступа = ПолучитьПраваПоРолямИПользователямСервер(ТекущиеДанные.ИмяПользователя, "РолиПользователя");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПраваПоРолямИПользователямСервер(ИмяАналитики, ИмяМакета)
	
	ИнициализироватьОбъектОбработки();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Если Пользователи.Количество() = 0 Тогда
		ЗаполнитьСписокРолейИПользователейНаСервере();
	КонецЕсли;
	
	ТабличныйДокумент = СформироватьТабличныйДокументПоПравам(ИмяАналитики,, ИмяМакета);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьПраваОбъектовМетаданныхПоРолиПользователю(Форма, РежимРаботы) Экспорт
	
	ТекущиеДанные = Форма.Элементы[РежимРаботы].ТекущиеДанные;
	
	Если ПустаяСтрока(ТекущиеДанные) Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализироватьОбъектОбработки();
	
	Если РежимРаботы = "Роли" Тогда
		ИмяМакета  = "ОбъектыМетаданныхРолей";
		ИмяСреза   = ТекущиеДанные.ИмяРоли;
		ОтборСтрок = Новый Структура("Роль, АнализироватьТолькоИнтерфейсныеОбъекты", ТекущиеДанные.ИмяРоли, Форма.АнализироватьТолькоИнтерфейсныеОбъекты);
		АнализироватьТолькоИнтерфейсныеОбъекты = Форма.АнализироватьТолькоИнтерфейсныеОбъекты;
	ИначеЕсли РежимРаботы = "Пользователи" Тогда
		ИмяМакета  = "ОбъектыМетаданныхПользователей";
		ИмяСреза   = ТекущиеДанные.ИмяПользователя;
		ОтборСтрок = Новый Структура("Пользователь", ТекущиеДанные.ИмяПользователя);
		АнализироватьТолькоИнтерфейсныеОбъекты = Ложь;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если Форма[ИмяМакета].НайтиСтроки(ОтборСтрок).Количество() = 0 Тогда
		Форма.ПраваДоступа = ПолучитьПраваДоступаПоОбъектам(
			ИмяСреза,
			ИмяМакета,
			РежимРаботы,
			АнализироватьТолькоИнтерфейсныеОбъекты);
		ПолучитьДанныеКоллекцииФормы(ЭтотОбъект[ИмяМакета], Форма[ИмяМакета], 0, Истина, Ложь);
	Иначе
		ПолучитьДанныеКоллекцииФормы(Форма[ИмяМакета], ЭтотОбъект[ИмяМакета], 0, Ложь, Ложь);
		Форма.ПраваДоступа = СформироватьТабличныйДокументПоПравам(
			ИмяСреза,,
			ИмяМакета,
			АнализироватьТолькоИнтерфейсныеОбъекты);
		ЭтотОбъект[ИмяМакета].Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокРолей(Форма) Экспорт
	
	ЗаполнитьСписокРолейНаСервере();
	ПолучитьДанныеКоллекцииФормы(Роли, Форма.Роли, 0, Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокПользователей(Форма) Экспорт
	
	ПолучитьДанныеКоллекцииФормы(Форма.Роли,                      Роли,                                  0, Ложь, Истина);
	ЗаполнитьСписокРолейИПользователейНаСервере();
	Если Форма.Роли.Количество() = 0 Тогда
		ПолучитьДанныеКоллекцииФормы(Роли,                        Форма.Роли,                            0, Истина, Истина);
	КонецЕсли;
	ПолучитьДанныеКоллекцииФормы(Пользователи,                    Форма.Пользователи,                    0, Истина, Истина);
	ПолучитьДанныеКоллекцииФормы(СоответствияРолейИПользователей, Форма.СоответствияРолейИПользователей, 0, Истина, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Частные

&НаСервере
Функция СформироватьТабличныйДокументПоПравам(ПутьКОбъектуОтбора, Объект, ИмяМакета, АнализироватьТолькоИнтерфейсныеОбъекты = Неопределено)
	
	ИнициализироватьОбъектОбработки();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	МакетОбъекта      = ОбъектОбработки.ПолучитьМакет(ИмяМакета);
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	Если ИмяМакета = "РолиОбъектовМетаданных" ИЛИ ИмяМакета = "ПользователиОбъектовМетаданных" Тогда
		ЭлементОтбораРеквизита = МакетОбъекта.НастройкиПоУмолчанию.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораРеквизита.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбораРеквизита.Использование  = ИСТИНА;
		ЭлементОтбораРеквизита.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект");
		ЭлементОтбораРеквизита.ПравоеЗначение = Объект;
	КонецЕсли;
	
	ЭлементОтбора = МакетОбъекта.НастройкиПоУмолчанию.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование  = ИСТИНА;
	ЭлементОтбора.ПравоеЗначение = ПутьКОбъектуОтбора;
	
	Если ИмяМакета = "РолиОбъектовМетаданных" ИЛИ ИмяМакета = "ПользователиОбъектовМетаданных" Тогда
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Реквизит");
	ИначеЕсли ИмяМакета = "ПользователиРоли" Тогда
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Роль");
	ИначеЕсли ИмяМакета = "ОбъектыМетаданныхРолей" Тогда 
		
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Роль"); 
		
		ЭлементОтбора = МакетОбъекта.НастройкиПоУмолчанию.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("АнализироватьТолькоИнтерфейсныеОбъекты");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование  = ИСТИНА;
		ЭлементОтбора.ПравоеЗначение = АнализироватьТолькоИнтерфейсныеОбъекты;
		
	ИначеЕсли ИмяМакета = "РолиПользователя" ИЛИ ИмяМакета = "ОбъектыМетаданныхПользователей" Тогда
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Пользователь");
	КонецЕсли;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(МакетОбъекта, МакетОбъекта.НастройкиПоУмолчанию);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	
	Если ИмяМакета = "РолиОбъектовМетаданных" Тогда
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, Новый Структура("РолиОбъектовМетаданных", РолиОбъектовМетаданных.Выгрузить()));
	ИначеЕсли ИмяМакета = "ПользователиОбъектовМетаданных" Тогда
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, Новый Структура("ПользователиОбъектовМетаданных", ПользователиОбъектовМетаданных.Выгрузить()));
	ИначеЕсли ИмяМакета = "ПользователиРоли" ИЛИ ИмяМакета = "РолиПользователя" Тогда
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, Новый Структура("СоответствияРолейИПользователей", СоответствияРолейИПользователей.Выгрузить()));
	ИначеЕсли ИмяМакета = "ОбъектыМетаданныхРолей" Тогда
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, Новый Структура("ОбъектыМетаданныхРолей", ОбъектыМетаданныхРолей.Выгрузить()));
	ИначеЕсли ИмяМакета = "ОбъектыМетаданныхПользователей" Тогда
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, Новый Структура("ОбъектыМетаданныхПользователей", ОбъектыМетаданныхПользователей.Выгрузить()));
	КонецЕсли;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабличныйДокумент);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

&НаСервере
Функция ПолучитьПраваДоступаНаСервере(ПутьКОбъектуМетаданных, ПутьКСтандартномуРеквизиту, НаименованиеОбъекта, ИмяМакета, Раздел, РежимРаботы)
	
	ИнициализироватьОбъектОбработки();
	
	ПраваОбъектаМетаданных = Новый ТаблицаЗначений;
	ПраваОбъектаМетаданных.Колонки.Добавить("Объект",                Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
	ПраваОбъектаМетаданных.Колонки.Добавить("Реквизит",              Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1000)));
	ПраваОбъектаМетаданных.Колонки.Добавить("РольПользователь",      Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
	ПраваОбъектаМетаданных.Колонки.Добавить("Право",                 Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ПраваОбъектаМетаданных.Колонки.Добавить("Использование",         Новый ОписаниеТипов("Булево"));
	
	ПраваРаздела = ОбъектОбработки.ПраваРаздела(Раздел);
	
	Если РежимРаботы = "Роли" Тогда
		Список = Метаданные.Роли;
	ИначеЕсли РежимРаботы = "Пользователи" Тогда
		Список = ПользователиИнформационнойБазы.ПолучитьПользователей();
	КонецЕсли;
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПутьКОбъектуМетаданных);
	
	Для Каждого РольПользователь Из Список Цикл
		
		ОбъектОбработки.ПроверитьПраваДоступа(ОбъектМетаданных, ПутьКОбъектуМетаданных, ПутьКСтандартномуРеквизиту, РольПользователь, ПраваРаздела, ПраваОбъектаМетаданных);
		
		Если ПраваОбъектаМетаданных.НайтиСтроки(Новый Структура("Использование", ИСТИНА)).Количество() > 0 тогда
			
			Для каждого Строка Из ПраваОбъектаМетаданных Цикл
				
				Если РежимРаботы = "Роли" Тогда
					НоваяСтрока = РолиОбъектовМетаданных.Добавить();
					НоваяСтрока.Роль = Строка.РольПользователь;
				ИначеЕсли РежимРаботы = "Пользователи" Тогда
					НоваяСтрока = ПользователиОбъектовМетаданных.Добавить();
					НоваяСтрока.Пользователь = Строка.РольПользователь;
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				
			КонецЦикла;
			
		КонецЕсли;
		
		ПраваОбъектаМетаданных.Очистить();
		
	КонецЦикла;
	
	ТабличныйДокумент = СформироватьТабличныйДокументПоПравам(
		ПутьКОбъектуМетаданных,
		?(ПутьКСтандартномуРеквизиту = Неопределено, НаименованиеОбъекта, ПутьКСтандартномуРеквизиту),
		ИмяМакета);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

&НаСервере
Функция ПолучитьПраваДоступаПоОбъектам(ИмяРолиПользователя, ИмяМакета, РежимРаботы, АнализироватьТолькоИнтерфейсныеОбъекты = Ложь)
	
	ИнициализироватьОбъектОбработки();
	
	ПраваОбъектовМетаданных = Новый ТаблицаЗначений;
	ПраваОбъектовМетаданных.Колонки.Добавить("ИмяОбъекта",                                    Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1000)));
	ПраваОбъектовМетаданных.Колонки.Добавить("Право",                                         Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ПраваОбъектовМетаданных.Колонки.Добавить("Использование",                                 Новый ОписаниеТипов("Булево"));
	ПраваОбъектовМетаданных.Колонки.Добавить(?(РежимРаботы = "Роли", "Роль", "Пользователь"), Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
	ПраваОбъектовМетаданных.Колонки.Добавить("ВключенВИнтерфейс",                             Новый ОписаниеТипов("Булево"));
	
	Для Каждого РольПользовательИзМетаданных Из ?(РежимРаботы = "Роли", Метаданные.Роли, ПользователиИнформационнойБазы.ПолучитьПользователей()) Цикл
		Если РольПользовательИзМетаданных.Имя = ИмяРолиПользователя Тогда
			РольПользователь = РольПользовательИзМетаданных;
		КонецЕсли;
	КонецЦикла;
	
	Разделы = ОбъектОбработки.ПолучитьРазделы();
	ИнтерфейсныеОбъекты = Неопределено;
	
	Для Каждого Раздел Из Разделы Цикл
		
		Для Каждого ОбъектМетаданных Из Метаданные[Раздел.ИмяРаздела] Цикл
			
			ОписаниеОбъекта = ОбъектОбработки.ПолучитьОписаниеОбъекта(ОбъектМетаданных, Раздел.ИмяРаздела, ИнтерфейсныеОбъекты);
			
			Если Не ЗначениеЗаполнено(ОписаниеОбъекта.Путь) Тогда
				Продолжить;
			КонецЕсли;
			
			Если АнализироватьТолькоИнтерфейсныеОбъекты И
				НЕ ОписаниеОбъекта.ВключенВИнтерфейс Тогда
				Продолжить;
			КонецЕсли;
			
			Если Лев(ОписаниеОбъекта.Путь, 12) <> "Перечисления" И Лев(ОписаниеОбъекта.Путь, 10) <> "WebСервисы" Тогда
				
				ПраваРаздела = ОбъектОбработки.ПраваРаздела(ОписаниеОбъекта.Раздел);
				ОбъектОбработки.ПроверитьПраваДоступаПоРолямПользователям(
					РольПользователь,
					ПраваРаздела,
					ОписаниеОбъекта,
					ПраваОбъектовМетаданных,
					РежимРаботы);
				
				Если ПраваОбъектовМетаданных.НайтиСтроки(Новый Структура("Использование", ИСТИНА)).Количество() > 0 Тогда
					ОбъектОбработки.ДобавитьСтрокуПравРеквизитовОбъектовМетаданных(ПраваОбъектовМетаданных,
						ОбъектыМетаданныхРолей,
						ОбъектыМетаданныхПользователей,
						РежимРаботы,
						АнализироватьТолькоИнтерфейсныеОбъекты);
				КонецЕсли;
				
			КонецЕсли;
			
			ПолучитьПраваДоступаПоПодчиненнымОбъектам(
				ОписаниеОбъекта.Объекты,
				ОписаниеОбъекта,
				ПраваОбъектовМетаданных,
				РольПользователь,
				РежимРаботы,
				АнализироватьТолькоИнтерфейсныеОбъекты);
			
			ПраваОбъектовМетаданных.Очистить();
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТабличныйДокумент = СформироватьТабличныйДокументПоПравам(ИмяРолиПользователя,, ИмяМакета, АнализироватьТолькоИнтерфейсныеОбъекты);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

&НаСервере
Процедура ПолучитьПраваДоступаПоПодчиненнымОбъектам(ПодчиненныеОбъекты, ОписаниеОбъекта, ПраваОбъектовМетаданных,
	РольПользователь, РежимРаботы, АнализироватьТолькоИнтерфейсныеОбъекты)
	
	ИнициализироватьОбъектОбработки();
	
	ЭтоПодсистемы        = ОписаниеОбъекта.Раздел = "Подсистемы";
	ИспользованиеТаблицы = ПраваОбъектовМетаданных.НайтиСтроки(Новый Структура("Использование", ИСТИНА)).Количество() > 0;
	
	ПраваРеквизитовОбъектовМетаданных = ПраваОбъектовМетаданных.СкопироватьКолонки();
	
	Для Каждого РеквизитОбъектаМетаданных Из ПодчиненныеОбъекты Цикл
		
		Если ЭтоПодсистемы Тогда
			Прервать;
		КонецЕсли;
		
		Если ОписаниеОбъекта.ЭтоОсновнаяТаблица И Не РеквизитОбъектаМетаданных.Раздел = "Команды" И НЕ ИспользованиеТаблицы Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ОписаниеОбъекта.ЭтоНаборЗаписей И Не ОписаниеОбъекта.ЭтоСсылка
			И (РеквизитОбъектаМетаданных.Раздел = "СтандартныеРеквизиты"
				ИЛИ РеквизитОбъектаМетаданных.Раздел = "Реквизиты"
				ИЛИ РеквизитОбъектаМетаданных.Раздел = "ТабличныеЧасти") Тогда
			ПраваРаздела = ОбъектОбработки.ПраваРаздела("РеквизитыНаПросмотр");
		Иначе
			ПраваРаздела = ОбъектОбработки.ПраваРаздела(РеквизитОбъектаМетаданных.Раздел);
		КонецЕсли;
		ОбъектОбработки.ПроверитьПраваДоступаПоРолямПользователям(
			РольПользователь,
			ПраваРаздела,
			РеквизитОбъектаМетаданных,
			ПраваРеквизитовОбъектовМетаданных,
			РежимРаботы);
		
		ИспользованиеРеквизитов = ПраваРеквизитовОбъектовМетаданных.НайтиСтроки(Новый Структура("Использование", Истина)).Количество() > 0;
		РасхождениеПравДоступа  = Не ОбъектОбработки.СравнитьПраваДоступа(ПраваОбъектовМетаданных, ПраваРеквизитовОбъектовМетаданных);
		
		ДобавитьПраваВАнализ =
			Не РеквизитОбъектаМетаданных.Раздел = "Команды"
			И (РасхождениеПравДоступа
				И ИспользованиеТаблицы)
			ИЛИ РеквизитОбъектаМетаданных.Раздел = "Команды"
			И (ИспользованиеТаблицы ИЛИ ИспользованиеРеквизитов);
		
		Если ДобавитьПраваВАнализ Тогда
			ОбъектОбработки.ДобавитьСтрокуПравРеквизитовОбъектовМетаданных(
				ПраваРеквизитовОбъектовМетаданных,
				ОбъектыМетаданныхРолей,
				ОбъектыМетаданныхПользователей,
				РежимРаботы,
				АнализироватьТолькоИнтерфейсныеОбъекты);
		КонецЕсли;
		
		Если РеквизитОбъектаМетаданных.Раздел = "ТабличныеЧасти" ИЛИ РеквизитОбъектаМетаданных.Раздел = "СтандартныеТабличныеЧасти" Тогда
			ПолучитьПраваДоступаПоПодчиненнымОбъектам(
				РеквизитОбъектаМетаданных.Объекты,
				ОписаниеОбъекта,
				ПраваОбъектовМетаданных,
				РольПользователь,
				РежимРаботы,
				АнализироватьТолькоИнтерфейсныеОбъекты);
		КонецЕсли;
		
		ПраваРеквизитовОбъектовМетаданных.Очистить();
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокРолейНаСервере()
	
	Для Каждого Роль Из Метаданные.Роли Цикл
		
		Если Роли.НайтиСтроки(Новый Структура("ИмяРоли", Роль.Имя)).Количество() = 0 Тогда
			НоваяРоль                      = Роли.Добавить();
			НоваяРоль.Картинка             = ПолучитьКартинкуПоРазделу("Роли");
			НоваяРоль.КартинкаПользователь = ПолучитьКартинкуПоРазделу("Пользователи");
			НоваяРоль.КартинкаОбъект       = ПолучитьКартинкуПоРазделу("Справочники");
			НоваяРоль.ИмяРоли              = Роль.Имя;
		КонецЕсли;
		
	КонецЦикла;
	
	Роли.Сортировать("ИмяРоли");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокРолейИПользователейНаСервере()
	
	ЗаполнитьРоли = Роли.Количество() = 0;
	
	Для Каждого Пользователь Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
		
		НовыйПользователь                       = Пользователи.Добавить();
		НовыйПользователь.КартинкаРоль          = ПолучитьКартинкуПоРазделу("Роли");
		НовыйПользователь.КартинкаОбъект        = ПолучитьКартинкуПоРазделу("Справочники");
		НовыйПользователь.ИмяПользователя       = Пользователь.Имя;
		
		Если Пользователь.АутентификацияСтандартная = ЛОЖЬ Тогда
			НовыйПользователь.Картинка = ПолучитьКартинкуПоРазделу("ПользователиБезНеобходимыхСвойств");
		ИначеЕсли Пользователь.ЗапрещеноИзменятьПароль = ИСТИНА Тогда
			НовыйПользователь.Картинка = ПолучитьКартинкуПоРазделу("ПользователиСАутентификацией");
		Иначе
			НовыйПользователь.Картинка = ПолучитьКартинкуПоРазделу("Пользователи");
		КонецЕсли;
		
		Для Каждого Роль Из Пользователь.Роли Цикл
			
			НовоеСоответствие              = СоответствияРолейИПользователей.Добавить();
			НовоеСоответствие.Пользователь = Пользователь.Имя;
			НовоеСоответствие.Роль         = Роль.Имя;
			
			Если ЗаполнитьРоли И Роли.НайтиСтроки(Новый Структура("ИмяРоли", Роль.Имя)).Количество() = 0 Тогда
				НоваяРоль                      = Роли.Добавить();
				НоваяРоль.КартинкаПользователь = ПолучитьКартинкуПоРазделу("Пользователи");
				НоваяРоль.КартинкаОбъект       = ПолучитьКартинкуПоРазделу("Справочники");
				НоваяРоль.Картинка             = ПолучитьКартинкуПоРазделу("Роли");
				НоваяРоль.ИмяРоли              = Роль.Имя;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ЗаполнитьРоли Тогда
		Роли.Сортировать("ИмяРоли");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область РаботаСБД

#Область Общие

&НаКлиенте
Процедура ВвестиИмяТаблицыБазДанных() Экспорт
	
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ПолучитьОбъектПоТаблицеБДЗавершениеВводаИмениТаблицы", ЭтотОбъект);
	ПоказатьВводСтроки(ОписаниеОповещенияОЗавершении,, НСтр("ru = 'Имя таблицы баз данных'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИндексыПоОбъектуМетаданных(Форма) Экспорт
	
	ТекущиеДанные = Форма.Элементы.ОбъектыМетаданных.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Или ПустаяСтрока(ТекущиеДанные.ИмяСУБД) Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьИндексыПоОбъектуМетаданныхНаСервере(ТекущиеДанные.ПолноеИмя, ТекущиеДанные.ВходитВИндексСУБД);
	ПолучитьДанныеКоллекцииФормы(ТекущиеИндексы, Форма.ТекущиеИндексы);
	
	Уровень0 = Форма.ТекущиеИндексы.ПолучитьЭлементы();
	Для Каждого Элемент_Уровень0 Из Уровень0 Цикл
		Форма.Элементы.ТекущиеИндексы.Развернуть(Элемент_Уровень0.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьОбъектПоТаблицеБДЗавершениеВводаИмениТаблицы(Строка, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Строка) Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьОбъектПоТаблицеБД(Строка);
	
КонецПроцедуры

#КонецОбласти

#Область Частные

&НаСервере
Процедура ПолучитьОбъектПоТаблицеБД(ИмяСущностиБД)
	
	ИнициализироватьОбъектОбработки();
	
	ОбъектОбработки.ПолучитьОбъектПоТаблицеБД(ИмяСущностиБД);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьИндексыПоОбъектуМетаданныхНаСервере(ПолноеИмя, ВходитВИндексСУБД)
	
	СтруктураХранения = ПолучитьИзВременногоХранилища(АдресСтруктурыХранения);
	
	Уровень0 = ТекущиеИндексы.ПолучитьЭлементы();
	Уровень0.Очистить();
	Уровень1 = Неопределено;
	ЭлементУровня0 = Неопределено;
	
	ТекущийИндекс      = "";
	ИндексСодержитПоле = ЛОЖЬ;
	
	Если НЕ ВходитВИндексСУБД Тогда
		ИндексыСУБД = СтруктураХранения.СтруктураХраненияИндексов.Получить(ПолноеИмя);
	Иначе
		ИндексыСУБД = СтруктураХранения.СтруктураХраненияИндексов.Получить(ПолноеИмя);
		Если ИндексыСУБД = Неопределено ИЛИ НЕ ТипЗнч(ИндексыСУБД) = Тип("Строка") Тогда
			Возврат;
		КонецЕсли;
		ИндексыСУБД = СтруктураХранения.СтруктураХраненияИндексов.Получить(ИндексыСУБД);
	КонецЕсли;
	
	Если ИндексыСУБД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Элемент Из ИндексыСУБД Цикл
		
		Если Уровень1 = Неопределено ИЛИ ТекущийИндекс <> Элемент.ИндексСУБД Тогда
			
			Если НЕ Уровень1 = Неопределено И НЕ ИндексСодержитПоле И ВходитВИндексСУБД Тогда
				Уровень1.Очистить();
				Уровень0.Удалить(Уровень0.Индекс(ЭлементУровня0));
			КонецЕсли;
			
			ЭлементУровня0 = Уровень0.Добавить();
			ЭлементУровня0.Индекс = Элемент.ИндексСУБД;
			
			ИндексСодержитПоле = ЛОЖЬ;
			ТекущийИндекс      = Элемент.ИндексСУБД;
			
			Уровень1 = ЭлементУровня0.ПолучитьЭлементы();
			
		КонецЕсли;
		
		ЭлементУровень1 = Уровень1.Добавить();
		ЭлементУровень1.Поле    = Элемент.ПолеСУБД;
		ЭлементУровень1.ИмяПоля = Элемент.ИмяПоля;
		
		Если НЕ ИндексСодержитПоле И ВходитВИндексСУБД И Элемент.ПолноеИмяПоля = ПолноеИмя Тогда
			ИндексСодержитПоле = ИСТИНА;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ Уровень1 = Неопределено И НЕ ИндексСодержитПоле И ВходитВИндексСУБД Тогда
		Уровень1.Очистить();
		Уровень0.Удалить(Уровень0.Индекс(ЭлементУровня0));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСтруктуруХранения(ЗаполнитьСтруктуруХранения = Истина)
	
	ИнициализироватьОбъектОбработки();
	
	ОбъектОбработки.ИнициализироватьСтруктуруХранения(СтруктураХранения, АдресСтруктурыХранения, УникальныйИдентификатор, ЗаполнитьСтруктуруХранения = Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область РаботаСБитымиСсылками

#Область Общие

&НаКлиенте
Процедура НайтиБитыеСсылки(Форма) Экспорт
	
	НайтиБитыеСсылкиНаСервере();
	ПолучитьДанныеКоллекцииФормы(БитыеСсылки, Форма.БитыеСсылки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОбъектаСБитойСсылкой(Форма, ВыбраннаяСтрока) Экспорт
	
	ТекущиеДанные = Форма.БитыеСсылки.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если ТипЗнч(ТекущиеДанные.Ключ) = Тип("СписокЗначений") Тогда
		ПоляЗаписи = Новый Структура;
		Для Каждого Элемент Из ТекущиеДанные.Ключ Цикл
			ПоляЗаписи.Вставить(Элемент.Представление, Элемент.Значение);
		КонецЦикла;
		
		КлючиЗаписи = Новый Массив;
		КлючиЗаписи.Добавить(ПоляЗаписи);
		Если ТекущиеДанные.Раздел = "РегистрыСведений" Тогда
			КлючЗаписи = Новый ("РегистрСведенийКлючЗаписи." + ТекущиеДанные.ИмяТаблицы, КлючиЗаписи);
		ИначеЕсли ТекущиеДанные.Раздел = "РегистрыНакопления" Тогда
			КлючЗаписи = Новый ("РегистрНакопленияКлючЗаписи." + ТекущиеДанные.ИмяТаблицы, КлючиЗаписи);
		ИначеЕсли ТекущиеДанные.Раздел = "РегистрыБухгалтерии" Тогда
			КлючЗаписи = Новый ("РегистрБухгалтерииКлючЗаписи." + ТекущиеДанные.ИмяТаблицы, КлючиЗаписи);
		ИначеЕсли ТекущиеДанные.Раздел = "РегистрыРасчета" Тогда
			КлючЗаписи = Новый ("РегистрРасчетаКлючЗаписи." + ТекущиеДанные.ИмяТаблицы, КлючиЗаписи);
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура("Ключ", КлючЗаписи); 
		ОткрытьФорму(ТекущиеДанные.ПолноеИмяТаблицы + ".ФормаЗаписи", ПараметрыФормы);
	Иначе
		ПараметрыФормы = Новый Структура("Ключ", ТекущиеДанные.Ключ);
		Попытка
			ЭтоГруппа = ТекущиеДанные.Ключ.ЭтоГруппа();
		Исключение
			ЭтоГруппа = Ложь;
		КонецПопытки;
		ПолноеИмяТаблицы = ТекущиеДанные.ПолноеИмяТаблицы;
		Если СтрЧислоВхождений(ПолноеИмяТаблицы, ".") > 1 Тогда
			ЧастиТаблицы = СтрРазделить(ПолноеИмяТаблицы, ".");
			ПолноеИмяТаблицы = ЧастиТаблицы[0] + "." + ЧастиТаблицы[1];
		КонецЕсли;
		Если ЭтоГруппа Тогда
			ОткрытьФорму(ПолноеИмяТаблицы + ".ФормаГруппы", ПараметрыФормы);
		Иначе
			ОткрытьФорму(ПолноеИмяТаблицы + ".ФормаОбъекта", ПараметрыФормы);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьУказанныеБитыеСсылки(Форма) Экспорт
	
	Для Каждого ИндексСтроки Из Форма.Элементы.БитыеСсылки.ВыделенныеСтроки Цикл
		
		ТекущиеДанные = Форма.БитыеСсылки.НайтиПоИдентификатору(ИндексСтроки);
		
		Если ТекущиеДанные = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ТекущиеДанные.Ключ) = Тип("СписокЗначений") Тогда
			ИсправитьБитуюСсылкуВЗаписи(ТекущиеДанные.Ключ, ТекущиеДанные.Раздел, ТекущиеДанные.ИмяТаблицы, ТекущиеДанные.ИмяПоля);
		Иначе
			ИмяТаблицы = "";
			Если СтрЧислоВхождений(ТекущиеДанные.ПолноеИмяТаблицы, ".") > 1 Тогда
				ИмяТаблицы = ТекущиеДанные.ИмяТаблицы;
			КонецЕсли;
			ИсправитьБитуюСсылкуВОбъекте(ТекущиеДанные.Ключ, ТекущиеДанные.БитаяСсылка, ТекущиеДанные.ИмяПоля, ИмяТаблицы);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Частные

&НаСервере
Процедура НайтиБитыеСсылкиНаСервере()
	
	ИнициализироватьОбъектОбработки();
	
	ТаблицаБитыхСсылок = ОбъектОбработки.ПолучитьТаблицуБитыхСсылок();
	БитыеСсылки.Загрузить(ТаблицаБитыхСсылок);
	
КонецПроцедуры

&НаСервере
Процедура ИсправитьБитуюСсылкуВОбъекте(Ссылка, БитаяСсылка, ИмяПоля, ИмяТаблицы)
	
	ИнициализироватьОбъектОбработки();
	
	ОбъектОбработки.ИсправитьБитуюСсылкуВОбъекте(Ссылка, БитаяСсылка, ИмяПоля, ИмяТаблицы);
	
КонецПроцедуры

&НаСервере
Процедура ИсправитьБитуюСсылкуВЗаписи(КлючЗаписи, Раздел, ИмяТаблицы, ИмяПоля)
	
	ИнициализироватьОбъектОбработки();
	
	ОбъектОбработки.ИсправитьБитуюСсылкуВЗаписи(КлючЗаписи, Раздел, ИмяТаблицы, ИмяПоля);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область РаботаСоСтатистикойДанных

#Область Общие

&НаКлиенте
Процедура ЗаполнитьСтатистику(Форма) Экспорт
	
	Если Форма.ОбъектыМетаданных.ПолучитьЭлементы().Количество() = 0 Тогда
		ЗаполнитьМетаданные(Форма);
	КонецЕсли;
	
	ПолучитьОбъектыМетаданныхПоПризнаку(Форма.ОбъектыМетаданных, "ЭтоОсновнаяТаблица", Истина);
	
	ЗаполнитьСтатистикуНаСервере();
	
	ПеренестиОбъектыМетаданныхПоПризнакуВИсточник(Форма.ОбъектыМетаданных);
	
	РассчитатьСтатистикуВУзлах(Форма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтатистикуРеквизитаПоТипам(Форма, ИмяПоля, ИмяТаблицы) Экспорт
	
	СтатистикаРеквизитаПоТипам = ПолучитьСтатистикуРеквизитаПоТипам(ИмяПоля, ИмяТаблицы);
	
	Для Каждого Строка Из Форма.Типы Цикл
		ЧастиТипа = СтрРазделить(Строка.ПолноеИмя, "(");
		Количество = СтатистикаРеквизитаПоТипам.Получить(СокрЛП(ЧастиТипа[0]));
		Строка.Количество = ?(Количество = Неопределено, 0, Количество);
	КонецЦикла;
	
	Форма.Типы.Сортировать("Количество Убыв, Простой Убыв, ПолноеИмя Возр");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтатистикуПоСсылающимсяТипам(Форма, ПолноеИмя, Раздел, ТипПоиска) Экспорт
	
	ЭлементОбъектовМетаданных = Новый Структура; 
	ЭлементОбъектовМетаданных.Вставить("ПолноеИмя", ПолноеИмя);
	ЭлементОбъектовМетаданных.Вставить("Раздел",    Раздел);
	
	СтатистикаПоСсылающимсяТипам = ПолучитьСтатистикуПоСсылающимсяТипам(ЭлементОбъектовМетаданных, ТипПоиска);
	
	Для Каждого КлючИЗначение Из СтатистикаПоСсылающимсяТипам Цикл
		НоваяСтрока = Форма.Типы.Добавить();
		НоваяСтрока.ПолноеИмя  = КлючИЗначение.Ключ;
		НоваяСтрока.Количество = КлючИЗначение.Значение;
	КонецЦикла;
	
	Форма.Типы.Сортировать("Количество Убыв, ПолноеИмя Возр");
	
КонецПроцедуры

&НаКлиенте
Функция НайтиСсылкиПоЗначениюРеквизита(ЗначениеРеквизита, ИмяТаблицы, ИмяРеквизита) Экспорт
	
	Возврат НайтиСсылкиПоЗначениюРеквизитаНаСервере(ЗначениеРеквизита, ИмяТаблицы, ИмяРеквизита);
	
КонецФункции

#КонецОбласти

#Область Частные

&НаКлиенте
Процедура РассчитатьСтатистикуВУзлах(Форма)
	
	ЭлементыПервогоУровня = Форма.ОбъектыМетаданных.ПолучитьЭлементы();
	Для Каждого ЭлементПервогоУровня Из ЭлементыПервогоУровня Цикл
		ЭлементыВторогоУровня = ЭлементПервогоУровня.ПолучитьЭлементы();
		Для Каждого ЭлементВторогоУровня Из ЭлементыВторогоУровня Цикл
			ЭлементыТретьегоУровня = ЭлементВторогоУровня.ПолучитьЭлементы();
			Для Каждого ЭлементТретьегоУровня Из ЭлементыТретьегоУровня Цикл
				Если ЭлементВторогоУровня.Раздел = "Общие" Тогда
					ЭлементыЧетвертогоУровня = ЭлементТретьегоУровня.ПолучитьЭлементы();
					Для Каждого ЭлементЧетвертогоУровня Из ЭлементыЧетвертогоУровня Цикл
						ЭлементТретьегоУровня.КоличествоЭлементов = ЭлементТретьегоУровня.КоличествоЭлементов + ЭлементЧетвертогоУровня.КоличествоЭлементов;
					КонецЦикла;
				КонецЕсли;
				ЭлементТретьегоУровня.ОбъектЗаполнен = ЭлементТретьегоУровня.КоличествоЭлементов > 0;
				ЭлементВторогоУровня.КоличествоЭлементов = ЭлементВторогоУровня.КоличествоЭлементов + ЭлементТретьегоУровня.КоличествоЭлементов;
			КонецЦикла;
			ЭлементВторогоУровня.ОбъектЗаполнен = ЭлементВторогоУровня.КоличествоЭлементов > 0;
			ЭлементПервогоУровня.КоличествоЭлементов = ЭлементПервогоУровня.КоличествоЭлементов + ЭлементВторогоУровня.КоличествоЭлементов;
		КонецЦикла;
		ЭлементПервогоУровня.ОбъектЗаполнен = ЭлементПервогоУровня.КоличествоЭлементов > 0;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатистикуРеквизитовОборотовОстатков(ИдентификаторОбъектаСОборотамиОстатками, РеквизитыОбъекта)
	
	ИнициализироватьОбъектОбработки();
	
	ОбъектСОборотамиОстатками = ОбъектыМетаданных.НайтиПоИдентификатору(ИдентификаторОбъектаСОборотамиОстатками);
	РеквизитыОборотовОстатков = Новый Массив;
	Для Каждого Реквизит Из РеквизитыОбъекта Цикл
		
		Если Реквизит.Подраздел = "Измерения" Тогда
			РеквизитыОборотовОстатков.Добавить(Реквизит);
		ИначеЕсли Реквизит.Подраздел = "Ресурсы" Тогда
			
			Если ОбъектСОборотамиОстатками.Имя = "Обороты" ИЛИ ОбъектСОборотамиОстатками.Раздел = "Обороты" Тогда
				ОбъектОбработки.ДобавитьРесурсыКРеквизитамОборотовОстатков(РеквизитыОборотовОстатков, Реквизит, "Обороты");
			ИначеЕсли ОбъектСОборотамиОстатками.Имя = "Итоги" ИЛИ ОбъектСОборотамиОстатками.Раздел = "Итоги" Тогда
				ОбъектОбработки.ДобавитьРесурсыКРеквизитамОборотовОстатков(РеквизитыОборотовОстатков, Реквизит, "Итоги");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбъектСОборотамиОстатками.РеквизитыСтрокой = ОбъектОбработки.ПреобразоватьРеквизитыВСтроку(РеквизитыОборотовОстатков);
	ЗаполнитьСтатистикуТаблицы(ОбъектСОборотамиОстатками, РеквизитыОборотовОстатков);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатистикуНаСервере()
	
	ИнициализироватьОбъектОбработки();
	
	ОбъектыМетаданныхКВыгрузке = ОбъектыМетаданных.ПолучитьЭлементы();
	Для Каждого ЭлементОбъектовМетаданных Из ОбъектыМетаданныхКВыгрузке Цикл
		//@skip-check query-in-loop
		Статистика = ОбъектОбработки.ПолучитьСтатистикуТаблицы(ЭлементОбъектовМетаданных.ПолноеИмя);
		ЗаполнитьЗначенияСвойств(ЭлементОбъектовМетаданных, Статистика, "КоличествоЭлементов, КоличествоПредопределенных, Выключен");
		Если ЭлементОбъектовМетаданных.КоличествоЭлементов > 0 Тогда
			ИзменитьСтатусЭлементаДерева(ЭлементОбъектовМетаданных, "ОбъектЗаполнен");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НайтиСсылкиПоЗначениюРеквизитаНаСервере(ЗначениеРеквизита, ИмяТаблицы, ИмяРеквизита)
	
	ИнициализироватьОбъектОбработки();
	
	Возврат ОбъектОбработки.НайтиСсылкиПоЗначениюРеквизита(ЗначениеРеквизита, ИмяТаблицы, ИмяРеквизита);
	
КонецФункции

&НаСервере
Функция ПолучитьСтатистикуПоСсылающимсяТипам(ИмяПоля, ИмяТаблицы)
	
	ИнициализироватьОбъектОбработки();
	
	Возврат ОбъектОбработки.ПолучитьСтатистикуПоСсылающимсяТипам(ИмяПоля, ИмяТаблицы);
	
КонецФункции

&НаСервере
Функция ПолучитьСтатистикуРеквизитаПоТипам(ЭлементОбъектовМетаданных, ТипПоиска)
	
	ИнициализироватьОбъектОбработки();
	
	Возврат ОбъектОбработки.ПолучитьСтатистикуРеквизитаПоТипам(ЭлементОбъектовМетаданных, ТипПоиска);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтатистикуТаблицы(ЭлементМетаданных, РеквизитыОбъекта = Неопределено, СистемнаяТаблица = Неопределено)
	
	ИнициализироватьОбъектОбработки();
	
	Если НЕ ОбъектОбработки.ЭтоТаблицаСДанными(ЭлементМетаданных.ПолноеИмя) Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеЭлемента = ЭлементМетаданных.ПолучитьЭлементы();
	
	Если РеквизитыОбъекта <> Неопределено Тогда
		СтруктураПоСтатистике = ОбъектОбработки.ПолучитьСтатистикуЗаполненностиПолейВВТаблице(ЭлементМетаданных.ПолноеИмя, РеквизитыОбъекта);
	Иначе
		СтруктураПоСтатистике = ОбъектОбработки.ПолучитьСтатистикуЗаполненностиПолейВСистемнойТаблице(ЭлементМетаданных.ПолноеИмя, СистемнаяТаблица);
	КонецЕсли;
	
	Если СтруктураПоСтатистике = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементМетаданных.КоличествоЭлементов = СтруктураПоСтатистике["КоличествоСтрокПоТаблице"];
	Если ЭлементМетаданных.ЭтоОсновнаяТаблица Тогда
		ЭлементМетаданных.Выключен = ЭлементМетаданных.КоличествоЭлементов > 0 И Не ОбъектОбработки.ПроверитьДоступностьДанныхВТаблице(ЭлементМетаданных.ПолноеИмя);
	КонецЕсли;
	
	Для Каждого Подраздел_МетаданныеЭлемента Из МетаданныеЭлемента Цикл
		
		МетаданныеПодраздела = Подраздел_МетаданныеЭлемента.ПолучитьЭлементы();
		
		Для Каждого Подраздел Из МетаданныеПодраздела Цикл
			
			Если НЕ Подраздел.Раздел = "СтандартныеРеквизиты" И НЕ Подраздел.Раздел = "Реквизиты"
				И НЕ Подраздел.Раздел = "Измерения" И НЕ Подраздел.Раздел = "Ресурсы" Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ОбъектОбработки.ПроверитьИмяПоля(Подраздел.Имя, ЭлементМетаданных.ПолноеИмя) Тогда
				Продолжить;
			КонецЕсли;
			
			Подраздел.КоличествоЭлементов = СтруктураПоСтатистике[Подраздел.Имя];
			
		КонецЦикла;
		
		Если НЕ Подраздел_МетаданныеЭлемента.Раздел = "СтандартныеРеквизиты" И НЕ Подраздел_МетаданныеЭлемента.Раздел = "Реквизиты" Тогда
			Продолжить;
		КонецЕсли;
		
		Подраздел_МетаданныеЭлемента.КоличествоЭлементов = СтруктураПоСтатистике[Подраздел_МетаданныеЭлемента.Имя];
		
	КонецЦикла;
	
	Если ЭлементМетаданных.КоличествоЭлементов > 0 Тогда
		ИзменитьСтатусЭлементаДерева(ЭлементМетаданных, "ОбъектЗаполнен");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Выгрузка

#Область Общие

&НаКлиенте
Функция ВыгрузитьДанныеОбъектов(Форма, РежимВыгрузкиПоСсылке = Ложь, СтрогийФорматВыгрузки = Ложь) Экспорт
	
	ПолучитьОбъектыМетаданныхПоПризнаку(Форма.ОбъектыМетаданных, "ЭтоОсновнаяТаблица", Истина);
	АдресФайлаВоВременномХранилище = ВыгрузитьДанныеОбъектовНаСервере(РежимВыгрузкиПоСсылке, СтрогийФорматВыгрузки);
	ОбъектыМетаданных.ПолучитьЭлементы().Очистить();
	
	Возврат АдресФайлаВоВременномХранилище;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьДанныеОбъектов(Адрес, Расширение, ОчищатьНеСовпадающиеЭлементы) Экспорт
	
	ЗагрузитьДанныеОбъектовНаСервере(Адрес, Расширение, ОчищатьНеСовпадающиеЭлементы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПараметрыВыгрузки(Форма, ПолноеИмя, Раздел, ТекстНастроек) Экспорт
	
	ПараметрыВыгрузки = ПреобразоватьСтрокуВПараметрыВыгрузки(ТекстНастроек);
	
	ЭлементыОбъекта = Форма.РеквизитыОбъекта.ПолучитьЭлементы();
	Для Каждого ЭлементОбъекта Из ЭлементыОбъекта Цикл
		ИмяЭлемента = ПараметрыВыгрузки.НеВыгружаемыеПоля.Получить(ЭлементОбъекта.ПолноеИмя);
		Если Не ИмяЭлемента = Неопределено Тогда
			ЭлементОбъекта.Выгружать = Ложь;
		КонецЕсли;
		ЭлементыТаблицы = ЭлементОбъекта.ПолучитьЭлементы();
		Для Каждого ЭлементТаблицы Из ЭлементыТаблицы Цикл
			ИмяЭлемента = ПараметрыВыгрузки.НеВыгружаемыеПоля.Получить(ЭлементТаблицы.ПолноеИмя);
			Если Не ИмяЭлемента = Неопределено Тогда
				ЭлементТаблицы.Выгружать = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ЭлементОбъектовМетаданных = Новый Структура;
	ЭлементОбъектовМетаданных.Вставить("ПолноеИмя",         ПолноеИмя);
	ЭлементОбъектовМетаданных.Вставить("Раздел",            Раздел);
	ЭлементОбъектовМетаданных.Вставить("НастройкиВыгрузки", ПараметрыВыгрузки.НастройкиВыгрузки);
	
	ЗагрузитьПараметрыВыгрузкиИзСтроки(Форма.НастройкиВыгрузки, ЭлементОбъектовМетаданных, Форма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Функция СохранитьПараметрыВыгрузкиВСтроку(Форма) Экспорт
	
	НеВыгружаемыеПоля = Новый Соответствие;
	ЭлементыОбъекта = Форма.РеквизитыОбъекта.ПолучитьЭлементы();
	Для Каждого ЭлементОбъекта Из ЭлементыОбъекта Цикл
		Если Не ЭлементОбъекта.Выгружать Тогда
			НеВыгружаемыеПоля.Вставить(ЭлементОбъекта.ПолноеИмя, ЭлементОбъекта.Имя);
		КонецЕсли;
		ЭлементыТаблицы = ЭлементОбъекта.ПолучитьЭлементы();
		Для Каждого ЭлементТаблицы Из ЭлементыТаблицы Цикл
			Если Не ЭлементТаблицы.Выгружать Тогда
				НеВыгружаемыеПоля.Вставить(ЭлементТаблицы.ПолноеИмя, ЭлементТаблицы.Имя);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ТекстНастроек = ПреобразоватьПараметрыВыгрузкиВСтроку(Форма.НастройкиВыгрузки, НеВыгружаемыеПоля);
	
	Возврат ТекстНастроек;
	
КонецФункции

#КонецОбласти

#Область Частные

&НаСервере
Функция ВыгрузитьДанныеОбъектовНаСервере(РежимВыгрузкиПоСсылке = Ложь, СтрогийФорматВыгрузки = Ложь)
	
	ИнициализироватьОбъектОбработки();
	
	Возврат ОбъектОбработки.ВыгрузитьДанныеОбъектов(ОбъектыМетаданных, УникальныйИдентификатор, РежимВыгрузкиПоСсылке, СтрогийФорматВыгрузки);
	
КонецФункции

&НаСервере
Процедура ЗагрузитьДанныеОбъектовНаСервере(Адрес, Расширение, ОчищатьНеСовпадающиеЭлементы)
	
	ИнициализироватьОбъектОбработки();
	
	ОбъектОбработки. ЗагрузитьДанныеОбъектов(Адрес, Расширение, ОчищатьНеСовпадающиеЭлементы);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПараметрыВыгрузкиИзСтроки(НастройкиВыгрузки, ЭлементОбъектовМетаданных, УникальныйИдентификатор)
	
	ИнициализироватьОбъектОбработки();
	
	ОбъектОбработки.ЗагрузитьПараметрыВыгрузкиИзСтроки(НастройкиВыгрузки, ЭлементОбъектовМетаданных, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция ПреобразоватьПараметрыВыгрузкиВСтроку(НастройкиВыгрузки, НеВыгружаемыеПоля)
	
	ИнициализироватьОбъектОбработки();
	
	Возврат ОбъектОбработки.ПреобразоватьПараметрыВыгрузкиВСтроку(НастройкиВыгрузки, НеВыгружаемыеПоля);
	
КонецФункции

&НаСервере
Функция ПреобразоватьСтрокуВПараметрыВыгрузки(ТекстНастроек)
	
	ИнициализироватьОбъектОбработки();
	
	Возврат ОбъектОбработки.ПреобразоватьСтрокуВПараметрыВыгрузки(ТекстНастроек);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Прочее

#Область Общие

&НаКлиенте
Процедура ПроставитьСтатусЭлемента(Элемент, ИмяСтатуса, ЗначениеСтатуса = Истина) Экспорт
	
	ИзменитьСтатусЭлементаДерева(Элемент, ИмяСтатуса, ЗначениеСтатуса)
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьСтатусЭлементаДерева(Элемент, ИмяСтатуса, ЗначениеСтатуса = Истина)
	
	Элемент[ИмяСтатуса] = ЗначениеСтатуса;
	
	РодительЭлемента = Элемент.ПолучитьРодителя();
	Пока Не РодительЭлемента = Неопределено Цикл
		СтатусРодителя = ЗначениеСтатуса;
		Если СтатусРодителя = Ложь Тогда
			ЭлементыРодителя = РодительЭлемента.ПолучитьЭлементы();
			Для Каждого ЭлементРодителя Из ЭлементыРодителя Цикл
				СтатусРодителя = СтатусРодителя ИЛИ ЭлементРодителя[ИмяСтатуса];
			КонецЦикла;
		КонецЕсли;
		РодительЭлемента[ИмяСтатуса] = СтатусРодителя;
		РодительЭлемента = РодительЭлемента.ПолучитьРодителя();
	КонецЦикла;
	
	ПоставитьСтатусДочернихЭлементов(Элемент, ИмяСтатуса, ЗначениеСтатуса)
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеКоллекцииФормы(КоллекцияИсточника, КоллекцияПриемника, Уровень = 0, ОчиститьИсточник = Истина, ОчиститьПриемник = Истина)
	
	Если ТипЗнч(КоллекцияПриемника) = Тип("ДанныеФормыДерево")
		ИЛИ ТипЗнч(КоллекцияПриемника) = Тип("ДанныеФормыЭлементДерева") Тогда
		КопируемаяКоллекция = КоллекцияИсточника;
		Пока Уровень > 0 Цикл
			КопируемаяКоллекция = КопируемаяКоллекция.ПолучитьЭлементы()[0];
			ЗаполнитьЗначенияСвойств(КоллекцияПриемника, КопируемаяКоллекция);
			Уровень = Уровень - 1;
		КонецЦикла;
		Если ОчиститьПриемник Тогда
			КоллекцияПриемника.ПолучитьЭлементы().Очистить();
		КонецЕсли;
		СкопироватьРекурсивноКоллекцию(КопируемаяКоллекция, КоллекцияПриемника);
		Если ОчиститьИсточник Тогда
			КоллекцияИсточника.ПолучитьЭлементы().Очистить();
		КонецЕсли;
	Иначе
		Если ОчиститьПриемник Тогда
			КоллекцияПриемника.Очистить();
		КонецЕсли;
		СкопироватьКоллекцию(КоллекцияИсточника, КоллекцияПриемника);
		Если ОчиститьИсточник Тогда
			КоллекцияИсточника.Очистить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьОбъектОбработки()
	
	Если ОбъектОбработки = Неопределено Тогда
		ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Частные

&НаКлиенте
Процедура СкопироватьРекурсивноКоллекцию(КоллекцияИсточник, КоллекцияПриемник)
	
	ЭлементыКоллекцияИсточник = КоллекцияИсточник.ПолучитьЭлементы();
	ЭлементыКоллекцияПриемник = КоллекцияПриемник.ПолучитьЭлементы();
	Для Каждого ЭлементКоллекцииИсточник Из ЭлементыКоллекцияИсточник Цикл
		ЭлементКоллекцияПриемник = ЭлементыКоллекцияПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(ЭлементКоллекцияПриемник, ЭлементКоллекцииИсточник);
		СкопироватьРекурсивноКоллекцию(ЭлементКоллекцииИсточник, ЭлементКоллекцияПриемник)
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьКоллекцию(КоллекцияИсточник, КоллекцияПриемник)
	
	Для Каждого СтрокаКоллекцииИсточник Из КоллекцияИсточник Цикл
		СтрокаКоллекцияПриемник = КоллекцияПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКоллекцияПриемник, СтрокаКоллекцииИсточник);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПоставитьСтатусДочернихЭлементов(Элемент, ИмяСтатуса, ЗначениеСтатуса = Истина)
	
	ДочерниеЭлементы = Элемент.ПолучитьЭлементы();
	
	Для Каждого ДочернийЭлемент Из ДочерниеЭлементы Цикл
		ДочернийЭлемент[ИмяСтатуса] = ЗначениеСтатуса;
		ПоставитьСтатусДочернихЭлементов(ДочернийЭлемент, ИмяСтатуса, ЗначениеСтатуса);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти